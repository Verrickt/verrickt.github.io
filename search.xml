<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[HTTPClient 踩坑记]]></title>
      <url>/2017/10/24/httpclient-tipfalls/</url>
      <content type="html"><![CDATA[<p>HttpClient是随着.Net framework 4.5一起发布的现代Http库。比起WebClient，HttpClient最大的优点就是<br>加入了C#5中的async/await异步方法的支持。async/await的坑暂且不表，今天就来说一说这个HttpClient</p>
<h2 id="HttpClient的坑"><a href="#HttpClient的坑" class="headerlink" title="HttpClient的坑"></a>HttpClient的坑</h2><p>HttpClient实现了IDisposable接口，很多小伙伴一看到IDisposeable接口就纷纷把HttpClient套在了using里边</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//bad httpclient usage</div><div class="line">using(var client = new HttpClient())</div><div class="line">&#123;</div><div class="line">    //do stuffs</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种用法是<strong>错误</strong>的.HttpClient在设计之初被设计为一个可重用的对象，它的生命周期应该与应用程序相一致.上述错误的用法每发起一个请求就会创建一个新的HttpClient，并且在收到回复之后立即把HttpClient dispose掉。众所周知TCP连接在真正断开之前会有几分钟处于CLOSE_WAIT状态。这个状态下TCP链接并没有真正断开。短时间内大量发出Http请求会使系统可用的端口急剧消耗。</p>
<a id="more"></a>
<p>MS的人推荐重用HttpClient以使其生命周期与应用相同</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//good httpclient usage</div><div class="line">class GoodHttpClientSample</div><div class="line">&#123;</div><div class="line">    private static readonly HttpClient client = new HttpClient();</div><div class="line">    public Task&lt;string&gt; GetStringAsync(string url)</div><div class="line">    &#123;</div><div class="line">        var resposne = await client.GetAsync(url).ConfigureAwait(false);</div><div class="line">        return response.Content.ReadAsStringAsync();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="HttpClient的优点"><a href="#HttpClient的优点" class="headerlink" title="HttpClient的优点"></a>HttpClient的优点</h2><p>踩过了坑我们再来说说他的好处。去掉async/await支持这个最大的有点，HttpClient的一个构造函数的重载接受一个HttpMessageHandler。这个重载很有意思。HttpMessageHandler可以在发出Http请求和接受Http回复时做出一些回应。.net framework里有一个类叫做DelegatingHandler，它继承了HttpMessageHandler。叫做DelegatingHandler是因为它有个类型为HttpMessageHandler的InnerHandler属性，因而可以把请求delegate给InnerHandler。通过这个DelegatingHandler我们可以请以实现像Java web里的filter chain一样的逻辑。</p>
<p>今天重构了公司的代码。公司现有的HttpManager提供了GET和POST两种Http动词的异步方法。在这些方法中还进行了日志记录和失败重试。日志记录和失败重试相关的代码非常重复，但是又无法写成一个函数。因此我把这部分逻辑抽出来做成了两个DelegatingHandler</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class LogHandler:DelegatingHandler</div><div class="line">&#123;</div><div class="line">    private readonly ILog _log;</div><div class="line">    public LogHandler(ILog log,HttpMessageHandler handler):base(handler)</div><div class="line">    &#123;</div><div class="line">        _log = log;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected async override Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)</div><div class="line">    &#123;</div><div class="line">        try</div><div class="line">        &#123;</div><div class="line">            var begin = DateTime.Now;</div><div class="line">            _log.I($&quot;&#123;request.Method&#125; -&gt;&#123;request.RequestUri&#125;&quot;);</div><div class="line">            var response = await base.SendAsync(request,cancellationToken);</div><div class="line">            var end = DateTime.Now;</div><div class="line">            var diff = (end-begin).TotalMillseconds;</div><div class="line">            _log.I($&quot;&#123;request.Method&#125; &lt;- &#123;response.Content.ReadAsStringAsync()&#125; cost&#123;diff&#125;ms&quot;);</div><div class="line">        &#125;</div><div class="line">        catch(Exception e)</div><div class="line">        &#123;</div><div class="line">            _log.E(&#123;request.Method&#125; -&gt;&#123;request.RequestUri&#125;,&#123;e&#125;);</div><div class="line">            throw;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">class RetryHandler:DelegatingHandler</div><div class="line">&#123;</div><div class="line"></div><div class="line">    protected async override Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request,CancellationToken cancellationToken)</div><div class="line">    &#123;</div><div class="line">        HttpResponseMessage response = null;</div><div class="line">        for(int i=0;i&lt;=_retryTimes,i++)</div><div class="line">        &#123;</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                response = await base.SendAsync(request,cancellationToken);</div><div class="line">                return response;</div><div class="line">            &#125;</div><div class="line">            catch(Exception)</div><div class="line">            &#123;</div><div class="line">                if(i==_retryTimes)</div><div class="line">                &#123;</div><div class="line">                    throw;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            //make compiler happy. </div><div class="line">            return response;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    private readonly int _retryTimes = 0;</div><div class="line">    public RetryHandler(int retryTimes,HttpMessageHandler handler):base(handler)</div><div class="line">    &#123;</div><div class="line">        if(retryTimes&lt;0)</div><div class="line">        &#123;</div><div class="line">            throw new ArgumentOutOfRangeException(nameof(retryTimes));</div><div class="line">        &#125;</div><div class="line">        _retryTimes = retryTimes;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HttpClientHandler是个真正实现HttpClient逻辑的HttpMessageHandler。因此，我们只要保证最内部的Handler时HttpClientHandler就OK了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private staic readonly ILog _log;</div><div class="line"></div><div class="line">private static readonly HttpClient _client = new </div><div class="line">HttpClient(new RetryHandler(3,new LogHandler(_log,new HttpClientHandler())));</div></pre></td></tr></table></figure>
<p><strong>需要注意的是，如果HttpHandler没有返回HttpResponseMessage,对应的异步方法会在运行时抛出InvalidOperationException</strong></p>
<p>重构之后整个Http封装类的代码行数从400行减少到了120行左右，可读性和可维护性提升显著。</p>
<h2 id="Further-reading"><a href="#Further-reading" class="headerlink" title="Further reading"></a>Further reading</h2><p><a href="https://www.thomaslevesque.com/2016/12/08/fun-with-the-httpclient-pipeline/" target="_blank" rel="external">FUN WITH THE HTTPCLIENT PIPELINE</a></p>
<p><a href="https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/" target="_blank" rel="external">YOU’RE USING HTTPCLIENT WRONG AND IT IS DESTABILIZING YOUR SOFTWARE</a></p>
<p><a href="https://stackoverflow.com/questions/15705092/do-httpclient-and-httpclienthandler-have-to-be-disposed" target="_blank" rel="external">Do HttpClient and HttpClientHandler have to be disposed?</a></p>
]]></content>
      
        
        <tags>
            
            <tag> HttpClient </tag>
            
            <tag> C# </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/09/18/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
