<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[重学「冒泡排序」]]></title>
      <url>/2020/03/17/yeah-that-naive-bubbld-sort/</url>
      <content type="html"><![CDATA[<p>PAT里链表题有各式各样的<a href="https://www.liuchuo.net/archives/2116" target="_blank" rel="external">骚操作</a>。这些非常规操作易学易用，但是习惯了这些后，反而对题目真正想考察的知识生疏了。今天就碰到一道这样的题，想用正经的算法写却写不出来。希望大家以我为戒，不要过多的学习这些「奇技淫巧」<br><a id="more"></a></p>
<hr>
<p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805425780670464" target="_blank" rel="external">Linked List Sorting</a>这道题很常规，是个很一般的链表排序题。链表不能随机访问，因此算法上的选择限制很大，只有冒泡、插入、选择排序可以选。我选了冒泡练手，没想到没做出来。</p>
<p>冒泡排序的关键步骤是交换两个相邻的逆序元素。每完成一趟后都有一个元素被顺利的放到了最终位置上。</p>
<p>按我的想法，<code>i in (0,n),j in (i+1,n)</code>，每次<code>j</code>走到<code>n</code>时，就把「最小」的元素放到了<code>i</code>的位置，依次增加<code>i</code>就得到了升序排列。<strong>很遗憾，这是错的</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</div><div class="line">		<span class="keyword">if</span> (n[j] &lt; n[j<span class="number">-1</span>]) swap(n[j], n[j<span class="number">-1</span>]);</div></pre></td></tr></table></figure></p>
<p>在<code>[5,3,1,2,6,7]</code>上考虑这段代码，<code>if</code>语句能保证，只要<code>n[j]</code>比<code>n[j-1]</code>大，就把这个大的往<strong>后</strong>移。。而对于最小值<code>1</code>，仅仅在<code>j=2</code>的时候被<code>swap</code>到了<code>n[1]</code>，并没有真正的移动到<code>n[0]</code>这个我所期待的位置。观察<code>j</code>扫描的方向也是向<strong>后</strong>的。</p>
<p>再看另一种写法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt; i; j--)</div><div class="line">		<span class="keyword">if</span> (n[j] &lt; n[j<span class="number">-1</span>]) swap(n[j], n[j<span class="number">-1</span>]);</div></pre></td></tr></table></figure></p>
<p>这时<code>if</code>语句能保证的是只要<code>n[j]</code>比<code>n[j-1]</code>小，就把这个小的往<strong>前</strong>移。在<code>[5,3,1,2,6,7]</code>，第一轮之后<code>1</code>就被放在了<code>n[0]</code>上。注意到<code>j</code>的移动方向是向<strong>前</strong>的。</p>
<p>我们想得到升序的序列，那么就要把大的往后移，小的往前移。<code>j</code>从前往<strong>后</strong>移动的过程中，我们是把最大的元素往<strong>后移一位</strong>，在下一次比较时最大的元素还会继续被移往后方，最终放在<code>a[n-1]</code>同理，<code>j</code>从后往<strong>前</strong>的过程中，最小的元素会被一直前移，直到<code>a[0]</code>。</p>
<p>因此一趟完成后到底是最大的元素被放到最后了还是最小的元素被放到最前了，要看<code>j</code>移动的方向。在链表中从前往后是方便的，因而最大的元素会被先放到最后。所以我们需要做的是，每一趟减少<code>j</code><strong>移动结束</strong>的范围。</p>
<p>想到这里基本上就能理清了。加上处理头节点的一些细节后，不难写出代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> addr;</div><div class="line">	<span class="keyword">int</span> key;</div><div class="line">	<span class="keyword">int</span> next;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;node&gt; nodes = <span class="built_in">vector</span>&lt;node&gt;(<span class="number">100086</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> n, head;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;head);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> addr, key, next;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;addr, &amp;key, &amp;next);</div><div class="line">		nodes[addr] = node(&#123; addr,key,next &#125;);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> newHead = head;</div><div class="line">	<span class="keyword">int</span> end = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">while</span> (end != newHead)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> t = newHead;</div><div class="line">		<span class="keyword">int</span> pre = <span class="number">-1</span>;</div><div class="line">		<span class="keyword">while</span> (nodes[t].next != end)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> next = nodes[t].next;</div><div class="line">			<span class="keyword">if</span> (nodes[t].key &gt; nodes[next].key)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span> (pre != <span class="number">-1</span>)</div><div class="line">					nodes[pre].next = next;</div><div class="line">				<span class="keyword">else</span></div><div class="line">					newHead = next;</div><div class="line">				nodes[t].next = nodes[next].next;</div><div class="line">				nodes[next].next = t;</div><div class="line">			&#125;</div><div class="line">			pre = t;</div><div class="line">			t = next;</div><div class="line">		&#125;</div><div class="line">		end = t;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> h = newHead;</div><div class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (h != <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		cnt++; h = nodes[h].next;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d %05d\n"</span>, cnt, newHead);</div><div class="line">	h = newHead;</div><div class="line">	<span class="keyword">while</span> (h != <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (nodes[h].next == <span class="number">-1</span>)</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%05d %d -1\n"</span>, nodes[h].addr, nodes[h].key);</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>, nodes[h].addr, nodes[h].key, nodes[h].next);</div><div class="line">		h = nodes[h].next;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>欢天喜地的去提交，发现有一个点超时了。诚然，冒泡排序的时间复杂度是<code>Θ(n^2)</code>，非常规操作里用<code>std::sort</code>处理后输出的时间复杂度是<code>Θ(nlogn)</code>，超时是理所应当。放眼望去绝大多数AC的代码都用的与这种投机取巧的方法。不知道这是不是违背出题人的初衷呢？</p>
<p>当然，这问题轮不到我评头论足，我只是个连冒泡排序都忘得一干二净的渣渣🙂</p>
<hr>
<p>总结：</p>
<ul>
<li>冒泡排序一趟后被放到最终位置的元素与扫描方向有关</li>
<li>基本功要打扎实，切忌「眼高手低」</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PAT-1038 Recover the Smallest Number]]></title>
      <url>/2020/03/16/PAT-1038-Recover-the-Smallest-Number/</url>
      <content type="html"><![CDATA[<h1 id="Recover-the-Smallest-Number"><a href="#Recover-the-Smallest-Number" class="headerlink" title="Recover the Smallest Number"></a>Recover the Smallest Number</h1><p>Given a collection of number segments, you are supposed to recover the smallest number from them. For example, given <code>{ 32, 321, 3214, 0229, 87 }</code>, we can recover many numbers such like <code>32-321-3214-0229-87</code> or <code>0229-32-87-321-3214</code> with respect to different orders of combinations of these segments, and the smallest number is <code>0229-321-3214-32-87</code>.<br><a id="more"></a><br><strong>Input Specification</strong></p>
<p>Each input file contains one test case. Each case gives a positive integer N (≤10​^4​​) followed by N number segments. Each segment contains a non-negative integer of no more than 8 digits. All the numbers in a line are separated by a space. </p>
<p><strong>Output Specification</strong></p>
<p>For each test case, print the smallest number in one line. Notice that the first digit must not be zero.</p>
<p><strong>Sample Input</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">5 32 321 3214 0229 87</div></pre></td></tr></table></figure></p>
<p><strong>Sample Output</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">22932132143287</div></pre></td></tr></table></figure></p>
<hr>
<p>这道题以前就没做对，这次也没做对，记录一下。</p>
<p>两次读完题的反应完全一致：谁“小”把谁排前面。</p>
<ol>
<li>若两个数位数相同，按数值比较</li>
<li>若两个数位数不同，位数少的数字补0至位数相同，按数值比较。</li>
</ol>
<p>我的cmp是这么写的<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">string</span> p1 = a, p2 = b;</div><div class="line">	<span class="keyword">int</span> diff = p1.size() - p2.size();</div><div class="line">	<span class="keyword">if</span> (diff &lt; <span class="number">0</span>) swap(p1, p2);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>(diff); i++) p2.push_back(<span class="string">'0'</span>);</div><div class="line">	<span class="keyword">return</span> p1 &lt; p2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Debug模式在运行时报错，<code>Assert failed: Invalid comparor</code>. 根据<a href="https://en.cppreference.com/w/cpp/named_req/Compare" target="_blank" rel="external">cppreference</a>，<code>comparer</code>需满足</p>
<ul>
<li>反自反.对于所有的<code>a</code>,<code>comp(a,a)==false</code></li>
<li>反对称.若<code>comp(a,b)==true</code>，则<code>comp(b,a)==false</code></li>
<li>传递 若<code>comp(a,b)==true</code>，<code>comp(b,c)==true</code>,则<code>comp(a,c)==true</code>.</li>
</ul>
<p>我们的<code>comparer</code>违背了反对称性。<code>comp(9,10)===comp(10,9)</code></p>
<p>查到<code>string</code>的<code>&lt;</code>操作符按照<a href="https://en.wikipedia.org/wiki/Lexicographical_order" target="_blank" rel="external">字典序</a>进行比较。而我们辛辛苦苦的补<code>0</code>，就是要按字典序比较。</p>
<p>事实证明字典序也不对。考虑<code>32</code>和<code>321</code>，按照字典序，<code>32</code>&lt;<code>321</code>，但这样拼接的<code>32321</code>却比<code>32132</code>要大。似乎还要考虑字符串的首位和末位。</p>
<p>查了别人的代码，最好的解决办法是，把问题原样丢给C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">return</span> s1 + s2 &gt; s2 + s1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我居然还想了半天，整个人都不好了😶</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">//sort by lexicographical order doesn't work here. 33&lt;321,but 33321 &gt; 32133. :-(</span></div><div class="line">	<span class="comment">//but we can throw the problem at cpp :-)</span></div><div class="line">	<span class="keyword">auto</span> p1 = s1;</div><div class="line">	<span class="keyword">auto</span> p2 = s2;</div><div class="line">	<span class="keyword">return</span> p1+p2 &lt; p2+p1;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v=<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;(n);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; v[i];</div><div class="line">	sort(v.begin(), v.end(), cmp);</div><div class="line">	<span class="built_in">string</span> res;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> i : v) res.append(i);</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>; <span class="keyword">while</span> (res[i] == <span class="string">'0'</span>) i++;</div><div class="line">	res = res.substr(i);</div><div class="line">	<span class="keyword">if</span> (res.size() == <span class="number">0</span>) res = <span class="string">"0"</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PAT 1007 Maximum Subsequence Sum]]></title>
      <url>/2020/03/11/PAT-1007-Maximum-Subsequence-Sum/</url>
      <content type="html"><![CDATA[<h2 id="Maximum-Subsequence-Sum"><a href="#Maximum-Subsequence-Sum" class="headerlink" title="Maximum Subsequence Sum"></a>Maximum Subsequence Sum</h2><p>Given a sequence of K integers { N​1​​, N​2​​, …, N​K​​ }. A continuous subsequence is defined to be { N​i​​, N​i+1​​, …, N​j​​ } where 1≤i≤j≤K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p>
<p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.</p>
<a id="more"></a>
<p><strong>Input Specification</strong></p>
<p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (≤10000). The second line contains K numbers, separated by a space.</p>
<p><strong>Output Specification</strong></p>
<p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence. </p>
<p><strong>Sample Input</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">10</div><div class="line">-10 1 2 3 4 -5 -23 3 7 -21</div></pre></td></tr></table></figure>
<p><strong>Sample Output</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">10 1 4</div></pre></td></tr></table></figure></p>
<hr>
<p>分数线死活不出来，一为排解焦虑，二为准备复试，建了个小号重刷PAT。最大子列和这个问题自己想不出来，听别人的想法似懂非懂，抄的代码放久了还是看不懂，让我头疼不已。今天在往常的思路上多想了一步，迎刃而解。记录一番，以示庆祝。</p>
<p>根据历次的印象，应该用动规。根据历次的印象，应该用前一段的最大子列和与当前元素作为状态转换方程的参数。好了，到了这一步就卡住了。</p>
<p>以往我的思路是，<code>新的子列和=旧子列和+最后一项</code>。<code>旧子列和</code>和<code>最后一项</code>可正可负，但只要<code>最后一项</code>是正的，那么子列和就严格递增。可是这样的思路在后面是<code>-2,5</code>的时候就行不通了。以前走到这一步我就去求助搜索引擎了。</p>
<p>这次在上面的思路上稍微走了一步。加法是有交换律的。不妨把式子改写成<code>新的子列和=最后一项+旧子列和</code>。不考虑<code>最后一项</code>的正负，而去考虑<code>旧子列和</code>的正负。</p>
<ul>
<li>如果<code>旧子列和</code>为正，那么不管<code>最后一项</code>符号如何，新子列和一定比<code>最后一项</code>要大。</li>
<li>如果<code>旧子列和</code>为负，那么不管<code>最后一项</code>符号如何，新子列和一定比<code>最后一项</code>要小。</li>
</ul>
<p>如果一个<code>新子列和</code>比<code>最后一项</code>还要小，取仅含<code>最后一项</code>的子序列，则它比<code>新子列和</code>还要大。这时的<code>新子列和</code>并不是最大子列和。舍弃之。</p>
<p>把<code>最后一项</code>当作子列的第一项，重复上述的过程，则可以得到几个连续序列的<strong>正数</strong>和。最大子列和就藏在这些正数和当中。问题转化求几个数的最大值。这还用想？😛</p>
<p>针对这道题的要求改一改，就得到答案啦<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> k;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; k;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(k);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</div><div class="line">	<span class="keyword">int</span> i=<span class="number">0</span>, sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> max = <span class="number">-1</span>;</div><div class="line">	sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> p = <span class="number">0</span>, q = k<span class="number">-1</span>;</div><div class="line">	<span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">	&#123;</div><div class="line">		sum += v[i];</div><div class="line">		<span class="keyword">if</span> (sum&gt;max)</div><div class="line">		&#123;</div><div class="line">			max = sum;</div><div class="line">			p = s;</div><div class="line">			q = i;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (sum&lt;<span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			s = i+<span class="number">1</span>;</div><div class="line">			sum = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (max &lt; <span class="number">0</span>) max = <span class="number">0</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d %d"</span>, max, v[p], v[q]);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「C++」踩坑]]></title>
      <url>/2019/08/21/cpp-the-double-edged-sword/</url>
      <content type="html"><![CDATA[<p>因为PAT刷题的缘故,开始再次接触C++.用过OOP语言再回来用C十分不习惯,C++就顺手多了.C没有泛型,字符串也不好用,C++就好多了,STL的容器和模板完美结合,字符串类也堪用.</p>
<a id="more"></a>
<p>按照欲抑先扬的套路,下面就该说说缺点了.作为老资历的语言,C++有些部分真是让人摸不着头脑.比如非void函数可以不返回值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int do_something(int i)</div><div class="line">&#123;</div><div class="line">    int j = i+1;</div><div class="line">    // returns nothing;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我就在这上面被坑了.BST的构建函数忘记返回值,调了一个多小时.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function">node* <span class="title">insert</span><span class="params">(node* root,<span class="keyword">int</span> data)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</div><div class="line">    &#123;</div><div class="line">        root = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</div><div class="line">        root-&gt;left = <span class="literal">nullptr</span>;</div><div class="line">        root-&gt;right = <span class="literal">nullptr</span>;</div><div class="line">        root-&gt;data=data;</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(data&lt;root-&gt;data)</div><div class="line">    &#123;</div><div class="line">        root-&gt;left = insert(root-&gt;left,data);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        root-&gt;right = insert(root-&gt;right,data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//return root</span></div><div class="line">    <span class="comment">//掉了这一句</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>自己的机器上跑一直没问题,一提交就错.抓瞎搞了一个多小时,又被devcpp的智能提示搞得心态爆炸,切换回了Visual Studio开始调试.结果依旧,不过编译的输出里多了一行Warning<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">warning C4715: &apos;insert&apos;: not all control paths return a value</div></pre></td></tr></table></figure></p>
<p>把掉了的<code>return</code>语句加回去,AC了.</p>
<p><a href="https://softwareengineering.stackexchange.com/questions/153372/function-works-fine-without-return-value-in-c" target="_blank" rel="external">StackExchange</a>上有人问了同样的问题</p>
<quote> I forgot to write return ‘a’; in function and return 0; in main function but its works fine in Code::Blocks.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace std;</div><div class="line">char show()</div><div class="line">&#123;</div><div class="line">    cout&lt;&lt;&quot;this is show function&quot;&lt;&lt;endl;</div><div class="line">&#125;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    show();</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br> i am using Code::Blocks 10.05 in Ubuntu 12.04. Why this happen and why does the same thing cause an error in TURBO C++?<br></quote>

<p>Answer:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">If a function is declared to return a value, and fails to do so, the result is undefined behavior (in C++). One possible result is seeming to work, which is pretty much what you&apos;re seeing here.</div><div class="line"></div><div class="line">As an aside, in C, you wouldn&apos;t actually have undefined behavior -- in C, you get undefined behavior only if you try to use the return value, and the function didn&apos;t specify a value to return.</div></pre></td></tr></table></figure>
<p>在其他的语言里,一般会直接报错编译失败,在C++里就变成了编译器警告.去devcpp鼓捣了一下,把warning打开了.我要是选个带VS的考场就不用折腾devcpp了.真的难用.</p>
<p>想到初学编程的时候,编辑器和IDE党的圣战.一方说平均水平高,一方说效率高,争起来无休无止的口水战.</p>
<p>不过现在嘛,因为</p>
<ol>
<li>好用的IDE成倍提升效率.</li>
<li>IDE降低了上下文切换的开销,但对工具链不熟悉还是会吃亏.</li>
</ol>
<p>搞熟了工具链的我选择IDE.</p>
<p>不过tab和space的扣税战到现在还没结束,IDE和编辑器的口水战不知道还要打多少年呢</p>
]]></content>
      
        
        <tags>
            
            <tag> CPP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Head of a Gang]]></title>
      <url>/2019/08/20/PAT-1034-Head-of-a-Gang/</url>
      <content type="html"><![CDATA[<h2 id="Head-of-a-gang"><a href="#Head-of-a-gang" class="headerlink" title="Head of a gang"></a>Head of a gang</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805456881434624" target="_blank" rel="external">Head of a Gang</a></p>
<p>One way that the police finds the head of a gang is to check people’s phone calls. If there is a phone call between A and B, we say that A and B is related. The weight of a relation is defined to be the total time length of all the phone calls made between the two persons. A “Gang” is a cluster of more than 2 persons who are related to each other with total relation weight being greater than a given threthold K. In each gang, the one with maximum total weight is the head. Now given a list of phone calls, you are supposed to find the gangs and the heads.</p>
<a id="more"></a>
<p><strong>Input Specification:</strong></p>
<p>Each input file contains one test case. For each case, the first line contains two positive numbers N and K (both less than or equal to 1000), the number of phone calls and the weight threthold, respectively. Then N lines follow, each in the following format:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Name1 Name2 Time</div></pre></td></tr></table></figure>
<p>where Name1 and Name2 are the names of people at the two ends of the call, and Time is the length of the call. A name is a string of three capital letters chosen from A-Z. A time length is a positive integer which is no more than 1000 minutes.</p>
<p><strong>Output Specification:</strong></p>
<p>For each test case, first print in a line the total number of gangs. Then for each gang, print in a line the name of the head and the total number of the members. It is guaranteed that the head is unique for each gang. The output must be sorted according to the alphabetical order of the names of the heads.<br><strong>Sample Input 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">8 59</div><div class="line">AAA BBB 10</div><div class="line">BBB AAA 20</div><div class="line">AAA CCC 40</div><div class="line">DDD EEE 5</div><div class="line">EEE DDD 70</div><div class="line">FFF GGG 30</div><div class="line">GGG HHH 20</div><div class="line">HHH FFF 10</div></pre></td></tr></table></figure>
<p><strong>Sample Output 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2</div><div class="line">AAA 3</div><div class="line">GGG 3</div></pre></td></tr></table></figure></p>
<p><strong>Sample Input 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">8 70</div><div class="line">AAA BBB 10</div><div class="line">BBB AAA 20</div><div class="line">AAA CCC 40</div><div class="line">DDD EEE 5</div><div class="line">EEE DDD 70</div><div class="line">FFF GGG 30</div><div class="line">GGG HHH 20</div><div class="line">HHH FFF 10</div></pre></td></tr></table></figure></p>
<p><strong>Sample Output 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0</div></pre></td></tr></table></figure></p>
<p>题目大意:警方要抓捕犯罪分子.打过电话的两个人有关系,关系的权重是通话时间.一组有关系的人,如果关系的权重和超过阈值<code>K</code>,并且有大于<strong>两个人</strong>,就认为是一个犯罪团伙.通话时间最长的人是头目.现在给定一组通话记录,求其中的犯罪团伙的个数,以及各个头目的名字.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这是一道图论的综合题.首先要把通话记录中的名字变成下标,可以用<code>map&lt;string,int&gt;</code>实现.<br>然后要求图的连通分量个数.对于每个连通分量,求该连通分量的边权和,出边权值和最大的节点,连通分量的大小.</p>
<p>边权和可将所有边权求和除以2得出,出边权值在访问邻接点时可以计算.正好和<code>dfs</code>结合起来.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n,k;</div><div class="line"><span class="keyword">int</span> weight[<span class="number">4000</span>][<span class="number">4000</span>];</div><div class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; f;</div><div class="line"><span class="keyword">int</span> ind=<span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> visited[<span class="number">4000</span>];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">p</span>&#123;</span></div><div class="line">	<span class="built_in">string</span> name;</div><div class="line">	<span class="keyword">int</span> size;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;p&gt; result;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(p p1,p p2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">return</span> p1.name&lt;p2.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">next_index</span><span class="params">(<span class="built_in">string</span> str)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span>(f.find(str)==f.end())</div><div class="line">	&#123;</div><div class="line">		f[str]=ind;</div><div class="line">		ind++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> f[str];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span>&amp; max_index,<span class="keyword">int</span>&amp; size)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">	q.push(index);</div><div class="line">	<span class="keyword">int</span> counter = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> max_sum=<span class="number">-1</span>;</div><div class="line">	max_index=<span class="number">-1</span>; </div><div class="line">	visited[index]=<span class="literal">true</span>;</div><div class="line">	<span class="keyword">while</span>(!q.empty())</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> f = q.front();</div><div class="line">		<span class="keyword">int</span> acc=<span class="number">0</span>;</div><div class="line">		q.pop();</div><div class="line">		counter++;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(weight[f][i]!=<span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(!visited[i])</div><div class="line">				&#123;</div><div class="line">					visited[i]=<span class="literal">true</span>;</div><div class="line">					</div><div class="line">					q.push(i);</div><div class="line">				&#125;</div><div class="line">				sum+=weight[f][i];</div><div class="line">				acc+=weight[f][i];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(acc&gt;max_sum)</div><div class="line">		&#123;</div><div class="line">			max_sum=acc;</div><div class="line">			max_index=f;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	size = counter;</div><div class="line">	<span class="keyword">return</span> counter&gt;<span class="number">2</span>&amp;&amp;sum&gt;k*<span class="number">2</span>;</div><div class="line">	</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> w;</div><div class="line">		<span class="built_in">string</span> s1,s2;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2&gt;&gt;w;</div><div class="line">		<span class="keyword">int</span> n1 = next_index(s1);</div><div class="line">		<span class="keyword">int</span> n2 = next_index(s2);</div><div class="line">		weight[n1][n2]+=w;</div><div class="line">		weight[n2][n1]+=w;</div><div class="line">	&#125;</div><div class="line">	fill(visited,visited+n,<span class="literal">false</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> it=f.begin();it!=f.end();it++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!visited[it-&gt;second])</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> max_index;</div><div class="line">			<span class="keyword">int</span> size;</div><div class="line">			<span class="keyword">if</span>(bfs(it-&gt;second,max_index,size))</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">auto</span> ii=f.begin();ii!=f.end();ii++)</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">if</span>(ii-&gt;second==max_index)</div><div class="line">					&#123;</div><div class="line">						p pp;</div><div class="line">						pp.name=ii-&gt;first;</div><div class="line">						pp.size=size;</div><div class="line">						result.push_back(pp);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;result.size()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	sort(result.begin(),result.end(),cmp);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> p:result)</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;p.name&lt;&lt;<span class="string">" "</span>&lt;&lt;p.size&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在构建从人名到下标的映射的时候可以顺便构建从下标到人名的反向映射.可以省去输出时遍历<code>f</code>中所有元素的反向查找,我这里就偷懒了:-P</p>
]]></content>
      
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[1018 Public Bike Management]]></title>
      <url>/2019/08/16/PAT-1018-Public-Bike-Management/</url>
      <content type="html"><![CDATA[<h2 id="Public-Bike-Management"><a href="#Public-Bike-Management" class="headerlink" title="Public Bike Management"></a>Public Bike Management</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805489282433024" target="_blank" rel="external">1018 Public Bike Management</a></p>
<p>There is a public bike service in Hangzhou City which provides great convenience to the tourists from all over the world. One may rent a bike at any station and return it to any other stations in the city.<br><a id="more"></a><br>The Public Bike Management Center (PBMC) keeps monitoring the real-time capacity of all the stations. A station is said to be in perfect condition if it is exactly half-full. If a station is full or empty, PBMC will collect or send bikes to adjust the condition of that station to perfect. And more, all the stations on the way will be adjusted as well.</p>
<p>When a problem station is reported, PBMC will always choose the shortest path to reach that station. If there are more than one shortest path, the one that requires the least number of bikes sent from PBMC will be chosen.</p>
<p>The above figure illustrates an example. The stations are represented by vertices and the roads correspond to the edges. The number on an edge is the time taken to reach one end station from another. The number written inside a vertex S is the current number of bikes stored at S. Given that the maximum capacity of each station is 10. To solve the problem at S​3​​, we have 2 different shortest paths:</p>
<ol>
<li><p>PBMC -&gt; S​1​​ -&gt; S​3​​. In this case, 4 bikes must be sent from PBMC, because we can collect 1 bike from S​1​​ and then take 5 bikes to S​3​​, so that both stations will be in perfect conditions.</p>
</li>
<li><p>PBMC -&gt; S​2​​ -&gt; S​3​​. This path requires the same time as path 1, but only 3 bikes sent from PBMC and hence is the one that will be chosen.</p>
</li>
</ol>
<p><strong>Input Specification:</strong></p>
<p>Each input file contains one test case. For each case, the first line contains 4 numbers: C​max​​ (≤100), always an even number, is the maximum capacity of each station; N (≤500), the total number of stations; S​p​​, the index of the problem station (the stations are numbered from 1 to N, and PBMC is represented by the vertex 0); and M, the number of roads. The second line contains N non-negative numbers C​i​​ (i=1,⋯,N) where each C​i​​ is the current number of bikes at S​i​​ respectively. Then M lines follow, each contains 3 numbers: S​i​​, S​j​​, and T​ij​​ which describe the time T​ij​​ taken to move betwen stations S​i​​ and S​j​​. All the numbers in a line are separated by a space.</p>
<p><strong>Output Specification:</strong></p>
<p>For each test case, print your results in one line. First output the number of bikes that PBMC must send. Then after one space, output the path in the format: 0−&gt;S​1​​−&gt;⋯−&gt;S​p​​. Finally after another space, output the number of bikes that we must take back to PBMC after the condition of S​p​​ is adjusted to perfect.</p>
<p>Note that if such a path is not unique, output the one that requires minimum number of bikes that we must take back to PBMC. The judge’s data guarantee that such a path is unique.</p>
<p><strong>Sample Input:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">10 3 3 5</div><div class="line">6 7 0</div><div class="line">0 1 1</div><div class="line">0 2 1</div><div class="line">0 3 3</div><div class="line">1 3 1</div><div class="line">2 3 1</div></pre></td></tr></table></figure></p>
<p><strong>Sample Output:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3 0-&gt;2-&gt;3 0</div></pre></td></tr></table></figure></p>
<p>题目大意:<br>公共自行车站点的自行车数量是半满的时候称为完美.不完美的站点就需要调度.给定起点和终点,找到最短的一条路线,并把沿途经过的站点全部调度为完美.如果有多条路线存在,选择从起点带出自行车最小的那一条.最后输出从起点带出的自行车数,路线,从终点带回的自行车数.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>单源最短路径问题<code>dijkstra</code>是跑不掉了.问题的关键在于,当松弛的对象v的最短路径预期<code>dist[v]</code>和当前最短路径于权值的和<code>dist[min]+edge(min,v)</code>相等时候的取舍.<br>一个简单的想法是,出现一致时,计算最短路上平均节点的点权,取最大的那一条.很不幸的是,<code>dijkstra</code>执行过程中并不知道所要比较的两条最短路的长度.</p>
<p>参考了其他人的思路,与其在还未生成最短路径时想办法取舍,不如等到所有的最短路径都求出来以后再去选最优的那一条.原版算法中记录前驱结点的<code>int path[]</code>就要改成<code>vector&lt;int&gt; pre[]</code>了.松弛成功时,清空<code>path[i]</code>,放入<code>min</code>.权值相同时,放入<code>min</code>.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">bool</span> visited[<span class="number">504</span>];</div><div class="line">	fill(visited,visited+n+<span class="number">1</span>,<span class="literal">false</span>);</div><div class="line"></div><div class="line">	fill(estimate,estimate+n+<span class="number">1</span>,inf);</div><div class="line">	estimate[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> min=<span class="number">-1</span>;</div><div class="line">		<span class="keyword">int</span> minn=inf;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(estimate[i]&lt;minn&amp;&amp;visited[i]==<span class="literal">false</span>)</div><div class="line">			&#123;</div><div class="line">				minn=estimate[i];</div><div class="line">				min=i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(minn==inf) <span class="keyword">break</span>;</div><div class="line">		visited[min]=<span class="literal">true</span>;</div><div class="line">	</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(t[min][i]!=<span class="number">-1</span>&amp;&amp;visited[i]==<span class="literal">false</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(estimate[i]&gt;estimate[min]+t[min][i])</div><div class="line">				&#123;</div><div class="line">					estimate[i]=estimate[min]+t[min][i];</div><div class="line">					path[i].clear();</div><div class="line">					path[i].push_back(min);</div><div class="line">				</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(estimate[i]==estimate[min]+t[min][i])</div><div class="line">				&#123;</div><div class="line">					path[i].push_back(min);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跑完<code>dijkstra</code>,<code>path[i]</code>的笛卡尔积就是所有的最短路径.</p>
<p>现在问题转化为,给定好几条路径,如何选出最优的那一条.<code>dfs</code>帮了大忙.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	temp_path.push_back(v);</div><div class="line">	<span class="keyword">if</span>(v==<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> need=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> back=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=temp_path.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> id=temp_path[i];</div><div class="line">			<span class="keyword">if</span>(bycicle[id]&gt;<span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				back+=bycicle[id];</div><div class="line">			&#125; <span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(back&gt;(<span class="number">0</span>-bycicle[id]))</div><div class="line">				&#123;</div><div class="line">					back+=bycicle[id];</div><div class="line">				&#125; <span class="keyword">else</span></div><div class="line">				&#123;</div><div class="line">					need+=((<span class="number">0</span>-bycicle[id])-back);</div><div class="line">					back=<span class="number">0</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(need&lt;min_need)</div><div class="line">		&#123;</div><div class="line">			min_need=need;</div><div class="line">			min_back=back;</div><div class="line">			min_path=temp_path;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(need==min_need&amp;&amp;back&lt;min_back)</div><div class="line">		&#123;</div><div class="line">			min_back=back;</div><div class="line">			min_path=temp_path;</div><div class="line">		&#125;</div><div class="line">		temp_path.pop_back();</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">				</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i:path[v])</div><div class="line">		&#123;</div><div class="line">			dfs(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	temp_path.pop_back();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>进入<code>dfs</code>后二话不说先将当前节点放入<code>temp_path</code>,在返回之前再将其弹出.这保证了,调用<code>dfs(sp)后</code>,只要<code>v</code>是起点,<code>temp_path</code>就是一条完整的路径(倒序).倒过来就能推出带出和带回的自行车数.</p>
<ul>
<li>当节点的自行车数与完美状态的差值<code>bicycle[i]=s[i]-cmax/2</code>为正时,在离开该节点时需要带走这么多车子.<code>back+=bicycle[i]</code>. </li>
<li>当<code>bicycle[i]</code>为负时,考虑两种情况.<ul>
<li><code>back</code>比<code>bicycle[i]</code>的绝对值大时,表示携带的自行车比当前节点要多.只需分给该节点<code>|bibycle[i]|</code>这么多的自行车即可达成完美.<code>back+=bicycle[i]</code></li>
<li>当<code>back</code>比<code>bicycle[i]</code>的绝对值要小时,表示携带的自行车不够分,需要从起点携带.两者的差值就是所需的车辆数.<code>need+=(0-bicycle[i])-back</code>,携带的车辆数置零<code>back=0</code></li>
</ul>
</li>
</ul>
<p>选出<code>need</code>和<code>back</code>最小的路线即可.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> cmax;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> sp;</div><div class="line"><span class="keyword">int</span> m;</div><div class="line"><span class="keyword">int</span> bycicle[<span class="number">504</span>];</div><div class="line"><span class="keyword">int</span> t[<span class="number">504</span>][<span class="number">504</span>];</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0xFFFFFFF</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path[<span class="number">504</span>];</div><div class="line"><span class="keyword">int</span> estimate[<span class="number">504</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; min_path;</div><div class="line"><span class="keyword">int</span> min_need=inf;</div><div class="line"><span class="keyword">int</span> min_back=inf;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp_path;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	temp_path.push_back(v);</div><div class="line">	<span class="keyword">if</span>(v==<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> need=<span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> back=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=temp_path.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> id=temp_path[i];</div><div class="line">			<span class="keyword">if</span>(bycicle[id]&gt;<span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				back+=bycicle[id];</div><div class="line">			&#125; <span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(back&gt;(<span class="number">0</span>-bycicle[id]))</div><div class="line">				&#123;</div><div class="line">					back+=bycicle[id];</div><div class="line">				&#125; <span class="keyword">else</span></div><div class="line">				&#123;</div><div class="line">					need+=((<span class="number">0</span>-bycicle[id])-back);</div><div class="line">					back=<span class="number">0</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(need&lt;min_need)</div><div class="line">		&#123;</div><div class="line">			min_need=need;</div><div class="line">			min_back=back;</div><div class="line">			min_path=temp_path;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(need==min_need&amp;&amp;back&lt;min_back)</div><div class="line">		&#123;</div><div class="line">			min_back=back;</div><div class="line">			min_path=temp_path;</div><div class="line">		&#125;</div><div class="line">		temp_path.pop_back();</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">				</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i:path[v])</div><div class="line">		&#123;</div><div class="line">			dfs(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	temp_path.pop_back();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">bool</span> visited[<span class="number">504</span>];</div><div class="line">	fill(visited,visited+n+<span class="number">1</span>,<span class="literal">false</span>);</div><div class="line"></div><div class="line">	fill(estimate,estimate+n+<span class="number">1</span>,inf);</div><div class="line">	estimate[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> min=<span class="number">-1</span>;</div><div class="line">		<span class="keyword">int</span> minn=inf;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(estimate[i]&lt;minn&amp;&amp;visited[i]==<span class="literal">false</span>)</div><div class="line">			&#123;</div><div class="line">				minn=estimate[i];</div><div class="line">				min=i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(minn==inf) <span class="keyword">break</span>;</div><div class="line">		visited[min]=<span class="literal">true</span>;</div><div class="line">	</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(t[min][i]!=<span class="number">-1</span>&amp;&amp;visited[i]==<span class="literal">false</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(estimate[i]&gt;estimate[min]+t[min][i])</div><div class="line">				&#123;</div><div class="line">					estimate[i]=estimate[min]+t[min][i];</div><div class="line">					path[i].clear();</div><div class="line">					path[i].push_back(min);</div><div class="line">				</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(estimate[i]==estimate[min]+t[min][i])</div><div class="line">				&#123;</div><div class="line">					path[i].push_back(min);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;cmax&gt;&gt;n&gt;&gt;sp&gt;&gt;m;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,bycicle+i);</div><div class="line">		bycicle[i]-=cmax/<span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++) t[i][j]=<span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> si,sj,tij;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;si,&amp;sj,&amp;tij);</div><div class="line">		t[si][sj]=tij;</div><div class="line">		t[sj][si]=tij;</div><div class="line">	&#125;</div><div class="line">	dijkstra();</div><div class="line">	dfs(sp);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d 0"</span>,min_need);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=min_path.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"-&gt;%d"</span>,min_path[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">" %d\n"</span>,min_back);</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="一点小想法"><a href="#一点小想法" class="headerlink" title="一点小想法"></a>一点小想法</h2><ul>
<li>用<code>dfs</code>外加辅助存储可以实现类似笛卡尔积的效果.比排列组合要方便不少</li>
<li>经典算法之所以经典的原因在于,很多问题可以用经典算法的变体解决.适用面大,所以经典.</li>
<li>在计算<code>back</code>和<code>need</code>时又用到了递推.给递推打个星⭐</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[回顾排队问题]]></title>
      <url>/2019/08/16/Queueing-Problem-Revisited/</url>
      <content type="html"><![CDATA[<p>刷PAT的过程中遇到了两类排队问题,这里总结一下</p>
<ul>
<li>所有人在同一时刻到达,如<a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805498207911936" target="_blank" rel="external">1014 Waiting in Line</a></li>
<li>每个人到达的时刻不同,如<a href="(https://pintia.cn/problem-sets/994805342720868352/problems/994805491530579968">1017 Queueing at Bank</a>)</li>
</ul>
<a id="more"></a>
<p>解决这类问题一个比较好的思路是递推.<br>对同一时刻到达的问题,可以每个窗口设置<code>front</code>和<code>rear</code>两个变量,分别表示队首和队尾离队时间.<code>front</code>值最小的队列就是应该插入的队列.入队元素的离队时间可以由<code>rear+=current.duration</code>递推给出.队首元素离队后,原来第二个元素成为新的队首元素.更新<code>front+=header.duration</code>.</p>
<p>对到达时刻不同的问题,给队列设置一个<code>finish</code>,表示完成服务的时间.顾客来排队时,先找最小<code>finish</code>的队列.如果<code>finish</code>比他来的时间还早,那么他不需要等待,直接入队就好.更新<code>finish</code>为<code>current.time+current.duration</code>;如果<code>finish</code>比他来的时间晚,首先要等待<code>finish-current.time</code>这么久的时间.更新<code>finish+=current.duration</code>.</p>
<p>看懂了柳神的解法,再看自己1014的解法,十分惭愧.要继续努力啊🤠</p>
]]></content>
      
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PAT 1014 Waiting in Line]]></title>
      <url>/2019/08/14/PAT-1014-Waiting-in-Line/</url>
      <content type="html"><![CDATA[<h2 id="Waiting-in-Line"><a href="#Waiting-in-Line" class="headerlink" title="Waiting in Line"></a>Waiting in Line</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805498207911936" target="_blank" rel="external">1014 Waiting in Line</a></p>
<p>Suppose a bank has N windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. The rules for the customers to wait in line are:<br><a id="more"></a></p>
<ul>
<li>The space inside the yellow line in front of each window is enough to contain a line with M customers. Hence when all the N lines are full, all the customers after (and including) the (NM+1)st one will have to wait in a line behind the yellow line.</li>
<li>Each customer will choose the shortest line to wait in when crossing the yellow line. If there are two or more lines with the same length, the customer will always choose the window with the smallest number.</li>
<li>Customer<code>​i</code>​​ will take T​i​​ minutes to have his/her transaction processed.</li>
<li>The first N customers are assumed to be served at 8:00am.</li>
</ul>
<p>Now given the processing time of each customer, you are supposed to tell the exact time at which a customer has his/her business done.</p>
<p>For example, suppose that a bank has 2 windows and each window may have 2 custmers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, customer​1​​ is served at window​1​​ while customer​2​​ is served at window​2​​. Customer​3​​ will wait in front of window​1​​ and customer​4​​ will wait in front of window​2​​. Customer​5​​ will wait behind the yellow line.</p>
<p>At 08:01, customer​1​​ is done and customer​5​​ enters the line in front of window​1​​ since that line seems shorter now. Customer​2​​ will leave at 08:02, customer​4​​ at 08:06, customer​3​​ at 08:07, and finally customer​5​​ at 08:10.</p>
<p><strong>Input Specification:</strong><br>Each input file contains one test case. Each case starts with a line containing 4 positive integers: N (≤20, number of windows), M (≤10, the maximum capacity of each line inside the yellow line), K (≤1000, number of customers), and Q (≤1000, number of customer queries).</p>
<p>The next line contains K positive integers, which are the processing time of the K customers.</p>
<p>The last line contains Q positive integers, which represent the customers who are asking about the time they can have their transactions done. The customers are numbered from 1 to K.</p>
<p><strong>Output Specification:</strong></p>
<p>For each of the Q customers, print in one line the time at which his/her transaction is finished, in the format HH:MM where HH is in [08, 17] and MM is in [00, 59]. Note that since the bank is closed everyday after 17:00, for those customers who cannot be served before 17:00, you must output Sorry instead.</p>
<p><strong>Sample Input:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2 2 7 5</div><div class="line">1 2 6 4 3 534 2</div><div class="line">3 4 5 6 7</div></pre></td></tr></table></figure>
<p><strong>Sample Output:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">08:07</div><div class="line">08:06</div><div class="line">08:10</div><div class="line">17:00</div><div class="line">Sorry</div></pre></td></tr></table></figure></p>
<p>银行有<code>N</code>个窗口,每个窗口前有黄线,可以站<code>M</code>个人.现在有<code>K</code>个人要来银行办业务.排队时优先选择人少的队伍,人数一样则优先选窗口编号小的.若黄线区全满则等到队伍空出时再排队.银行8点开门,17点后还没有开始服务的顾客无法接受服务,应输出<code>Sorry</code>,否则应输出服务结束的时间.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先考虑两个窗口,黄线站一个人的情况.前两个人直接接受服务,第三个人会排到最先有空位的那个队伍中去.最先有空位的队伍,也就是当前服务的顾客所需剩余服务时间最短的队伍.<br>考虑这样定义结构<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">customer</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> start;</div><div class="line">	<span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">int</span> duration;</div><div class="line">	<span class="keyword">int</span> finished;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">window</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> offset;</div><div class="line">	<span class="keyword">int</span> remaining;</div><div class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>offset为当前时间距离8点的偏移量.remaining是当前服务顾客所需的剩余时间.整个银行的操作过程可以描述如下:</p>
<ol>
<li>找到一个排队人数最少的队伍<ul>
<li>如果不存在这样的队伍,转到2.</li>
<li>如果存在这样的队伍,顾客入队.</li>
</ul>
</li>
<li>找到一个顾客离开最早的队伍,完成该顾客的业务,使其离开,并把当前顾客入队.</li>
</ol>
<p>下面四个函数对应</p>
<ul>
<li>找到排队人数最少的队伍,</li>
<li>顾客入队</li>
<li>找到顾客离开最早的队伍</li>
<li>顾客离开<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_next_window</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> res = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">int</span> min = inf;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> size = windows[i].que.size();</div><div class="line">		<span class="keyword">if</span>(size&lt;min)</div><div class="line">		&#123;</div><div class="line">			min = size;</div><div class="line">			res = i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(min&lt;m) <span class="keyword">return</span> res;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_next_window</span><span class="params">(<span class="keyword">int</span> customIndex,<span class="keyword">int</span> index)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span>(index==<span class="number">-1</span>) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span>(windows[index].que.size()==<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		windows[index].remaining=cus[customIndex].duration;</div><div class="line">		cus[customIndex].start=windows[index].offset;</div><div class="line">	&#125;</div><div class="line">	windows[index].que.push(customIndex);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_next_finished</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> res = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">int</span> min = inf;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(windows[i].que.size()==<span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">int</span> size = windows[i].remaining;</div><div class="line">		<span class="keyword">if</span>(size&lt;min)</div><div class="line">		&#123;</div><div class="line">			min = size;</div><div class="line">			res = i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(min==inf) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">finish_next</span><span class="params">(<span class="keyword">int</span> index)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span>(index&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">int</span> remaining = windows[index].remaining;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">	&#123;</div><div class="line">		windows[i].offset+=remaining;</div><div class="line">		windows[i].remaining-=remaining;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> front = windows[index].que.front();</div><div class="line">	windows[index].que.pop();</div><div class="line">	cus[front].finished=windows[index].offset;</div><div class="line">	<span class="keyword">if</span>(!windows[index].que.empty())</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> next = windows[index].que.front();</div><div class="line">		windows[index].remaining = cus[next].duration;</div><div class="line">		cus[next].start=windows[index].offset;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>整个流程如下:</p>
<ul>
<li>找出最短的队伍,把人塞进入</li>
<li>如果找不到最短的队伍,找到最先完成的队伍,让队首的顾客离开,把人塞进入</li>
<li>所有人都塞到队伍里后,等待所有队伍处理结束.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">customer</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> start;</div><div class="line">	<span class="keyword">int</span> id;</div><div class="line">	<span class="keyword">int</span> duration;</div><div class="line">	<span class="keyword">int</span> finished;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">window</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> offset;</div><div class="line">	<span class="keyword">int</span> remaining;</div><div class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> n,m,k,q;</div><div class="line"><span class="built_in">vector</span>&lt;window&gt; windows;</div><div class="line"><span class="built_in">vector</span>&lt;customer&gt; cus;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0xFFFFF</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_next_window</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> res = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">int</span> min = inf;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> size = windows[i].que.size();</div><div class="line">		<span class="keyword">if</span>(size&lt;min)</div><div class="line">		&#123;</div><div class="line">			min = size;</div><div class="line">			res = i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(min&lt;m) <span class="keyword">return</span> res;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_next_window</span><span class="params">(<span class="keyword">int</span> customIndex,<span class="keyword">int</span> index)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span>(index==<span class="number">-1</span>) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span>(windows[index].que.size()==<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		windows[index].remaining=cus[customIndex].duration;</div><div class="line">		cus[customIndex].start=windows[index].offset;</div><div class="line">	&#125;</div><div class="line">	windows[index].que.push(customIndex);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_next_finished</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> res = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">int</span> min = inf;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(windows[i].que.size()==<span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">int</span> size = windows[i].remaining;</div><div class="line">		<span class="keyword">if</span>(size&lt;min)</div><div class="line">		&#123;</div><div class="line">			min = size;</div><div class="line">			res = i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(min==inf) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">finish_next</span><span class="params">(<span class="keyword">int</span> index)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">if</span>(index&lt;<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">int</span> remaining = windows[index].remaining;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">	&#123;</div><div class="line">		windows[i].offset+=remaining;</div><div class="line">		windows[i].remaining-=remaining;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> front = windows[index].que.front();</div><div class="line">	windows[index].que.pop();</div><div class="line">	cus[front].finished=windows[index].offset;</div><div class="line">	<span class="keyword">if</span>(!windows[index].que.empty())</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> next = windows[index].que.front();</div><div class="line">		windows[index].remaining = cus[next].duration;</div><div class="line">		cus[next].start=windows[index].offset;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;q;</div><div class="line">	cus = <span class="built_in">vector</span>&lt;customer&gt;(k);</div><div class="line">	windows = <span class="built_in">vector</span>&lt;window&gt;(n);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">	&#123;</div><div class="line">		cus[i].id=i+<span class="number">1</span>;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;cus[i].duration;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> i =<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(i&lt;k)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> index = find_next_window();</div><div class="line">			<span class="keyword">if</span>(index!=<span class="number">-1</span>)</div><div class="line">			&#123;</div><div class="line">				insert_next_window(i,index);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">for</span>(;i&lt;k;i++)</div><div class="line">	&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> j = find_next_finished();</div><div class="line">		<span class="keyword">if</span>(j!=<span class="number">-1</span>)</div><div class="line">		&#123;</div><div class="line">			finish_next(j);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> index = find_next_window();</div><div class="line">		<span class="keyword">if</span>(index!=<span class="number">-1</span>)</div><div class="line">		&#123;</div><div class="line">			insert_next_window(i,index);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> j = find_next_finished();</div><div class="line">		<span class="keyword">if</span>(j==<span class="number">-1</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		finish_next(j);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> s;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;s;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> offset = cus[s<span class="number">-1</span>].finished;</div><div class="line">		<span class="keyword">int</span> h = offset/<span class="number">60</span>+<span class="number">8</span>;</div><div class="line">		<span class="keyword">int</span> m = offset%<span class="number">60</span>;</div><div class="line">		<span class="keyword">if</span>(cus[s<span class="number">-1</span>].start&gt;=<span class="number">540</span>) </div><div class="line">		&#123;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Sorry"</span>&lt;&lt;<span class="built_in">endl</span>;	</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			 <span class="built_in">printf</span>(<span class="string">"%02d:%02d\n"</span>,h,m);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>误解了题意,以为五点后所有的业务都将停止,没有做完业务的顾客将被强制离开.这也和现实里的银行相悖.以后要细心读题.</p>
<p>把17点距离8点的offset算成了<code>480</code>导致一直有case不能AC.我总是能在加减法上出错🙃</p>
]]></content>
      
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Molecule to atoms]]></title>
      <url>/2019/08/08/molecule-to-atoms/</url>
      <content type="html"><![CDATA[<p>同学发过来一道有意思的题</p>
<p>For a given chemical formula represented by a string, count the number of atoms of each element contained in the molecule and return an object (<code>associative array</code> in PHP, <code>Dictionary&lt;string, int&gt;</code> in C#, <code>Map&lt;String,Integer&gt;</code> in Java).</p>
<a id="more"></a>
<p>For example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> water = <span class="string">'H2O'</span>;</div><div class="line">parseMolecule(water); <span class="comment">// return &#123;H: 2, O: 1&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> magnesiumHydroxide = <span class="string">'Mg(OH)2'</span>;</div><div class="line">parseMolecule(magnesiumHydroxide); <span class="comment">// return &#123;Mg: 1, O: 2, H: 2&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> fremySalt = <span class="string">'K4[ON(SO3)2]2'</span>;</div><div class="line">parseMolecule(fremySalt); <span class="comment">// return &#123;K: 4, O: 14, N: 2, S: 4&#125;</span></div></pre></td></tr></table></figure>
<p>As you can see, some formulas have brackets in them. The index outside the brackets tells you that you have to multiply count of each atom inside the bracket on this index. For example, in Fe(NO3)2 you have one iron atom, two nitrogen atoms and six oxygen atoms.</p>
<p>Note that brackets may be round, square or curly and can also be nested. Index after the braces is optional.</p>
<p>一句话描述:统计化学式中出现各个原子的个数.</p>
<p>不含括号的化学式很好解析,带上括号只要依次处理括号里的部分,乘以括号后的倍数就完成了.而括号里的部分又可以是一个完整的化学式.完美的分治.</p>
<p>以<code>K4[ON(SO3)2]2</code>为例.首先解析<code>K4</code>,接着解析<code>[ON(SO3)2]2</code>,碰到括号解析字串<code>ON(SO3)2</code>,对应个数乘2再合并即可.<code>ON(SO3)2</code>也一样,解析出<code>O</code>,<code>N</code>后继续解析括号里的<code>(SO3)2</code>即可.</p>
<p>解析字符串一般可以转化成解析上下文无关文法,答案就在生成的AST中.</p>
<p>所有的括号<code>{}</code>,<code>[]</code>替换为<code>()</code>后均不影响结果.这里就偷个懒</p>
<p>生成式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Number: [1-9][0-9]*</div><div class="line">Atom:[A-Z][a-z]*</div><div class="line">Term: Atom Number</div><div class="line">Molscule: TermTerm*</div><div class="line">        | Term*(Molscule)Number?Term*</div></pre></td></tr></table></figure></p>
<ul>
<li>原子以大写字母开头,后跟任意个小写字母</li>
<li>化学式的一项是一个原子后跟一个分子.</li>
<li>分子式可以由至少一个项构成</li>
<li>分子式可以由任意项中间插入左括号(,另一个分子式右括号)和一个可选的数字构成.</li>
</ul>
<p>由生成式就可以动手写解析器啦.首先对每一个可能的分支都写出一个完整的解析函数,在无法确定接下来是哪个分支的时候使用超前查看来实现分支预测.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Program</span></div><div class="line">   &#123;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line"><span class="function">       </span>&#123;</div><div class="line">           Console.WriteLine(<span class="string">"Please enter a chemical"</span>);</div><div class="line">           Console.WriteLine(<span class="string">"Default: K4(ON(SO3)2)2"</span>);</div><div class="line"></div><div class="line">           <span class="keyword">string</span> source = <span class="string">"K4(ON(SO3)2)2"</span>;</div><div class="line">           <span class="keyword">var</span> str = Console.ReadLine();</div><div class="line">           str = <span class="keyword">string</span>.IsNullOrWhiteSpace(str) ? source : str;</div><div class="line">           <span class="keyword">var</span> dict = Parse(str, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">           dict.ToList().ForEach(p =&gt; Console.WriteLine(<span class="string">$"<span class="subst">&#123;p.Key&#125;</span>:<span class="subst">&#123;p.Value&#125;</span>"</span>));</div><div class="line">           Console.WriteLine(<span class="string">"Press any key to continue"</span>);</div><div class="line">           Console.ReadLine();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsUpper</span>(<span class="params"><span class="keyword">char</span> c</span>)</span></div><div class="line"><span class="function">       </span>&#123;</div><div class="line">           <span class="keyword">return</span> c &gt;= <span class="string">'A'</span> &amp;&amp; c &lt;= <span class="string">'Z'</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsLower</span>(<span class="params"><span class="keyword">char</span> c</span>)</span></div><div class="line"><span class="function">       </span>&#123;</div><div class="line">           <span class="keyword">return</span> c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'z'</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsNumber</span>(<span class="params"><span class="keyword">char</span> c</span>)</span></div><div class="line"><span class="function">       </span>&#123;</div><div class="line">           <span class="keyword">return</span> c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetNextElemIndex</span>(<span class="params"><span class="keyword">string</span> str, <span class="keyword">int</span> start</span>)</span></div><div class="line"><span class="function">       </span>&#123;</div><div class="line">           <span class="keyword">if</span> (start &gt;= str.Length) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">           <span class="keyword">if</span> (!IsUpper(str[start]))</div><div class="line">           &#123;</div><div class="line">               <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = start + <span class="number">1</span>; i &lt; str.Length; i++)</div><div class="line">           &#123;</div><div class="line">               <span class="keyword">if</span> (!IsLower(str[i]) &amp;&amp; !IsUpper(str[i])) <span class="keyword">return</span> i - <span class="number">1</span>;</div><div class="line">               <span class="keyword">if</span> (IsLower(str[i]))</div><div class="line">               &#123;</div><div class="line">                   <span class="keyword">continue</span>;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span>(IsUpper(str[i]))</div><div class="line">               &#123;</div><div class="line">                   <span class="keyword">return</span> i - <span class="number">1</span>;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">            <span class="keyword">return</span> str.Length - <span class="number">1</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetNextNumber</span>(<span class="params"><span class="keyword">string</span> str,<span class="keyword">int</span> start</span>)</span></div><div class="line"><span class="function">       </span>&#123;</div><div class="line">           <span class="keyword">if</span> (start &gt;= str.Length) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">           <span class="keyword">if</span> (!IsNumber(str[start])) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;str.Length;i++)</div><div class="line">           &#123;</div><div class="line">               <span class="keyword">if</span> (!IsNumber(str[i]))</div><div class="line">                   <span class="keyword">return</span> i - <span class="number">1</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span> (IsNumber(str.Last())) <span class="keyword">return</span> str.Length - <span class="number">1</span>;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetRightParin</span>(<span class="params"><span class="keyword">string</span> str,<span class="keyword">int</span> start</span>)</span></div><div class="line"><span class="function">       </span>&#123;</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;str.Length;i++)</div><div class="line">           &#123;</div><div class="line">               <span class="keyword">if</span> (str[i] == <span class="string">')'</span>) <span class="keyword">return</span> i;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="function"><span class="keyword">static</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt; <span class="title">Parse</span>(<span class="params"><span class="keyword">string</span> str,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> multiplex</span>)</span></div><div class="line"><span class="function">       </span>&#123;</div><div class="line">           Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt; dict = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt;();</div><div class="line">           <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">           &#123;</div><div class="line">               <span class="keyword">if</span> (startIndex == str.Length)</div><div class="line">               &#123;</div><div class="line">                   <span class="keyword">return</span> dict;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">var</span> elem = GetNextElemIndex(str, startIndex);</div><div class="line">               <span class="keyword">if</span> (elem!=<span class="number">-1</span>)</div><div class="line">               &#123;</div><div class="line">                   <span class="comment">// N个微元的情况,直接解析</span></div><div class="line">                   <span class="keyword">var</span> name = str.Substring(startIndex, elem - startIndex + <span class="number">1</span>);</div><div class="line">                   <span class="keyword">int</span> <span class="keyword">value</span> = <span class="number">1</span>;</div><div class="line">                   startIndex = elem + <span class="number">1</span>;</div><div class="line">                   <span class="keyword">var</span> num = GetNextNumber(str, startIndex);</div><div class="line">                   <span class="keyword">if</span>(num!=<span class="number">-1</span>)</div><div class="line">                   &#123;</div><div class="line">                       <span class="keyword">value</span> = <span class="keyword">int</span>.Parse(str.Substring(startIndex, num - startIndex + <span class="number">1</span>));</div><div class="line">                       startIndex = num + <span class="number">1</span>;</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">if</span> (!dict.ContainsKey(name)) dict[name] = <span class="number">0</span>;</div><div class="line">                   dict[name] += <span class="keyword">value</span>;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span>(str[startIndex]==<span class="string">'('</span>)</div><div class="line">               &#123;</div><div class="line">                   <span class="comment">// 碰到括号,解析子化学式</span></div><div class="line">                   <span class="keyword">var</span> right = GetRightParin(str, startIndex + <span class="number">1</span>)+<span class="number">1</span>;</div><div class="line">                   <span class="keyword">var</span> nextNum = GetNextNumber(str, right);</div><div class="line">                   <span class="comment">//子化学式的倍数</span></div><div class="line">                   <span class="keyword">int</span> mul = <span class="keyword">int</span>.Parse(str.Substring(nextNum, nextNum - right + <span class="number">1</span>));</div><div class="line">                   <span class="keyword">var</span> recursion = Parse(str, startIndex + <span class="number">1</span>, mul);</div><div class="line">                   startIndex = nextNum + <span class="number">1</span>;</div><div class="line">                   <span class="comment">//合并字典</span></div><div class="line">                   recursion.Keys.ToList().ForEach(k =&gt; &#123; <span class="keyword">if</span> (!dict.ContainsKey(k)) dict[k] = <span class="number">0</span>; &#125;);</div><div class="line">                   recursion.ToList().ForEach(p =&gt; dict[p.Key] += p.Value);</div><div class="line">                   </div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span>(str[startIndex]==<span class="string">')'</span>)</div><div class="line">               &#123;</div><div class="line">                   <span class="comment">// 返回</span></div><div class="line">                   <span class="keyword">return</span> dict.ToDictionary(i =&gt; i.Key, i =&gt; i.Value * multiplex);</div><div class="line">               &#125; </div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> Parser </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PAT 1003 Emergency]]></title>
      <url>/2019/08/08/PAT-1003-Emergency/</url>
      <content type="html"><![CDATA[<h2 id="Emergency"><a href="#Emergency" class="headerlink" title="Emergency"></a>Emergency</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805523835109376" target="_blank" rel="external">1003 Emergency</a></p>
<p>As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.<br><a id="more"></a><br><strong>Input Specification</strong></p>
<p>Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (≤500) - the number of cities (and the cities are numbered from 0 to N−1), M - the number of roads, C​1​​ and C​2​​ - the cities that you are currently in and that you must save, respectively. The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city. Then M lines follow, each describes a road with three integers c​1​​, c​2​​ and L, which are the pair of cities connected by a road and the length of that road, respectively. It is guaranteed that there exists at least one path from C​1​​ to C​2​​.</p>
<p><strong>Output Specification</strong></p>
<p>For each test case, print in one line two numbers: the number of different shortest paths between C​1​​ and C​2​​, and the maximum amount of rescue teams you can possibly gather. All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.</p>
<p><strong>Sample Input</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">5 6 0 2</div><div class="line">1 2 1 5 3</div><div class="line">0 1 1</div><div class="line">0 2 2</div><div class="line">0 3 1</div><div class="line">1 2 1</div><div class="line">2 4 1</div><div class="line">3 4 1</div></pre></td></tr></table></figure>
<p><strong>Sample Output</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2 4</div></pre></td></tr></table></figure></p>
<p>题目大意:给定一张图,找出从起点到终点带权最短路径的个数,并输出其中最大的点权</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题大体上是单源最短路径的变体,<code>dijkstra</code>跑不了了.</p>
<p><code>dijkstra</code>算法可以解决<strong>非负权</strong>最短路径的问题.算法的大体思路如下:</p>
<ul>
<li><p>对每个顶点,存储一个最短路径估计.起点为0,其余为无穷大.</p>
</li>
<li><p>每次从未被访问的节点中找出最短路径估计最短的那个节点,访问它,对它的所有邻接顶点,进行松弛操作.设当前顶点为u,邻接节点为v,边的权值为w,松弛定义如下:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">relax(u,v,w)</div><div class="line">&#123;</div><div class="line">    if(u.estimate+w&lt;v.estimate)</div><div class="line">    &#123;</div><div class="line">        v.estimate = u.estimate+w;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可见松弛是减小最短路径估计的过程.</p>
<ul>
<li>松弛完成后,继续从未被访问的顶点中找出最短路径估计最小的节点,松弛其邻接节点,直到所有节点都访问完毕.</li>
</ul>
<p>伪码如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF <span class="number">99999999</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> estimate[v];</div><div class="line">    <span class="keyword">bool</span> visited[v];</div><div class="line">    fill(estiamte,estimate+v,INF);</div><div class="line">    fill(visited,visited+v,<span class="literal">false</span>);</div><div class="line">    estimate[source]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> minn=INF;</div><div class="line">        <span class="keyword">int</span> min=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[i]&amp;&amp;estimate[i]&lt;minn)</div><div class="line">            &#123;</div><div class="line">                minn=estimate[i];</div><div class="line">                min=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(min==<span class="number">-1</span>) <span class="keyword">break</span>;<span class="comment">//finished</span></div><div class="line">        visited[min]=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(graph[min][i]!=<span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(estimate[min]+graph[min][i]&lt;estimate[i])</div><div class="line">                &#123;</div><div class="line">                    estimate[i]=estimate[min]+graph[min][i];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>题目要求求出最短路径的数量和其中最大点权的值.<br>当<code>estimate[min]+graph[min][i]&lt;estimate[i]</code>成立时,表示当前到i的路线是新的最短路径预期,所以到i的路线数量和到min的路线数量一致;<br>当<code>estimate[min]+graph[min][i]==estimate[i]</code>时,表明除了经过min到i的路线,还有其他同样短的路径.这时到i的最短路径个数应该加上从起点到min的个数.</p>
<p>接下来考虑点权.当<code>estimate[min]+graph[min][i]&lt;estimate[i]</code>成立时,表示到i的路径是新的最短路径预期,从起点到i的点权和应该为到min的点权和加上i的点权;<br>当当<code>estimate[min]+graph[min][i]==estimate[i]</code>时,点权和应该是i现有点权和,min点权和+i点权两者中较大的那个.</p>
<p>代码如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> v;</div><div class="line"><span class="keyword">int</span> e;</div><div class="line"><span class="keyword">int</span> g[<span class="number">500</span>][<span class="number">500</span>] ;</div><div class="line"><span class="keyword">int</span> source;</div><div class="line"><span class="keyword">int</span> dest;</div><div class="line"><span class="keyword">int</span> v_data[<span class="number">500</span>] ;</div><div class="line"><span class="keyword">int</span> dist[<span class="number">500</span>];</div><div class="line"><span class="keyword">int</span> path[<span class="number">500</span>];</div><div class="line"><span class="keyword">int</span> num[<span class="number">500</span>]; </div><div class="line"><span class="keyword">int</span> rescue[<span class="number">500</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">bool</span> visit[<span class="number">500</span>]=&#123;<span class="literal">false</span>&#125;;</div><div class="line">	dist[source]=<span class="number">0</span>;</div><div class="line">	num[source]=<span class="number">1</span>;</div><div class="line">	rescue[source]=v_data[source];</div><div class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// find vertex with minimal estimate</span></div><div class="line">		<span class="keyword">int</span> min_index=<span class="number">-1</span>;</div><div class="line">		<span class="keyword">int</span> min=<span class="number">10000000</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(min&gt;dist[i]&amp;&amp;visit[i]==<span class="literal">false</span>)</div><div class="line">			&#123;</div><div class="line">				min = dist[i];</div><div class="line">				min_index = i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(min_index==<span class="number">-1</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		visit[min_index]=<span class="literal">true</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> weight = g[min_index][i];</div><div class="line">			<span class="keyword">if</span>(weight!=<span class="number">-1</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(visit[i]==<span class="literal">false</span>)</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">if</span>(dist[min_index]+weight&lt;dist[i])</div><div class="line">					&#123;</div><div class="line">						dist[i]=dist[min_index]+weight;</div><div class="line">						path[i]=min_index;</div><div class="line">						num[i]=num[min_index];</div><div class="line">						rescue[i]=rescue[min_index]+v_data[i];</div><div class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span>(dist[min_index]+weight==dist[i])</div><div class="line">					&#123;</div><div class="line">						num[i]+=num[min_index];</div><div class="line">						<span class="keyword">if</span>(rescue[i]&lt;rescue[min_index]+v_data[i])</div><div class="line">						&#123;</div><div class="line">							rescue[i]=rescue[min_index]+v_data[i];</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// for each adj vertex, relax</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;v&gt;&gt;e&gt;&gt;source&gt;&gt;dest;	</div><div class="line">	fill(path,path+v,<span class="number">-1</span>);</div><div class="line">	fill(dist,dist+v,<span class="number">1000000</span>);</div><div class="line">	fill(num,num+v,<span class="number">0</span>);</div><div class="line">	fill(rescue,rescue+v,<span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;v;j++)</div><div class="line">			g[i][j]=<span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;v_data[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> p1,p2,l;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e;i++)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;p1&gt;&gt;p2&gt;&gt;l;</div><div class="line">		g[p1][p2]=g[p2][p1]=l;</div><div class="line">	&#125;</div><div class="line">	dijkstra();</div><div class="line">	</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;num[dest]&lt;&lt;<span class="string">" "</span>&lt;&lt;rescue[dest]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PAT 1004 Counting Leaves]]></title>
      <url>/2019/08/05/PAT-1004-Counting-Leaves/</url>
      <content type="html"><![CDATA[<h2 id="Counting-Leaves"><a href="#Counting-Leaves" class="headerlink" title="Counting Leaves"></a>Counting Leaves</h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805521431773184" target="_blank" rel="external">1004 Counting Leaves</a></p>
<p>A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.<br><a id="more"></a><br><strong>Input Specification:</strong></p>
<p>Each input file contains one test case. Each case starts with a line containing 0&lt;N&lt;100, the number of nodes in a tree, and M (&lt;N), the number of non-leaf nodes. Then M lines follow, each in the format:</p>
<p><code>ID K ID[1] ID[2] ... ID[K]</code></p>
<p>where <code>ID</code> is a two-digit number representing a given non-leaf node, <code>K</code> is the number of its children, followed by a sequence of two-digit <code>ID</code>‘s of its children. For the sake of simplicity, let us fix the root ID to be <code>01</code>.</p>
<p>The input ends with N being 0. That case must NOT be processed.</p>
<p><strong>Output Specification:</strong></p>
<p>For each test case, you are supposed to count those family members who have no child <strong>for every seniority level</strong> starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.</p>
<p>The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output 0 1 in a line.<br>Sample Input:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2 1</div><div class="line">01 1 02</div></pre></td></tr></table></figure>
<p>Sample Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 1</div></pre></td></tr></table></figure></p>
<p>题目大意: 给定一颗树,从根节点开始依次输出当前层中叶子节点的个数.树的根节点是<code>01</code></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>每个成员的孩子个数不确定,不能简单用二叉树实现.  </p>
<p>考虑一般树的表示方法</p>
<ol>
<li>孩子兄弟表示法</li>
<li>双亲表示法</li>
<li>孩子表示法</li>
</ol>
<p>题目直接给出的是父子关系,孩子兄弟表示法不太合适,排除. 双亲表示法由孩子找双亲比较方便,孩子表示法由双亲找孩子比较方便,所以采用孩子表示法.</p>
<p>采用数组来表示节点的孩子,那么所有的节点可以用一个二维数组表示.因为N&lt;100,所以开个<code>int[101][101]</code>就够用了.我就偷个懒,使用STL的<code>vector</code></p>
<p>接下来需要找出一层中叶节点的个数.假设已经有了当前层节点的下标,叶子节点的个数可以由遍历很容易的统计.一轮遍历完成后会得到下一层节点的下标.这样就可以一直持续下去了.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; TriversalTree(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; tree, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parents, <span class="keyword">int</span>&amp; leaf)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">	leaf = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parents.size(); i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> index = parents[i];</div><div class="line">		<span class="keyword">auto</span> node = tree[index];</div><div class="line">		<span class="keyword">if</span> (node.size() == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			leaf++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> </div><div class="line">		&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> it = node.begin(); it != node.end(); it++)</div><div class="line">			&#123;</div><div class="line">				result.push_back(*it);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>给出第一层的下标即可开始遍历了</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; TriversalTree(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; tree, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parents, <span class="keyword">int</span>&amp; leaf)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">	leaf = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parents.size(); i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> index = parents[i];</div><div class="line">		<span class="keyword">auto</span> node = tree[index];</div><div class="line">		<span class="keyword">if</span> (node.size() == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			leaf++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> </div><div class="line">		&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> it = node.begin(); it != node.end(); it++)</div><div class="line">			&#123;</div><div class="line">				result.push_back(*it);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; tree = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(n + <span class="number">1</span>);</div><div class="line">	<span class="keyword">int</span> non_leaf;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; non_leaf;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; non_leaf; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> root;</div><div class="line">		<span class="keyword">int</span> num;</div><div class="line">		<span class="keyword">int</span> child;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; root;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; num;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">cin</span> &gt;&gt; child;</div><div class="line">			tree[root].push_back(child);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; layer;</div><div class="line">	layer.push_back(<span class="number">1</span>);</div><div class="line">	<span class="keyword">int</span> leaf = <span class="number">0</span>;</div><div class="line">	layer = TriversalTree(tree, layer, leaf);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, leaf);</div><div class="line">	<span class="keyword">while</span> (layer.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">		layer = TriversalTree(tree, layer, leaf);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">" %d"</span>, leaf);</div><div class="line">	&#125;;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异常-控制流的突变]]></title>
      <url>/2019/07/08/exception-the-abnormal-control-flow/</url>
      <content type="html"><![CDATA[<h1 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h1><p>「现代操作系统」和国内的教材都没有讲清楚「中断、异常」这一组概念，再加上自己懒，一直没弄出个所以然，今天看了CSAPP上的解释，醍醐灌顶。<br><a id="more"></a><br>对于特定的进程来说，程序计数器按照时间升序所得的序列反映了指令的执行顺序，即控制流。理论上说，程序的控制流在编译期就已经决定。而实际中，经常会出现一些需要暂停执行当前程序，而转去处理更高优先级任务的情况。在这个过程中，程序的控制流就发生了改变。CSAPP中把控制流的<strong>非自愿</strong>改变定义为异常。强调<strong>非自愿</strong>，是因为程序自己也可以改变控制流，但那不属于异常。</p>
<p>异常按照类型可以分为四类</p>
<ul>
<li>中断(Interrupt)</li>
<li>自陷(Trap)</li>
<li>错误(Fault)</li>
<li>中止(Abort)</li>
</ul>
<p>发生异常时，CPU会根据某种规则来执行对应的处理程序。根据异常类型的不同，处理的结果也不尽相同。</p>
<h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>中断指，在程序执行过程中，因为<strong>外部事件</strong>导致当前控制流被改变。因为外部事件的不确定性，中断信号可能会在指令执行的任意阶段发生，因此也称中断具有<strong>异步性</strong><br>典型的例子有：DMA传输完成，键盘敲击等。</p>
<h2 id="自陷"><a href="#自陷" class="headerlink" title="自陷"></a>自陷</h2><p>自陷指，在程序执行过程中，需要请求操作系统提供的服务而发生的<strong>自愿性</strong>中断。普通程序在用户态运行，当需要进行I/O时，它通过自陷，转入内核态，由操作系统执行对应的I/O指令。</p>
<p>IA32中提供<code>int 80</code>指令触发自陷</p>
<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>错误指，在指令执行过程中，出现了某些错误，导致当前指令无法继续执行。但错误可能可以恢复。处理程序处理完成后，可以尝试重现执行出错的指令。如缺页错误(Page fault)。</p>
<h2 id="中止"><a href="#中止" class="headerlink" title="中止"></a>中止</h2><p>中止是指，执行过程中发生了不可恢复的错误，这时管理权被交给OS，典型情况下，OS会杀死出错的进程，转而调度其他进程执行。例如内存越界(Access violation)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[FluentTreeView Part.5]]></title>
      <url>/2019/04/19/fluent-treeview-part5/</url>
      <content type="html"><![CDATA[<h2 id="递归高亮"><a href="#递归高亮" class="headerlink" title="递归高亮"></a>递归高亮</h2><p>先来修正选择高亮的问题吧。我更愿意图片中的效果称为递归高亮。递归高亮可以看作是子节点都处于非递归高亮状态。这么想的话实现起来应该非常容易。但我希望FluentTreeView能够更灵活一些。最好通过属性来切换高亮模式。</p>
<a id="more"></a>
<p>说来就来，要往TreeViewItem上加新的属性，要由TreeViewItem导出子类。要使TreeView的直接ItemContainer使用我们自定义的子类，需要继承TreeView的子类。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">FluentTreeViewItem</span> : <span class="title">TreeViewItem</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> RecursiveHighlightMode</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="keyword">bool</span>) GetValue (RecursiveHighlightModeProperty); &#125;</div><div class="line">        <span class="keyword">set</span> &#123; SetValue (RecursiveHighlightModeProperty, <span class="keyword">value</span>); &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Using a DependencyProperty as the backing store for RecursiveHighlightMode.  This enables animation, styling, binding, etc...</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty RecursiveHighlightModeProperty =</div><div class="line">        DependencyProperty.Register (<span class="string">"RecursiveHighlightMode"</span>, <span class="keyword">typeof</span> (<span class="keyword">bool</span>), <span class="keyword">typeof</span> (FluentTreeViewItem), <span class="keyword">new</span> PropertyMetadata (<span class="literal">false</span>));</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> DependencyObject <span class="title">GetContainerForItemOverride</span> (<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FluentTreeViewItem ();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">IsItemItsOwnContainerOverride</span> (<span class="params"><span class="keyword">object</span> item</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> item <span class="keyword">is</span> FluentTreeViewItem;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FluentTreeView</span> : <span class="title">TreeView</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> DependencyObject <span class="title">GetContainerForItemOverride</span> (<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FluentTreeViewItem ();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">IsItemItsOwnContainerOverride</span> (<span class="params"><span class="keyword">object</span> item</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> item <span class="keyword">is</span> FluentTreeViewItem;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重写TreeView的<code>GetContainerForItemOverride</code>是常规操作，大家在自定义ItemContainer的时候肯定都做过。需要注意的是TreeViewItem也是ItemsControl，它的<code>GetContainerForItemOverride</code>也需要被重写。</p>
<p>接下来思考如何实现递归模式和非递归模式的切换。直接让子节点也处于高亮状态不错的办法，但高亮状态依赖的触发器，需要由<code>IsSelected</code>属性触发。为了界面而去修改数据，违背WPF数据驱动界面的原则。那么换一种思路，不再用分治的思路，而是直接在当前节点上全部处理掉。让父节点的高亮区域覆盖所有的子节点即可。宽度已经占满，只剩下高度了。对背景色，可以直接修改最外层面板的背景色。起指示作用的矩形，则可以修改其<code>Grid.RowSpan</code>让它充满整个高度。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">"cc:FluentTreeViewItem"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">x:Name</span>=<span class="string">"globalHighlight"</span> <span class="attr">Background</span>=<span class="string">"Transparent"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"24"</span>&gt;</span><span class="tag">&lt;/<span class="name">RowDefinition</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"*"</span>&gt;</span><span class="tag">&lt;/<span class="name">RowDefinition</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">Panel.ZIndex</span>=<span class="string">"20"</span> <span class="attr">Grid.RowSpan</span>=<span class="string">"1"</span> <span class="attr">x:Name</span>=<span class="string">"selector"</span> <span class="attr">Width</span>=<span class="string">"2"</span> <span class="attr">Visibility</span>=<span class="string">"Collapsed"</span> <span class="attr">Fill</span>=<span class="string">"Red"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Left"</span>&gt;</span><span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">x:Name</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Border.Style</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">"Border"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Style.Triggers</span>&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"IsMouseOver"</span> <span class="attr">Value</span>=<span class="string">"True"</span>&gt;</span></span></div><div class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Background"</span> <span class="attr">Value</span>=<span class="string">"Red"</span>&gt;</span><span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Style.Triggers</span>&gt;</span></span></div><div class="line"><span class="undefined">                </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">Border.Style</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Background</span>=<span class="string">"Transparent"</span> <span class="attr">x:Name</span>=<span class="string">"selectorGrid"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Margin</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource AncestorType=TreeViewItem&#125;,Converter=&#123;StaticResource TreeLevelToIndentConverter&#125;&#125;"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">"24"</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">ColumnDefinition</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">Expander</span> <span class="attr">IsExpanded</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;,Path=IsExpanded,Mode=TwoWay&#125;"</span> <span class="attr">x:Name</span>=<span class="string">"expander"</span>&gt;</span><span class="tag">&lt;/<span class="name">Expander</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Grid.Column</span>=<span class="string">"1"</span> <span class="attr">ContentSource</span>=<span class="string">"Header"</span>&gt;</span><span class="tag">&lt;/<span class="name">ContentPresenter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ItemsPresenter</span> <span class="attr">Visibility</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;,Path=IsExpanded,Converter=&#123;StaticResource BoolToVisibilityConverter&#125;&#125;"</span> <span class="attr">Grid.Row</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">ItemsPresenter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ControlTemplate.Triggers</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"HasItems"</span> <span class="attr">Value</span>=<span class="string">"False"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">"expander"</span> <span class="attr">Property</span>=<span class="string">"Visibility"</span> <span class="attr">Value</span>=<span class="string">"Collapsed"</span>&gt;</span><span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"IsMouseOver"</span> <span class="attr">Value</span>=<span class="string">"True"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"IsSelected"</span> <span class="attr">Value</span>=<span class="string">"True"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">"selector"</span> <span class="attr">Property</span>=<span class="string">"Visibility"</span> <span class="attr">Value</span>=<span class="string">"Visible"</span>&gt;</span><span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"RecursiveHighlightMode"</span> <span class="attr">Value</span>=<span class="string">"True"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">"selector"</span> <span class="attr">Property</span>=<span class="string">"Grid.RowSpan"</span> <span class="attr">Value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">MultiTrigger</span> &gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">MultiTrigger.Conditions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Condition</span> <span class="attr">Property</span>=<span class="string">"RecursiveHighlightMode"</span> <span class="attr">Value</span>=<span class="string">"True"</span>&gt;</span><span class="tag">&lt;/<span class="name">Condition</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Condition</span> <span class="attr">Property</span>=<span class="string">"IsSelected"</span> <span class="attr">Value</span>=<span class="string">"True"</span>&gt;</span><span class="tag">&lt;/<span class="name">Condition</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">MultiTrigger.Conditions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">"globalHighlight"</span> <span class="attr">Property</span>=<span class="string">"Background"</span> <span class="attr">Value</span>=<span class="string">"Green"</span>&gt;</span><span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">MultiTrigger</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">MultiTrigger</span> &gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">MultiTrigger.Conditions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Condition</span> <span class="attr">Property</span>=<span class="string">"RecursiveHighlightMode"</span> <span class="attr">Value</span>=<span class="string">"False"</span>&gt;</span><span class="tag">&lt;/<span class="name">Condition</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Condition</span> <span class="attr">Property</span>=<span class="string">"IsSelected"</span> <span class="attr">Value</span>=<span class="string">"True"</span>&gt;</span><span class="tag">&lt;/<span class="name">Condition</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">MultiTrigger.Conditions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">"selectorGrid"</span> <span class="attr">Property</span>=<span class="string">"Background"</span> <span class="attr">Value</span>=<span class="string">"Green"</span>&gt;</span><span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">MultiTrigger</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们根据<code>RecursiveHighlightMode</code>的值在<code>globalHighlight</code>和<code>selectorGrid</code>里选出作为选择高亮的控件，修改<code>selector</code>的<code>Grid.RowSpan</code>。<code>Grid.RowSpan</code>会使布局子系统的<code>Measure</code>失效。在依赖属性的元数据中声明属性变化影响<code>Measure</code>阶段，就实现了动态切换高亮模式。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty RecursiveHighlightModeProperty =</div><div class="line">    DependencyProperty.Register (<span class="string">"RecursiveHighlightMode"</span>, <span class="keyword">typeof</span> (<span class="keyword">bool</span>), <span class="keyword">typeof</span> (FluentTreeViewItem), <span class="keyword">new</span> FrameworkPropertyMetadata (<span class="literal">false</span>, FrameworkPropertyMetadataOptions.AffectsMeasure));</div></pre></td></tr></table></figure></p>
<h2 id="高亮优先级"><a href="#高亮优先级" class="headerlink" title="高亮优先级"></a>高亮优先级</h2><p>回顾一下上一篇中模板的可视化树<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Border(x:Name=&quot;root&quot;)</div><div class="line">    Grid(x:Name=&quot;selectorGrid&quot;)</div><div class="line">        Rectangle(x:Name=&quot;selector&quot;)</div><div class="line">        Grid</div><div class="line">            Expander</div><div class="line">            ContentPreserenter</div></pre></td></tr></table></figure></p>
<p>当选中且鼠标悬空时，<code>root</code>和<code>selectorGrid</code>的触发器都生效。因为<code>root</code>是<code>selectorGrid</code>的父级容器，渲染时就被置于靠下的一层，这就导致了选择高亮覆盖鼠标高亮的表象。要改其实很简单，把这他们两个容器的位置互换就行了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Background</span>=<span class="string">"Transparent"</span> <span class="attr">x:Name</span>=<span class="string">"selectorGrid"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Border</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Border.Style</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">"Border"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Style.Triggers</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"IsMouseOver"</span> <span class="attr">Value</span>=<span class="string">"True"</span>&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Background"</span> <span class="attr">Value</span>=<span class="string">"Red"</span>&gt;</span><span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Style.Triggers</span>&gt;</span></span></div><div class="line"><span class="undefined">            </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Border.Style</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Margin</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource AncestorType=TreeViewItem&#125;,Converter=&#123;StaticResource TreeLevelToIndentConverter&#125;&#125;"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">"24"</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">ColumnDefinition</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Expander</span> <span class="attr">IsExpanded</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;,Path=IsExpanded,Mode=TwoWay&#125;"</span> <span class="attr">x:Name</span>=<span class="string">"expander"</span>&gt;</span><span class="tag">&lt;/<span class="name">Expander</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Grid.Column</span>=<span class="string">"1"</span> <span class="attr">ContentSource</span>=<span class="string">"Header"</span>&gt;</span><span class="tag">&lt;/<span class="name">ContentPresenter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="配色太丑"><a href="#配色太丑" class="headerlink" title="配色太丑"></a>配色太丑</h2><p>剩下的就是一些小细节问题了。按照Fluent Design的标准，所有的图标都要使用<code>Segoe MDL2 Assets</code>实现，并且要根据Windows当前的主题模式和主题色动态更改颜色。</p>
<p><a href="https://github.com/sourcechord/FluentWPF" target="_blank" rel="external">Fluent.WPF</a>可以取得主题模式和主题色对应的画刷，但在使用它之前需要先在<code>FluentTreeViewItem</code>上新增属性，方便修改。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Brush MouseOverBrush</div><div class="line">&#123;</div><div class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> (Brush) GetValue (MouseOverBrushProperty); &#125;</div><div class="line">    <span class="keyword">set</span> &#123; SetValue (MouseOverBrushProperty, <span class="keyword">value</span>); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Using a DependencyProperty as the backing store for MouseOverBrush.  This enables animation, styling, binding, etc...</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty MouseOverBrushProperty =</div><div class="line">    DependencyProperty.Register (<span class="string">"MouseOverBrush"</span>, <span class="keyword">typeof</span> (Brush), <span class="keyword">typeof</span> (FluentTreeViewItem), <span class="keyword">new</span> PropertyMetadata (<span class="keyword">new</span> SolidColorBrush (Colors.Red)));</div><div class="line"></div><div class="line"><span class="keyword">public</span> Brush SelectedBrush</div><div class="line">&#123;</div><div class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> (Brush) GetValue (SelectedBrushProperty); &#125;</div><div class="line">    <span class="keyword">set</span> &#123; SetValue (SelectedBrushProperty, <span class="keyword">value</span>); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Using a DependencyProperty as the backing store for SelectedBrush.  This enables animation, styling, binding, etc...</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty SelectedBrushProperty =</div><div class="line">    DependencyProperty.Register (<span class="string">"SelectedBrush"</span>, <span class="keyword">typeof</span> (Brush), <span class="keyword">typeof</span> (FluentTreeViewItem), <span class="keyword">new</span> PropertyMetadata (<span class="keyword">new</span> SolidColorBrush (Colors.Green)));</div></pre></td></tr></table></figure>
<p>选择高亮使用<code>SystemAltMediumHighColorBrush</code>，鼠标高亮使用<code>SystemBaseMediumLowColorBrush</code>，选择指示用的矩形使用<code>SystemAccentColor</code>。</p>
<p>再把Expander用<code>Segoe MDL2 Assets</code>字体重新实现，我们的FluentTreeView就完成了。</p>
<p>递归高亮<br><img src="/2019/04/19/fluent-treeview-part5/fluent-treeview-recursive.jpg" alt="fluent-treeview-recursive"></p>
<p>非递归高亮<br><img src="/2019/04/19/fluent-treeview-part5/fluent-treeview-non-recursive.jpg" alt="fluent-treeview-non-recursive"></p>
<hr>
<p>源代码参见<br><a href="https://github.com/Verrickt/Melchior-Sample/tree/master/FluentTreeView_Part5" target="_blank" rel="external">https://github.com/Verrickt/Melchior-Sample/tree/master/FluentTreeView_Part5</a></p>
]]></content>
      
        <categories>
            
            <category> FluentTreeView </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[FluentTreeView Part.4]]></title>
      <url>/2019/04/19/fluent-treeview-part4/</url>
      <content type="html"><![CDATA[<p>这篇起我们正式开始实现FluentTreeView。先看看图片<br><img src="/2019/04/19/fluent-treeview-part4/fluent-tree-view.jpg" alt="FluentTreeView"></p>
<p>TreeView左侧有一选择高亮，Item有一鼠标高亮。这两个高亮与整个TreeView一样宽。<br>再回想一下我们上一篇用Expander实现的TreeView，Item的缩进是如何实现的？</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>-</th>
<th>Column1</th>
<th>Column2</th>
</tr>
</thead>
<tbody>
<tr>
<td>Row1</td>
<td>Expander</td>
<td>ContentPreserenter</td>
</tr>
<tr>
<td>Row2</td>
<td>/</td>
<td>ItemsPreserenter</td>
</tr>
</tbody>
</table>
<p>ItemsPreserenter将会被展开为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ItemsPanel</div><div class="line">    TreeViewItem</div><div class="line">    TreeViewItem</div><div class="line">    TreeViewItem</div></pre></td></tr></table></figure></p>
<p>这就意味着，下一级的TreeViewItem永远处于上一级TreeViewItem的第二列里。将第一列的列宽设置为定值，就实现了各个层级的缩进。</p>
<p>进一步思考，如果我们在这样的结构里去修改TreeViewItem的面板的背景色当作高亮的话，那这个面板自身也是被缩进的。<br>我们试一试，把Style改成这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;Style TargetType=&quot;TreeViewItem&quot;&gt;</div><div class="line">    &lt;Setter Property=&quot;Template&quot;&gt;</div><div class="line">        &lt;Setter.Value&gt;</div><div class="line">            &lt;ControlTemplate TargetType=&quot;TreeViewItem&quot;&gt;</div><div class="line">                &lt;Grid x:Name=&quot;root&quot;&gt;</div><div class="line">                    &lt;Grid.ColumnDefinitions&gt;</div><div class="line">                        &lt;ColumnDefinition Width=&quot;24&quot;&gt;&lt;/ColumnDefinition&gt;</div><div class="line">                        &lt;ColumnDefinition&gt;&lt;/ColumnDefinition&gt;</div><div class="line">                    &lt;/Grid.ColumnDefinitions&gt;</div><div class="line">                    &lt;Grid.RowDefinitions&gt;</div><div class="line">                        &lt;RowDefinition Height=&quot;Auto&quot;&gt;&lt;/RowDefinition&gt;</div><div class="line">                        &lt;RowDefinition Height=&quot;*&quot;&gt;&lt;/RowDefinition&gt;</div><div class="line">                    &lt;/Grid.RowDefinitions&gt;</div><div class="line">                    &lt;Expander IsExpanded=&quot;&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;,Path=IsExpanded,Mode=TwoWay&#125;&quot; x:Name=&quot;expander&quot;&gt;&lt;/Expander&gt;</div><div class="line">                    &lt;ContentPresenter VerticalAlignment=&quot;Center&quot; Grid.Column=&quot;1&quot; ContentSource=&quot;Header&quot;&gt;&lt;/ContentPresenter&gt;</div><div class="line">                    &lt;ItemsPresenter Visibility=&quot;&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;,Path=IsExpanded,Converter=&#123;StaticResource BoolToVisibilityConverter&#125;&#125;&quot; Grid.Row=&quot;1&quot; Grid.Column=&quot;1&quot;&gt;&lt;/ItemsPresenter&gt;</div><div class="line">                &lt;/Grid&gt;</div><div class="line">                &lt;ControlTemplate.Triggers&gt;</div><div class="line">                    &lt;Trigger Property=&quot;HasItems&quot; Value=&quot;False&quot;&gt;</div><div class="line">                        &lt;Setter TargetName=&quot;expander&quot; Property=&quot;Visibility&quot; Value=&quot;Collapsed&quot;&gt;&lt;/Setter&gt;</div><div class="line">                    &lt;/Trigger&gt;</div><div class="line">                    &lt;Trigger Property=&quot;IsSelected&quot; Value=&quot;True&quot;&gt;</div><div class="line">                        &lt;Setter TargetName=&quot;root&quot; Property=&quot;Background&quot; Value=&quot;Red&quot;&gt;&lt;/Setter&gt;</div><div class="line">                    &lt;/Trigger&gt;</div><div class="line">                &lt;/ControlTemplate.Triggers&gt;</div><div class="line">            &lt;/ControlTemplate&gt;</div><div class="line">        &lt;/Setter.Value&gt;</div><div class="line">    &lt;/Setter&gt;</div><div class="line">&lt;/Style&gt;</div></pre></td></tr></table></figure></p>
<p>在选中非第一级Item时，高亮色就出现了我们不需要的左边距。这不符合我们的要求，所以不能用递归的方式来实现不同层级的缩进。<br><img src="/2019/04/19/fluent-treeview-part4/recursive-indent.jpg" alt="recursive-indent"><br>我们所想要的是，每一层TreeViewItem的宽度都与TreeView本身保持一致，所以TreeViewItem自己必须是打平的。需要特殊处理的是ContentPreserenter。可以根据TreeViewItem的层级计算出所需要的左边距。</p>
<p>再次考虑整个TreeViewItem的布局，鼠标和选择高亮应该撑满可用宽度，倒三角符号(▽)和ContentPreserenter则应该随着层级缩进。有了这些做参照，很容易能写出这样的模板:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Grid</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"Auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">RowDefinition</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"*"</span>&gt;</span><span class="tag">&lt;/<span class="name">RowDefinition</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">x:Name</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">x:Name</span>=<span class="string">"selector"</span> <span class="attr">Width</span>=<span class="string">"2"</span> <span class="attr">Visibility</span>=<span class="string">"Collapsed"</span> <span class="attr">Fill</span>=<span class="string">"Green"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Left"</span>&gt;</span><span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Margin</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource AncestorType=TreeViewItem&#125;,Converter=&#123;StaticResource TreeLevelToIndentConverter&#125;&#125;"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">"24"</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ColumnDefinition</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Expander</span> <span class="attr">IsExpanded</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;,Path=IsExpanded,Mode=TwoWay&#125;"</span> <span class="attr">x:Name</span>=<span class="string">"expander"</span>&gt;</span><span class="tag">&lt;/<span class="name">Expander</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Grid.Column</span>=<span class="string">"1"</span> <span class="attr">ContentSource</span>=<span class="string">"Header"</span>&gt;</span><span class="tag">&lt;/<span class="name">ContentPresenter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ItemsPresenter</span> <span class="attr">Visibility</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;,Path=IsExpanded,Converter=&#123;StaticResource BoolToVisibilityConverter&#125;&#125;"</span> <span class="attr">Grid.Row</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">ItemsPresenter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>TreeLevelToIndentConverter</code>是根据等级计算缩进的Converter。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TreeLevelToIndentConverter</span> : <span class="title">IValueConverter</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> Thickness Margin &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Convert</span> (<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, CultureInfo culture</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> <span class="keyword">is</span> TreeViewItem ti)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> level = <span class="number">0</span>;</div><div class="line">            FrameworkElement current = ti;</div><div class="line">            <span class="keyword">do</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (VisualTreeHelper.GetParent (current) <span class="keyword">is</span> FrameworkElement fe)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span> (fe <span class="keyword">is</span> TreeViewItem)</div><div class="line">                    &#123;</div><div class="line">                        level++;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (fe <span class="keyword">is</span> TreeView)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    current = fe;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">while</span> (current != <span class="literal">null</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Thickness (Margin.Left * level, <span class="number">0</span>, Margin.Right * level, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">ConvertBack</span> (<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, CultureInfo culture</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSupportedException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>选择高亮已经差不多了，但鼠标高亮还有点问题<br><img src="/2019/04/19/fluent-treeview-part4/fluent-tree-view-with-selector.jpg" alt="fluent-tree-view-with-selector"></p>
<p>一番搜索发现，当前鼠标悬空的TreeViewItem以及它所有的祖先的<code>IsMouseOver</code>触发器都会<a href="https://blogs.msdn.microsoft.com/mikehillberg/2006/09/21/a-trigger-for-the-treeviewitem-directly-under-the-mouse/" target="_blank" rel="external">起作用</a>。</p>
<p>当然，你也可以像我一样偷懒：给Border设置MouseOver的触发器。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Border</span> <span class="attr">x:Name</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Border.Style</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">"Border"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Style.Triggers</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"IsMouseOver"</span> <span class="attr">Value</span>=<span class="string">"True"</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Background"</span> <span class="attr">Value</span>=<span class="string">"Red"</span>&gt;</span><span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Style.Triggers</span>&gt;</span></span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Border.Style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Rectangle</span> <span class="attr">x:Name</span>=<span class="string">"selector"</span> <span class="attr">Width</span>=<span class="string">"2"</span> <span class="attr">Visibility</span>=<span class="string">"Collapsed"</span> <span class="attr">Fill</span>=<span class="string">"Green"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Left"</span>&gt;</span><span class="tag">&lt;/<span class="name">Rectangle</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Margin</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource AncestorType=TreeViewItem&#125;,Converter=&#123;StaticResource TreeLevelToIndentConverter&#125;&#125;"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">"24"</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ColumnDefinition</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Expander</span> <span class="attr">IsExpanded</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;,Path=IsExpanded,Mode=TwoWay&#125;"</span> <span class="attr">x:Name</span>=<span class="string">"expander"</span>&gt;</span><span class="tag">&lt;/<span class="name">Expander</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Grid.Column</span>=<span class="string">"1"</span> <span class="attr">ContentSource</span>=<span class="string">"Header"</span>&gt;</span><span class="tag">&lt;/<span class="name">ContentPresenter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Border</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/2019/04/19/fluent-treeview-part4/fluent-tree-view-mouseover-fix.jpg" alt="fluent-tree-view-mouseover-fix"></p>
<p>看起来已经像模像样了，但还有瑕疵：</p>
<ul>
<li>选择高亮并不对所有的子节点生效。</li>
<li>鼠标高亮没有覆盖选择高亮</li>
<li>配色不对，丑</li>
</ul>
<p>我们会在下一篇中改正这些问题</p>
<hr>
<p>源代码参见<br><a href="https://github.com/Verrickt/Melchior-Sample/tree/master/FluentTreeView_Part4" target="_blank" rel="external">https://github.com/Verrickt/Melchior-Sample/tree/master/FluentTreeView_Part4</a></p>
]]></content>
      
        <categories>
            
            <category> FluentTreeView </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[FluentTreeView Part.3]]></title>
      <url>/2019/04/19/fluent-treeview-part3/</url>
      <content type="html"><![CDATA[<p>上一篇中我们用数据驱动界面的方式使用了TreeView。这一篇我们稍稍改一改TreeView的样式。把TreeView表示节点可以展开的小三角替换成Expander是个不错的开始。既能复习TreeView的可视化树，又避免步子太大扯到蛋。<br><a id="more"></a></p>
<h2 id="自定义TreeView样式"><a href="#自定义TreeView样式" class="headerlink" title="自定义TreeView样式"></a>自定义TreeView样式</h2><p>回顾一下，TreeView中我们所看到的所有Item，都是TreeViewItem负责呈现的。因此，我们需要重现实现TreeViewItem的Template。TreeViewItem要负责展示Item的内容，所以Template里应该要有一个ContentPreserenter；TreeViewItem自身也是个ItemsControl，Template里也应有一个ItemsPreserenter。除此之外就是表示Item是否可以展开的小三角，即我们要换成Expander的部分。<br><img src="/2019/04/19/fluent-treeview-part3/normal-tree-view-with-mark.jpg" alt="tree view with mark"></p>
<p>结合图片分析一下TreeViewItem的可视化树。首先应有两行，第一行显示当前Item，第二行显示下一级Item；<br>其次应有两列，第一列放置小三角，第二列展示内容。应该是这样的结构：<br>|-|Column1|Column2|<br>|——-|——-|——-|<br>|Row1|Expander|ContentPreserenter|<br>|Row2|/|ItemsPreserenter|</p>
<p>跟其他控件不一样的是，在设计TreeViewItem的模板时，要先不管ItemsPreserenter那部分，就像它已经做好了一样。待到把其余部分的结构都定下来了，ItemsPreserenter部分自然就如愿了。这有实际上就是递归：ItemsPreserenter里有TreeViewItem的模板需要展开，这跟当前所做的问题，即重新实现TreeViewItem的模板，是一样的。我们在ItemsPreserenter的问题已经解决的假设上，解决了TreeViewItem的模板。这像极了汉诺塔。</p>
<p>习惯了这样的递归思考后，把几个显示隐藏的小细节处理好，这就得到了下面的XAML:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">"TreeViewItem"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Template"</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">"TreeViewItem"</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">"24"</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">ColumnDefinition</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"Auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">RowDefinition</span>&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"*"</span>&gt;</span><span class="tag">&lt;/<span class="name">RowDefinition</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Expander</span> <span class="attr">IsExpanded</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;,Path=IsExpanded,Mode=TwoWay&#125;"</span> <span class="attr">x:Name</span>=<span class="string">"expander"</span>&gt;</span><span class="tag">&lt;/<span class="name">Expander</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Grid.Column</span>=<span class="string">"1"</span> <span class="attr">ContentSource</span>=<span class="string">"Header"</span>&gt;</span><span class="tag">&lt;/<span class="name">ContentPresenter</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ItemsPresenter</span> <span class="attr">Visibility</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;,Path=IsExpanded,Converter=&#123;StaticResource BoolToVisibilityConverter&#125;&#125;"</span> <span class="attr">Grid.Row</span>=<span class="string">"1"</span> <span class="attr">Grid.Column</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">ItemsPresenter</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ControlTemplate.Triggers</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"HasItems"</span> <span class="attr">Value</span>=<span class="string">"False"</span>&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">"expander"</span> <span class="attr">Property</span>=<span class="string">"Visibility"</span> <span class="attr">Value</span>=<span class="string">"Collapsed"</span>&gt;</span><span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/2019/04/19/fluent-treeview-part3/expander-tree-view.jpg" alt="expander-tree-view"></p>
<p>大功告成!</p>
<hr>
<p>源代码参见<br><a href="https://github.com/Verrickt/Melchior-Sample/tree/master/FluentTreeView_Part3" target="_blank" rel="external">https://github.com/Verrickt/Melchior-Sample/tree/master/FluentTreeView_Part3</a></p>
]]></content>
      
        <categories>
            
            <category> FluentTreeView </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[FluentTreeView Part.2]]></title>
      <url>/2019/04/19/fluent-treeview-part2/</url>
      <content type="html"><![CDATA[<h2 id="使用TreeView"><a href="#使用TreeView" class="headerlink" title="使用TreeView"></a>使用TreeView</h2><p>上次说到了TreeView具有递归的结构，而在WPF中是数据驱动界面，这就要求我们的数据源也具有一定的递归结构</p>
<a id="more"></a>
<h3 id="数据的准备"><a href="#数据的准备" class="headerlink" title="数据的准备"></a>数据的准备</h3><p>按照数据源是否可以继续展开下去，我们将数据源定义为两个ViewModel:<code>TreeNodeVM</code>,<code>TreeLeafVM</code>，其中<code>TreeNodeVM</code>作为树的中间节点出现，其下可继续出现中间节点和叶子节点，<code>TreeLeafVM</code>作为树的叶子节点出现，不能再出现其他节点。<code>TreeNodeVM</code>中的子节点的个数是不定的，所以应该由集合表示。而<code>TreeNodeVM</code>的子节点可能是<code>TreeNodeVM</code>和<code>TreeLeafVM</code>的任意一种，这就需要他们有一个公共的父类。这给我们如下的数据定义:<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">TreeVMBase</span> : <span class="title">ViewModelBase</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> ObservableCollection&lt;TreeVMBase&gt; Items &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">set</span> &#123; Set (<span class="keyword">ref</span> _name, <span class="keyword">value</span>); &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> IEnumerable&lt;TreeVMBase&gt; Empty =&gt; Enumerable.Empty&lt;TreeVMBase&gt; ();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeVMBase</span> (<span class="params"><span class="keyword">string</span> name</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        Name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">TreeNodeVM</span> : <span class="title">TreeVMBase</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> ObservableCollection&lt;TreeVMBase&gt; _items;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> ObservableCollection&lt;TreeVMBase&gt; Items</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">get</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> _items;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">set</span></div><div class="line">        &#123;</div><div class="line">            Set (<span class="keyword">ref</span> _items, <span class="keyword">value</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNodeVM</span> (<span class="params"><span class="keyword">string</span> name, IEnumerable&lt;TreeVMBase&gt; items</span>) : <span class="title">base</span> (<span class="params">name</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        _items = <span class="keyword">new</span> ObservableCollection&lt;TreeVMBase&gt; (items??Empty);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> <span class="title">TreeLeafVM</span> : <span class="title">TreeVMBase</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ObservableCollection&lt;TreeVMBase&gt; _items = <span class="keyword">new</span> ObservableCollection&lt;TreeVMBase&gt; ();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">override</span> ObservableCollection&lt;TreeVMBase&gt; Items</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">get</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> _items;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">set</span> &#123; &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeLeafVM</span> (<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span> (<span class="params">name</span>) </span>&#123; &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们的MainViewModel需要给TreeView提供数据源。上一节里提到，每一个TreeViewItem都是一棵树的根节点。而我们的TreeView，作为最顶级TreeViewItem的直接父节点，应该是森林。TreeView的ItemsSource的类型应该是<code>IEnumerable&lt;TreeVMBase&gt;</code></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">MainViewModel</span> : <span class="title">ViewModelBase</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> ObservableCollection&lt;TreeVMBase&gt; _treeViewBase;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> ObservableCollection&lt;TreeVMBase&gt; TreeViewBase</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _treeViewBase; &#125;</div><div class="line">        <span class="keyword">set</span> &#123; Set (<span class="keyword">ref</span> _treeViewBase, <span class="keyword">value</span>); &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainViewModel</span> (<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> leafs = <span class="keyword">new</span> []</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">new</span> TreeLeafVM (<span class="string">"Leaf1"</span>),</div><div class="line">            <span class="keyword">new</span> TreeLeafVM (<span class="string">"Leaf2"</span>),</div><div class="line">            <span class="keyword">new</span> TreeLeafVM (<span class="string">"Leaf3"</span>)</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> nodes = <span class="keyword">new</span> []</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">new</span> TreeNodeVM (<span class="string">"Node1"</span>, <span class="literal">null</span>),</div><div class="line">            <span class="keyword">new</span> TreeNodeVM (<span class="string">"Node2"</span>, leafs),</div><div class="line">            <span class="keyword">new</span> TreeNodeVM (<span class="string">"Node3"</span>, leafs.Skip (<span class="number">1</span>).Take(<span class="number">1</span>))</div><div class="line">        &#125;;</div><div class="line">        TreeViewBase = <span class="keyword">new</span> ObservableCollection&lt;TreeVMBase&gt; (<span class="keyword">new</span> []</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">new</span> TreeNodeVM (<span class="string">"Root1"</span>, nodes),</div><div class="line">            <span class="keyword">new</span> TreeNodeVM (<span class="string">"Root2"</span>, nodes)</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="界面的准备"><a href="#界面的准备" class="headerlink" title="界面的准备"></a>界面的准备</h3><p>相比有继承关系的数据，界面这边就简单一些了。界面的主要问题是，需要一个办法来告诉TreeViewItem应该如何呈现数据，应该数据上下文的哪一个属性上寻找应该生成孩子的数据源，以及递归地告诉自己的孩子如何呈现数据，如何生成孩子的孩子。</p>
<p><code>DataTemplate</code>已经能告诉TreeViewItem如何呈现数据，关键在于如何寻找生成孩子的数据源。这个问题的答案就藏在<code>HierarchicalDataTemplate</code>里。<code>Hierarchical</code>有层级的意思，它比<code>DataTemplate</code>多的一个属性叫做<code>ItemsSource</code>。把<code>ItemsSource</code>设置为<code>TreeVMBase</code>的抽象属性<code>Items</code>，TreeViewItem就会自动地在数据上下文上寻找<code>Items</code>属性，按照属性值生成新的TreeViewItem，并且把这个过程递归地进行下去。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TreeView</span> <span class="attr">ItemsSource</span>=<span class="string">"&#123;Binding TreeViewBase&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TreeView.ItemTemplate</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">HierarchicalDataTemplate</span> <span class="attr">ItemsSource</span>=<span class="string">"&#123;Binding Items&#125;"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding Name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">HierarchicalDataTemplate</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">TreeView.ItemTemplate</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">TreeView</span>&gt;</span></div></pre></td></tr></table></figure>
<p>大功告成</p>
<p><img src="/2019/04/19/fluent-treeview-part2/normal-tree-view.jpg" alt="Normal tree view"></p>
<hr>
<p>源代码参见<br><a href="https://github.com/Verrickt/Melchior-Sample/tree/master/FluentTreeView" target="_blank" rel="external">https://github.com/Verrickt/Melchior-Sample/tree/master/FluentTreeView</a></p>
]]></content>
      
        <categories>
            
            <category> FluentTreeView </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[FluentTreeView Part.1]]></title>
      <url>/2019/04/19/fluent-treeview-part1/</url>
      <content type="html"><![CDATA[<h2 id="ItemsControl"><a href="#ItemsControl" class="headerlink" title="ItemsControl"></a>ItemsControl</h2><p>有时需要呈现一组逻辑上<strong>平级</strong>的控件，他们可以是一个列表，也可以是一个网格；可以横向排列，也可以纵向排列；数量可以固定，也可以按需加载；普通控件的组合无能为力。所以，我们需要新的工具。<code>ItemsControl</code>应运而生。</p>
<a id="more"></a>
<p>ItemsControl自身是个控件，所以它具有继承自控件的布局属性(Margin,Padding,Background等)；WPF作为一个数据驱动界面的框架，它要负责根据数据生成每个Item；多个Item之间需要某种排列逻辑，这也是ItmesControl的任务；在Item可被选择的时候，选中的和未选中的要在视觉上做区分。这种视觉区分最好不需要开发者自己操心。这个光荣的任务又落在了ItemsControl的头上；独立于数据，Item自身需要排序，过滤；逻辑上能够归为一类的Item有时要放在一起，这就又牵扯到分组的了。</p>
<p>ItemsControl职责的列表能列很长，况且这还没说数据虚拟化和界面虚拟化呢。秉持着面向对象设计的原则，ItemsControl这里肯定牵扯到了很多的类。</p>
<p>事实也是如此。为了实现继承自控件的属性，ItemsControl需要把自己放在一个Panel里。为了实现数据驱动界面，ItemsControl借助了ItemContainerGenerator，一个由数据生成UI界面的类；为了解决Item之间的排布方式，引入了ItemsPanel；为了实现不需开发者操心的选中/未选状态的视觉区分，在Item外面套了一层容器(ItemContainer)。这么来看，ItemsControl的可视化树会长成这样就不奇怪了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ItemsControl</div><div class="line">   Panel</div><div class="line">     ItemsPreserenter</div><div class="line">       ItemsPanel</div><div class="line">         ItemContainer</div><div class="line">            Item(DataTemplate)</div><div class="line">         ItemContainer</div><div class="line">            Item(DataTemplate)</div><div class="line">         ItemContainer</div><div class="line">            Item(DataTemplate)</div></pre></td></tr></table></figure></p>
<p>ItemsControl其实并不常用，日常使用接触最多的是它的子类：</p>
<ul>
<li>ListView</li>
<li>ListBox </li>
<li>ComboBox</li>
<li>TreeView</li>
</ul>
<p>相比聪明的你已经从这个系列的名字里猜出来了，我们要研究的是TreeView</p>
<h2 id="TreeView-TreeViewItem与HeaderedItemsControl"><a href="#TreeView-TreeViewItem与HeaderedItemsControl" class="headerlink" title="TreeView,TreeViewItem与HeaderedItemsControl"></a>TreeView,TreeViewItem与HeaderedItemsControl</h2><p>TreeView是个很特殊的ItemsControl。列表也好，网格也好，其他的ItemsControl所能展示的都是同一等级的Item，而TreeView却可以展示多级。这其中的奥秘就藏在ItemContainer里。</p>
<p>每个ItemControl的子类都有其对应的ItemContainer，ListView对应ListViewItem，ComboBox对应ComboBoxItem，聪明的你，快来想想TreeView对应的是什么😋</p>
<p>现在思考一个问题，把ItemsControl的可视化树中的一个哪一个节点替换掉，会让ItemsControl出现多级的结构？//提示：看本节名字</p>
<p>揭晓答案。一个很自然的想法是，如果TreeView的ItemContainer，即TreeViewItem，自己也是一个ItemsControl的话，那就可以出现两级结构了。进一步想下去，TreeViewItem如果是个ItemsControl的话，它必然要有ItemContainer。如果这个ItemContainer恰好是TreeViewItem呢？要是这样的话，TreeViewItem下面可以再有任意多个TreeViewItem。递归的想下去，这样TreeViewItem就可以有无数级了。</p>
<p>其实，TreeView的实现跟我们猜想是基本一致的。只是我们的猜想中，TreeViewItem里没有位置用来呈现当前的Item，这就引入了另一个类，HeaderedItemsControl。它继承自ItemsControl，添加了Header属性。这个Header属性就可以用来呈现我们的Item。</p>
<p>那么TreeView的可视化树是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">TreeView</div><div class="line">   Panel</div><div class="line">     ItemsPreserenter</div><div class="line">       ItemsPanel</div><div class="line">         TreeViewItem</div><div class="line">            Header</div><div class="line">               Item(DataTemplate)</div><div class="line">            ItemsPreserenter</div><div class="line">               ItemsPanel</div><div class="line">                  TreeViewItem</div><div class="line">                  TreeViewItem</div><div class="line">         TreeViewItem</div><div class="line">            Header</div><div class="line">               Item(DataTemplate)</div><div class="line">            ItemsPreserenter</div><div class="line">               ItemsPanel</div><div class="line">                  TreeViewItem</div><div class="line">                  TreeViewItem</div></pre></td></tr></table></figure></p>
<p>其中每一级的TreeViewItem都可以展开为这样的结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Header</div><div class="line">   Item(DataTemplate)</div><div class="line">ItemsPreserenter</div><div class="line">   ItemsPanel</div><div class="line">      TreeViewItem</div><div class="line">      TreeViewItem</div></pre></td></tr></table></figure></p>
<p>在WPF这个数据驱动界面的UI框架里，想要呈现递归的UI界面，最自然的方法就是把数据也变得递归化。即，数据也要变成树状结构。(严格来说应该是数据结构中森林的概念。TreeView是森林，TreeViewItem则是一棵树。对应地，数据也要变成森林的结构。即，树状的集合)</p>
<p>既然UI结构已经递归化，原来指明<strong>单层</strong>Items如何呈现的ItemTemplate已经不够用了。<code>HierarchicalItemTemplate</code>闪亮登场。<br>最重要的属性，<code>ItemsSource</code>是干什么的，我们卖个关子。</p>
<h2 id="FluentTreeView"><a href="#FluentTreeView" class="headerlink" title="FluentTreeView"></a>FluentTreeView</h2><p>终于要讲讲什么是FluentTreeView了。作为一个十多岁的UI框架，WPF已经进入了维护期。新出生的UWP功能尚且不全，导致很多应用只得使用WPF。相比UWP，WPF的逊色的地方就在于外观。每次功能更新，UWP默认的外观就向Windows的未来的样子，Fluent design靠近一步。为了让WPF也能变得更现代一些，本系列旨在将WPF控件Fluent design化。</p>
<p>空口无凭，来看看我们的目标<br><img src="/2019/04/19/fluent-treeview-part1/fluent-tree-view.jpg" alt="Fluent TreeView"></p>
<ul>
<li>左侧有当前主题色(Accent color)的选中高亮指示</li>
<li>鼠标高亮撑满整个控件宽度</li>
</ul>
<p>在实现FluentTreeView的时候，经常ItemsControl和TreeView的相关知识。所以看不懂后面的时候，尽管回来翻看第一篇。那么我们下篇见。</p>
]]></content>
      
        <categories>
            
            <category> FluentTreeView </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[获取程序的编译时间]]></title>
      <url>/2018/10/22/get-link-time-from-csharp/</url>
      <content type="html"><![CDATA[<h2 id="日常新需求"><a href="#日常新需求" class="headerlink" title="日常新需求"></a>日常新需求</h2><p>新的需求又来了。这次是程序在编译后6个月拒绝启动。BETA性质的软件都有类似的需求。但大部分软件要么是启动时检查更新，要么是联网判断是否过期。对于我们现在做的这个小工具太小题大做了。根据编译时间判断过期的需求看似奇葩，也是有点道理的。<br><a id="more"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>遇事不决问SO，我们输入”C# get compile time”找到的第一个<a href="https://stackoverflow.com/questions/1600962/displaying-the-build-date" target="_blank" rel="external">问题</a>就是了。</p>
<p>方法有很多，大致分为这几类。</p>
<ol>
<li>读取PE头部时间戳</li>
<li>添加Build Task将编译时间以资源嵌入程序集</li>
<li>读取文件创建时间</li>
</ol>
<p>严格意义上说，文件创建时间与文件系统相关，依赖程序外部，碰到不保留创建时间的操作就只能干瞪眼了，所以排除掉。  </p>
<p>而添加Build Task又需要程序读取资源，反序列化云云，比较麻烦。<br>因此主要关注1中的方法。</p>
<p>.NET的程序集都包含PE头部。先来一张图感受一下。</p>
<p>我们需要的字段在COFFHeader的TimeDateStamp处。</p>
<p>需要注意的一点是，图中的偏移量是相对PE头的，而在PE头部之前还有DOS头部。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/1/1b/Portable_Executable_32_bit_Structure_in_SVG_fixed.svg" alt="PE Header"></p>
<p>再来看看StackOverflow上的答案，是不是比较直观呢？</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// see https://stackoverflow.com/a/1601079</span></div><div class="line"><span class="keyword">struct</span> _IMAGE_FILE_HEADER</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">ushort</span> Machine;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">ushort</span> NumberOfSections;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">uint</span> TimeDateStamp;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">uint</span> PointerToSymbolTable;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">uint</span> NumberOfSymbols;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">ushort</span> SizeOfOptionalHeader;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">ushort</span> Characteristics;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> DateTime <span class="title">GetBuildDateTime</span>(<span class="params">Assembly assembly</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> path = assembly.GetName().CodeBase;</div><div class="line">    <span class="keyword">if</span> (File.Exists(path))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[Math.Max(Marshal.SizeOf(<span class="keyword">typeof</span>(_IMAGE_FILE_HEADER)), <span class="number">4</span>)];</div><div class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> fileStream = <span class="keyword">new</span> FileStream(path, FileMode.Open,FileAccess.Read))</div><div class="line">        &#123;</div><div class="line">            fileStream.Position = <span class="number">0x3C</span>;</div><div class="line">            fileStream.Read(buffer, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line">            fileStream.Position = BitConverter.ToUInt32(buffer, <span class="number">0</span>); <span class="comment">// COFF header offset</span></div><div class="line">            fileStream.Read(buffer, <span class="number">0</span>, <span class="number">4</span>); <span class="comment">// "PE\0\0"</span></div><div class="line">            fileStream.Read(buffer, <span class="number">0</span>, buffer.Length);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> pinnedBuffer = GCHandle.Alloc(buffer, GCHandleType.Pinned);</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> coffHeader = (_IMAGE_FILE_HEADER)Marshal.PtrToStructure(pinnedBuffer.AddrOfPinnedObject(),<span class="keyword">typeof</span>(_IMAGE_FILE_HEADER));</div><div class="line">            <span class="keyword">return</span> TimeZone.CurrentTimeZone.ToLocalTime(<span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>) + <span class="keyword">new</span> TimeSpan(coffHeader.TimeDateStamp * TimeSpan.TicksPerSecond));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span></div><div class="line">        &#123;</div><div class="line">            pinnedBuffer.Free();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DateTime();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从<code>Ox3C</code>位置读到PE头部的位置后Seek到该位置，读取内容后将其转换为自定义的<code>_IMAGE_FILE_HEADER</code>结构，读取<code>TimeDateStamp</code>即可。</p>
<p>直接运行的结果是<code>1900/1/1 12:00:00</code>，不对。原因是<code>AssemblyName.CodeBase</code>属性返回的并不是程序集所在路径，而是File scheme的URI <code>file:\\\c:\MyDirectory\MyAssemlby.exe</code>。使用<code>AssemblyName</code>后问题解决。<br>从<code>Ox3C</code>位置读到PE头部的位置后Seek到该位置，读取内容后将其转换为自定义的<code>_IMAGE_FILE_HEADER.TimeDateStamp</code>，读取<code>TimeDateStamp</code>即可。<br>PE头部的<code>TimeDateStamp</code>字段是从unix epoll算起的，8102年的.NET中也有专门处理这里情况的<code>DateTimeOffSet</code>，而异常情况我们完全可以返回<code>null</code>。<br>修改后代码如下</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> DateTimeOffset? GetBuildDateTime(<span class="keyword">this</span> Assembly assembly)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> path = assembly.Location;</div><div class="line">    <span class="keyword">if</span> (File.Exists(path))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[Math.Max(Marshal.SizeOf(<span class="keyword">typeof</span>(_IMAGE_FILE_HEADER)), <span class="number">4</span>)];</div><div class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> fileStream = <span class="keyword">new</span> FileStream(path, FileMode.Open, FileAccess.Read))</div><div class="line">        &#123;</div><div class="line">            fileStream.Position = <span class="number">0x3C</span>;</div><div class="line">            fileStream.Read(buffer, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line">            fileStream.Position = BitConverter.ToUInt32(buffer, <span class="number">0</span>); <span class="comment">// COFF header offset</span></div><div class="line">            fileStream.Read(buffer, <span class="number">0</span>, <span class="number">4</span>); <span class="comment">// "PE\0\0"</span></div><div class="line">            fileStream.Read(buffer, <span class="number">0</span>, buffer.Length);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> pinnedBuffer = GCHandle.Alloc(buffer, GCHandleType.Pinned);</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> coffHeader = (_IMAGE_FILE_HEADER)Marshal.PtrToStructure(pinnedBuffer.AddrOfPinnedObject(), <span class="keyword">typeof</span>(_IMAGE_FILE_HEADER));</div><div class="line">            <span class="keyword">return</span> DateTimeOffset.FromUnixTimeSeconds(coffHeader.TimeDateStamp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span></div><div class="line">        &#123;</div><div class="line">            pinnedBuffer.Free();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改后发现返回的是一个在2090年之后的日期，还是不对。</p>
<h2 id="Deterministic-Build-来背锅"><a href="#Deterministic-Build-来背锅" class="headerlink" title="Deterministic Build 来背锅"></a>Deterministic Build 来背锅</h2><p>这次的原因是MS在某个Roslyn版本中默认开启了<a href="http://blog.paranoidcoding.com/2016/04/05/deterministic-builds-in-roslyn.html" target="_blank" rel="external">Deterministic Build</a></p>
<blockquote>
<p>….. The /deterministic flag causes the compiler to emit the exact same EXE / DLL, byte for byte, when given the same inputs.</p>
</blockquote>
<p>既然输入相同输出必定相同，那可能会变的部分就只能固定下来了。例如时间戳。</p>
<blockquote>
<p>… the MVID, PDB ID and Timestamp are the core issues to solve for deterministic builds.</p>
</blockquote>
<p>MS选了一个比较折中的方案——由文件内容计算</p>
<blockquote>
<p>Why not just use all 0s for the timestamp?</p>
<p>This is actually how the original implementation of determinism functioned in the compiler. Unfortunately it turned out there were a lot of tools we used in our internal process that validated the timestamp. They got a bit cranky when the discovered binaries claiming to be written in 1970, over 25 years before .NET was even invented. The practice of validating the time stamp is questionable but given tools were doing it there was a significant back compat risk. Hence we moved to the current computed value and haven’t seen any issues since then.</p>
</blockquote>
<p>所以我们得到一个奇怪的值也是Work as expected了🙃</p>
<p>解决办法非常简单，在<code>.csproj</code>中将<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">deterministic</span>&gt;</span>true<span class="tag">&lt;/<span class="name">deterministic</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">deterministic</span>&gt;</span>false<span class="tag">&lt;/<span class="name">deterministic</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>即可。<br>需要注意的是，Deterministic Build在.NET Core上默认开启，要使PE头部的TimeDateStamp有意义需要将其关闭。而在.NET Framework上则是只有在VS2017的某个特定版本后新建的工程才会开启。</p>
<p>题外话，这个默认开启的Deterministic Build还搞出了其他幺蛾子，例如<a href="https://github.com/dotnet/roslyn/issues/22660" target="_blank" rel="external">这里</a></p>
]]></content>
      
        
        <tags>
            
            <tag> C# </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用MSBuild编写构建脚本]]></title>
      <url>/2018/08/30/build-script-with-msbuild/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>项目需求变更，需要从一份代码里编译出好几个不同的版本。编译和部署的复杂度都成指数增加，简单的Release构建搞不定了，写构建脚本迫在眉睫。<br><a id="more"></a></p>
<p>大致介绍下项目的组成吧。整个项目由三部分组成：</p>
<ul>
<li>Installer.vcxproj</li>
<li>Main.csproj</li>
<li>Updater.csproj</li>
</ul>
<p><code>Main</code>是项目本体。<code>Installer</code>负责项目的安装和卸载,<code>Updater</code>负责项目的更新。解决方案里除<code>Installer</code>使为C++外，其余均为C#。</p>
<p>解决方案的结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MyProject.sln</div><div class="line">- Installer.vcxproj </div><div class="line">- Main.csproj</div><div class="line">- Updater.csproj</div></pre></td></tr></table></figure></p>
<p>现在需要从<code>MyProject.sln</code>条件编译出多个版本，要求</p>
<ul>
<li>对于每个版本，<code>Installer</code>和<code>Main</code>须重新编译</li>
<li>所有版本共享同一份<code>Updater</code>的二进制。</li>
</ul>
<h2 id="Roslyn与MSBuild"><a href="#Roslyn与MSBuild" class="headerlink" title="Roslyn与MSBuild"></a>Roslyn与MSBuild</h2><p>构建的过程自然离不开编译。编译器虽软能将代码转化为二进制，但这个转换的单位是<strong>文件</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gcc --help</div><div class="line">Usage: gcc [options] file...</div></pre></td></tr></table></figure></p>
<p>作为.NET的编译器，Roslyn也不例外:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">csc /?</div><div class="line"></div><div class="line">.........</div><div class="line">                        - INPUT FILES -</div><div class="line"> /recurse:&lt;wildcard&gt;           Include all files in the current directory and</div><div class="line">                               subdirectories according to the wildcard</div><div class="line">                               specifications</div><div class="line"> /reference:&lt;alias&gt;=&lt;file&gt;     Reference metadata from the specified assembly</div><div class="line">                               file using the given alias (Short form: /r)</div><div class="line"> /reference:&lt;file list&gt;        Reference metadata from the specified assembly</div><div class="line">                               files (Short form: /r)</div><div class="line"> /addmodule:&lt;file list&gt;        Link the specified modules into this assembly</div><div class="line"> /link:&lt;file list&gt;             Embed metadata from the specified interop</div><div class="line">                               assembly files (Short form: /l)</div><div class="line"> /analyzer:&lt;file list&gt;         Run the analyzers from this assembly</div><div class="line">                               (Short form: /a)</div><div class="line"> /additionalfile:&lt;file list&gt;   Additional files that don&apos;t directly affect code</div><div class="line">                               generation but may be used by analyzers for producing</div><div class="line">                               errors or warnings.</div><div class="line"> /embed                        Embed all source files in the PDB.</div><div class="line"> /embed:&lt;file list&gt;            Embed specific files in the PDB</div></pre></td></tr></table></figure></p>
<p>我们不会把所有源文件的路径、所有引用的程序集的都告诉编译器，这样既低效又不利于维护。<br>最好有个能有个程序，能把所有编译的参数都记下来。这个过程最好能自动化：在文件夹里添加一个源文件、新增一个引用项，它都自动的更新编译参数。<br>存在这样的工具吗？当然了。在Visual Studio里添加一个文件是不需要动编译选项的。有心的人会发现，Visual Studio在<code>.csproj</code>记录了新增的文件。<code>.csproj</code>是项目文件。一个叫MSBuild的工具可以解析<code>.csproj</code>，并生成对应的编译选项调用编译器。这样的工具称为构建自动化工具。用微软自己的话说，是构建引擎。大型软件的开发离不开构建引擎。<br>与MSBuild同类的工具还有有<a href="https://en.wikipedia.org/wiki/List_of_build_automation_software#Build_script_generation_tools" title="List of build automation software" target="_blank" rel="external">很多</a>常见的有make,maven等。</p>
<p>相比于Roslyn，MSBuild的使用就简单多了，只需要指定项目文件就万事大吉了。<br>下面是在一个新建WPF项目下调用MSbuild的输出。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">C:\Users\Von\source\repos\WpfApp1&gt;msbuild WpfApp1.sln</div><div class="line">Microsoft (R) Build Engine version 15.7.180.61344 for .NET Framework</div><div class="line">Copyright (C) Microsoft Corporation. All rights reserved.</div><div class="line"></div><div class="line">Building the projects in this solution one at a time. To enable parallel build, please add the "/m" switch.</div><div class="line">Build started 9/1/2018 2:08:01 PM.</div><div class="line">Project "C:\Users\Von\source\repos\WpfApp1\WpfApp1.sln" on node 1 (default targets).</div><div class="line">ValidateSolutionConfiguration:</div><div class="line">  Building solution configuration "Debug|Any CPU".</div><div class="line">Project "C:\Users\Von\source\repos\WpfApp1\WpfApp1.sln" (1) is building "C:\Users\Von\source\repos\WpfApp1\WpfApp1\WpfA</div><div class="line">pp1.csproj" (2) on node 1 (default targets).</div><div class="line">GenerateBindingRedirects:</div><div class="line">  No suggested binding redirects from ResolveAssemblyReferences.</div><div class="line">Project "C:\Users\Von\source\repos\WpfApp1\WpfApp1\WpfApp1.csproj" (2) is building "C:\Users\Von\source\repos\WpfApp1\W</div><div class="line">pfApp1\WpfApp1_r1lsxnqk_wpftmp.csproj" (3) on node 1 (_CompileTemporaryAssembly target(s)).</div><div class="line">CoreCompile:</div><div class="line">  C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\bin\Roslyn\csc.exe /noconfig /nowarn:1701,</div><div class="line">  1702 /nostdlib+ /platform:anycpu32bitpreferred /errorreport:prompt /warn:4 /define:DEBUG;TRACE /highentropyva+ /refer</div><div class="line">  ence:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\Microsoft.CSharp.dll" /ref</div><div class="line">  erence:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\mscorlib.dll" /reference</div><div class="line">  :"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\PresentationCore.dll" /referen</div><div class="line">  ce:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\PresentationFramework.dll" /</div><div class="line">  reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Core.dll" /ref</div><div class="line">  erence:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Data.DataSetExten</div><div class="line">  sions.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Da</div><div class="line">  ta.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.dll"</div><div class="line">  /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Net.Http.dll"</div><div class="line">   /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Xaml.dll" /r</div><div class="line">  eference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Xml.dll" /refer</div><div class="line">  ence:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Xml.Linq.dll" /refe</div><div class="line">  rence:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\WindowsBase.dll" /debug+</div><div class="line">  /debug:full /filealign:512 /optimize- /out:obj\Debug\WpfApp1.exe /ruleset:"C:\Program Files (x86)\Microsoft Visual St</div><div class="line">  udio\2017\Community\Team Tools\Static Analysis Tools\\Rule Sets\MinimumRecommendedRules.ruleset" /subsystemversion:6.</div><div class="line">  00 /target:winexe /utf8output App.xaml.cs MainWindow.xaml.cs Properties\AssemblyInfo.cs Properties\Resources.Designer</div><div class="line">  .cs Properties\Settings.Designer.cs C:\Users\Von\source\repos\WpfApp1\WpfApp1\obj\Debug\MainWindow.g.cs C:\Users\Von\</div><div class="line">  source\repos\WpfApp1\WpfApp1\obj\Debug\App.g.cs</div><div class="line">  Using shared compilation with compiler from directory: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\</div><div class="line">  MSBuild\15.0\bin\Roslyn</div><div class="line">Done Building Project "C:\Users\Von\source\repos\WpfApp1\WpfApp1\WpfApp1_r1lsxnqk_wpftmp.csproj" (_CompileTemporaryAsse</div><div class="line">mbly target(s)).</div><div class="line"></div><div class="line">MarkupCompilePass2:</div><div class="line">  MarkupCompilePass2 successfully generated BAML or source code files.</div><div class="line">CleanupTemporaryTargetAssembly:</div><div class="line">  Deleting file "obj\Debug\WpfApp1.exe".</div><div class="line">CoreResGen:</div><div class="line">  "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\resgen.exe" /useSourcePath /r:"C:\Program</div><div class="line">   Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\Microsoft.CSharp.dll" /r:"C:\Program Files</div><div class="line">   (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\mscorlib.dll" /r:"C:\Program Files (x86)\Referen</div><div class="line">  ce Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\PresentationCore.dll" /r:"C:\Program Files (x86)\Reference Ass</div><div class="line">  emblies\Microsoft\Framework\.NETFramework\v4.7.1\PresentationFramework.dll" /r:"C:\Program Files (x86)\Reference Asse</div><div class="line">  mblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Core.dll" /r:"C:\Program Files (x86)\Reference Assemblies\Micr</div><div class="line">  osoft\Framework\.NETFramework\v4.7.1\System.Data.DataSetExtensions.dll" /r:"C:\Program Files (x86)\Reference Assembli</div><div class="line">  es\Microsoft\Framework\.NETFramework\v4.7.1\System.Data.dll" /r:"C:\Program Files (x86)\Reference Assemblies\Microsof</div><div class="line">  t\Framework\.NETFramework\v4.7.1\System.dll" /r:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NET</div><div class="line">  Framework\v4.7.1\System.Net.Http.dll" /r:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramewo</div><div class="line">  rk\v4.7.1\System.Xaml.dll" /r:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\S</div><div class="line">  ystem.Xml.dll" /r:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Xml.Li</div><div class="line">  nq.dll" /r:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\WindowsBase.dll" /co</div><div class="line">  mpile Properties\Resources.resx,obj\Debug\WpfApp1.Properties.Resources.resources</div><div class="line">  Processing resource file "Properties\Resources.resx" into "obj\Debug\WpfApp1.Properties.Resources.resources".</div><div class="line">CoreCompile:</div><div class="line">  C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\bin\Roslyn\csc.exe /noconfig /nowarn:1701,</div><div class="line">  1702 /nostdlib+ /platform:anycpu32bitpreferred /errorreport:prompt /warn:4 /define:DEBUG;TRACE /highentropyva+ /refer</div><div class="line">  ence:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\Microsoft.CSharp.dll" /ref</div><div class="line">  erence:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\mscorlib.dll" /reference</div><div class="line">  :"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\PresentationCore.dll" /referen</div><div class="line">  ce:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\PresentationFramework.dll" /</div><div class="line">  reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Core.dll" /ref</div><div class="line">  erence:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Data.DataSetExten</div><div class="line">  sions.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Da</div><div class="line">  ta.dll" /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.dll"</div><div class="line">  /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Net.Http.dll"</div><div class="line">   /reference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Xaml.dll" /r</div><div class="line">  eference:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Xml.dll" /refer</div><div class="line">  ence:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\System.Xml.Linq.dll" /refe</div><div class="line">  rence:"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.1\WindowsBase.dll" /debug+</div><div class="line">  /debug:full /filealign:512 /optimize- /out:obj\Debug\WpfApp1.exe /ruleset:"C:\Program Files (x86)\Microsoft Visual St</div><div class="line">  udio\2017\Community\Team Tools\Static Analysis Tools\\Rule Sets\MinimumRecommendedRules.ruleset" /subsystemversion:6.</div><div class="line">  00 /resource:obj\Debug\WpfApp1.g.resources /resource:obj\Debug\WpfApp1.Properties.Resources.resources /target:winexe</div><div class="line">  /utf8output App.xaml.cs MainWindow.xaml.cs Properties\AssemblyInfo.cs Properties\Resources.Designer.cs Properties\Set</div><div class="line">  tings.Designer.cs C:\Users\Von\source\repos\WpfApp1\WpfApp1\obj\Debug\MainWindow.g.cs C:\Users\Von\source\repos\WpfAp</div><div class="line">  p1\WpfApp1\obj\Debug\App.g.cs "C:\Users\Von\AppData\Local\Temp\.NETFramework,Version=v4.7.1.AssemblyAttributes.cs"</div><div class="line">  Using shared compilation with compiler from directory: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\</div><div class="line">  MSBuild\15.0\bin\Roslyn</div><div class="line">_CopyAppConfigFile:</div><div class="line">  Copying file from "App.config" to "bin\Debug\WpfApp1.exe.config".</div><div class="line">CopyFilesToOutputDirectory:</div><div class="line">  Copying file from "obj\Debug\WpfApp1.exe" to "bin\Debug\WpfApp1.exe".</div><div class="line">  WpfApp1 -&gt; C:\Users\Von\source\repos\WpfApp1\WpfApp1\bin\Debug\WpfApp1.exe</div><div class="line">  Copying file from "obj\Debug\WpfApp1.pdb" to "bin\Debug\WpfApp1.pdb".</div><div class="line">Done Building Project "C:\Users\Von\source\repos\WpfApp1\WpfApp1\WpfApp1.csproj" (default targets).</div><div class="line"></div><div class="line">Done Building Project "C:\Users\Von\source\repos\WpfApp1\WpfApp1.sln" (default targets).</div><div class="line"></div><div class="line"></div><div class="line">Build succeeded.</div><div class="line">    0 Warning(s)</div><div class="line">    0 Error(s)</div><div class="line"></div><div class="line">Time Elapsed 00:00:02.60</div></pre></td></tr></table></figure></p>
<p>看看CoreCompile里传给Roslyn的参数。自己调用Roslyn的话光给出正确的参数就让人头痛了。所以还是直接调用MSBuild好了。<br>单单调用一次MSBuild无法完成我们的需求，因此构建脚本是少不了的了。</p>
<h3 id="找到MSBuild"><a href="#找到MSBuild" class="headerlink" title="找到MSBuild"></a>找到MSBuild</h3><p>首先在`Developer command prompt for VS 2017找到MSbuiid的完全路径:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ where msbuild</div><div class="line">&gt; C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\MSBuild.exe</div><div class="line">&gt; C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe</div></pre></td></tr></table></figure></p>
<p>这里需要的是Visual Studio目录下的那一个。</p>
<h3 id="MSBuild的命令行选项"><a href="#MSBuild的命令行选项" class="headerlink" title="MSBuild的命令行选项"></a>MSBuild的命令行选项</h3><ul>
<li><p><code>/t:Rebuild</code><br>强制重新编译。</p>
</li>
<li><p><code>/p:Configuration=RELEASE</code><br>以Release配置编译。会开启优化。</p>
</li>
<li><p><code>/p:DefineConstants=&quot;Value1,Value2,...&quot;</code><br>定义条件编译常量。</p>
</li>
<li><p><code>/p:Platform=</code><br> 指定目标架构。x86,x64和AnyCpu三选一。</p>
</li>
<li><code>/p:OutputPath</code><br>输出目录。可接受绝对和相对路径。</li>
</ul>
<p>各个参数中间用空格分开。</p>
<p>一个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msbuild WpfApp1.csproj /t:Rebuild /p:Configuration=RELEASE /p:DefineConstants=&quot;TRACE,DEMO&quot; /p:Platform=&quot;x86&quot;  /p:OutputPath=&quot;F:\Release&quot; /p:TargetFrameworkVersion=4.7.1 /tv:15.0</div></pre></td></tr></table></figure></p>
<p>更多参数请参阅<a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-reference?view=vs-2017" title="MSBuild command-line reference" target="_blank" rel="external">这里</a></p>
<hr>
<p>能配好参数调用MSBuild是构建脚本中最重要的一步。至于需求里的其他要求没什么难度，无非用合适的控制流去调用MSBuild。这里就略过了。</p>
<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><h3 id="部分参数无效"><a href="#部分参数无效" class="headerlink" title="部分参数无效"></a>部分参数无效</h3><p>如果你发现你设置的部分参数无效，那可能是被因为项目文件的参数覆盖掉了。<br>为了少掉坑，请将项目文件的路径放作为给MSBuild的第一个参数。</p>
<h3 id="C-工程指定输出目录无效"><a href="#C-工程指定输出目录无效" class="headerlink" title="C++工程指定输出目录无效"></a>C++工程指定输出目录无效</h3><p>配好<code>/p:Platform</code>后MSbuild会提示你用<code>/p:OutputPath</code>指定输出路径。<br>如果你用了<code>OutputPath</code>，那么恭喜你掉进了微软挖的暗坑：<code>OutputPath</code>对C++项目无效。<br>解决方法：请使用使用<code>/p:OutputDir</code>指定输出目录<br>原因：</p>
<blockquote>
<p>To expand on what @AndyGerlicher said, we can’t do what you’re asking because we too have lost the reasoning behind this decision. The current team thinks it looks pretty broken.</p>
<p>From comments in the targets</p>
<blockquote>
<p>OutDir and OutputPath are distinguished for legacy reasons, and OutDir should be used if at all possible.</p>
</blockquote>
<p>It seems like we got stuck in the middle of a transition. However, as you’ve discovered, there’s a ton of MSBuild code out there that exploits the differences between the two variables. That keeps us from completing the transition (or for that matter backing it out), because it would cause a lot of churn in customer projects.</p>
</blockquote>
<p>更多详情请参阅<a href="https://github.com/Microsoft/msbuild/issues/87" title="OutputPath vs OutDir" target="_blank" rel="external">这里</a></p>
<h3 id="C-工程DefineConstants无效"><a href="#C-工程DefineConstants无效" class="headerlink" title="C++工程DefineConstants无效"></a>C++工程DefineConstants无效</h3><p>喜闻乐见的<q>legacy reasons</q></p>
<p>比较简单的一个workaround</p>
<p>在<code>.vcxproj</code>的<code>Label</code>为Global的<code>PropertyGroup</code>中加上<br><code>&lt;DefineConstants&gt;&lt;/DefineConstants&gt;</code></p>
<p>在所有的<code>PreprocessorDefinitions</code>内容的开头添加<code>$(DefineConstants);</code></p>
<p>最终结果如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">DefaultTargets</span>=<span class="string">"Build"</span> <span class="attr">ToolsVersion</span>=<span class="string">"14.0"</span> </span></div><div class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/developer/msbuild/2003"</span>&gt;</span></div><div class="line">    .....</div><div class="line">    <span class="tag">&lt;<span class="name">PropertyGroup</span> <span class="attr">Label</span>=<span class="string">"Global"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">DefineConstants</span>&gt;</span><span class="tag">&lt;/<span class="name">DefineConstants</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></div><div class="line">    ......</div><div class="line">    <span class="tag">&lt;<span class="name">ItemDefinitionGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ClCompile</span>&gt;</span></div><div class="line">        ....</div><div class="line">        <span class="tag">&lt;<span class="name">PreprocessorDefinitions</span>&gt;</span>$(DefineConstants);NDEBUG;WIN32;_WINDOWS;NO_EXP10;_CRT_SECURE_NO_WARNINGS;%(PreprocessorDefinitions);<span class="tag">&lt;/<span class="name">PreprocessorDefinitions</span>&gt;</span></div><div class="line">        ....</div><div class="line">        <span class="tag">&lt;/<span class="name">ClCompile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ItemDefinitionGroup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>更多详情请参阅<a href="https://stackoverflow.com/a/29879657" title="MSBuild.exe not accepting either /p:DefineConstants nor /p:PreprocessorDefinitions" target="_blank" rel="external">这里</a></p>
<h2 id="对PowerShell的吐槽"><a href="#对PowerShell的吐槽" class="headerlink" title="对PowerShell的吐槽"></a>对PowerShell的吐槽</h2><p>本以为基于.NET对象的PowerShell挺好上手的。没想到由JSON反序列化出来的对象是<code>PSObject</code>类型，原来类里的方法都用不了了，想把<code>PSObject</code>转换回去也十分麻烦。可能Shell天生跟OOP合不来吧。<br>最后用C#写了构建脚本。C#，脚本，是不是哪里不太对啊🤔</p>
]]></content>
      
        
        <tags>
            
            <tag> MSBuild </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Build a (partial) self-contained WPF application]]></title>
      <url>/2018/07/31/self-contained-wpf-application/</url>
      <content type="html"><![CDATA[<h2 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h2><p>新事物的产生总是与老事物有千丝万缕的联系。或是从中得到启发，或是对其全面改良。新事物的源头通常可以追溯到很久远的一些概念上。因此有了「站在巨人的肩膀上」 这样的说法。在程序设计里面，「巨人们的肩膀」 就是我们的应用程序使用的库了。踩在这些「巨人」们的肩膀上我们的程序才得以重见天日；为了实现一个库，有时候会使用到其他的库。我们所依赖的「巨人」又踩在了其他「巨人」的肩膀上，把依赖关系变成了树状结构，我们的程序处在根节点。</p>
<p>扯远了:)</p>
<a id="more"></a>
<p>开发的时候有包管理工具帮我们管理依赖，而到了分发的时候，需要一个容器把我们的程序和它的依赖项一起分发。这就需要用到安装程序。最终用户只要拿到安装程序，运行安装，由安装程序去操心依赖项到底应该放在哪。</p>
<p>人是懒惰的动物，从用户发现软件到真正用上软件之间，每多一个步骤都会让损失一批潜在用户。而现在随着手机的流行，用户已经不想安装了。他们只想下载「软件」，双击就能直接运行。至于什么安装路径，UAC权限之类的用户才不想操心呢。</p>
<p>这就要求我们的程序要将安装这个过程隐藏起来。在用户看不到的情况下部署自己的依赖项。这样的程序在英文里被称为 self-contained</p>
<blockquote>
<p>self-contained<br><em>adjective</em></p>
<ul>
<li>(of a thing) complete, or having all that is needed, in itself.</li>
<li>(of a person) quiet and independent; not depending on or influenced by others.</li>
</ul>
</blockquote>
<p>这几天我们也有了将最终程序self-contain化的需求。终于可以合理的抛弃MFC写的Installer了😁</p>
<h2 id="Self-contained-in-NET"><a href="#Self-contained-in-NET" class="headerlink" title="Self-contained in .NET"></a>Self-contained in .NET</h2><p>.NET在设计之初只是想提高Windows程序员的开发效率，顺便解决一下<a href="https://en.wikipedia.org/wiki/DLL_Hell" target="_blank" rel="external">DLL Hell</a>。至于应用分发根本就不再日程上。就算真的考虑过，也一定会采用动态链接的方式。因为<a href="https://en.wikipedia.org/wiki/.NET_Framework_version_history" target="_blank" rel="external">当时</a>的硬盘还是很贵滴。</p>
<p>总之，.NET就这样决定采用动态链接了。.NET里的几个基本概念也都与动态链接脱不开关系：</p>
<p><a href="https://en.wikipedia.org/wiki/Assembly_(CLI" target="_blank" rel="external">程序集</a>)是.NET世界里最常见的分发单元。程序集有独立的版本号。在引用其他程序集的时候，需要显式指明对应的版本。这样，相同名字不同版本的程序集就可以被区别开，以此为基础就解决Dll hell的问题。CLR在运行的时候以一套<a href="https://docs.microsoft.com/en-us/dotnet/framework/deployment/how-the-runtime-locates-assemblies" target="_blank" rel="external">复杂的规则</a>试图加载程序的依赖项。</p>
<p>看起来似乎.NET与静态链接无缘了。不过也有好消息，在Build 2018开发者大会上，微软<a href="https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/" target="_blank" rel="external">宣布</a>现有的桌面程序可以在明年推出的.Net core 3上选择与运行时静态链接在一起，将整个程序变为单一的可执行文件。</p>
<blockquote>
<p>Side-by-side and App-local Deployment</p>
<p>For cases where the maximum isolation is required, you can deploy .NET Core with your  application. We’re working on new build tools that will bundle your app and .NET Core  together as in a single executable, as a new option.</p>
<p><strong>We’ve had requests for deployment options like this for many years, but were never able to deliver those with the .NET Framework. The much more modular architecture used by .NET Core makes these flexible deployment options possible.</strong></p>
</blockquote>
<p>.Net Core 3.0的推出时间是明年，我们显然不能等到那个时候。为了实现需求，先向搜索引擎求助吧。</p>
<h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p>静态链接将依赖项打包进我们的程序，生成单一的二进制文件。这是个很直观的切入点。以<code>C# static link</code>为关键词，发现有几个同类型的工具。例如<a href="https://github.com/Microsoft/ILMerge" target="_blank" rel="external">ILMerge</a>。在.NET的世界中，源代码经过编译后产生的程序集里存储的并不是机器代码而是一种叫<a href="https://en.wikipedia.org/wiki/Common_Intermediate_Language" target="_blank" rel="external">MSIL</a>的中间代码。程序集由CLR加载后被JIT即时编译为机器码。</p>
<p>ILMerge之类的工具工作在IL层面。它们将不同程序集的IL代码粘合起来，生成单一的程序集。</p>
<p>听起来是不是很美好？如果你写个小demo的话会发现确实很好用。但是ILMerge无法对WPF中的XAML资源进行改写。程序挂在运行时。</p>
<h3 id="内嵌资源"><a href="#内嵌资源" class="headerlink" title="内嵌资源"></a>内嵌资源</h3><p>.NET中的程序集有资源的概念。任何文件都能以资源的形式嵌入进程序集。另一个思路是是把依赖项当作资源嵌进我们的主程序。只要能在运行时把它们暴露给CLR，就能实现self-contain。<br>先来看看API：</p>
<ul>
<li><code>Assembly.GetManifestResourceStream(string name)</code>:</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Loads the specified manifest resource from this assembly.</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> System.IO.<span class="function">Stream <span class="title">GetManifestResourceStream</span> (<span class="params">Type type, <span class="keyword">string</span> name</span>)</span></div></pre></td></tr></table></figure>
<ul>
<li><code>AppDomain.Load(Byte[])</code>:</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Loads the Assembly with a common object file format (COFF) based image containing an emitted Assembly.</span></div><div class="line"><span class="keyword">public</span> System.Reflection.<span class="function">Assembly <span class="title">Load</span> (<span class="params"><span class="keyword">byte</span>[] rawAssembly</span>)</span>;</div></pre></td></tr></table></figure>
<ul>
<li><code>AppDomain.AssemblyResolve</code></li>
</ul>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Occurs when the resolution of an assembly fails.</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">event</span> ResolveEventHandler AssemblyResolve;</div></pre></td></tr></table></figure>
<p>我们把依赖项嵌入到程序内部后，CLR找不到引用的程序集的时候就会触发<code>AppDomain.AssemblyResolve</code>事件。我们可以在这里拿到依赖的<code>AssemblyName</code>,<code>Assembly.GetManifestResourceStream(string name)</code>得到包含依赖项的的<code>stream</code>，把<code>stream</code>的内容读出来放到<code>byte[]</code>里，调用<code>AppDomain.Load(Byte[])</code>将程序集加载。</p>
<p>大致过程走得通，不过有点麻烦。hardcode依赖的名字后，以后添加新依赖项还要更改hardcode的名字。毕竟程序员也是人，也想偷懒。这些活最好自动化。要是能和VS里的编译结合起来就更好了🤤</p>
<p>你别说，还真有这样的工具。<a href="https://github.com/Fody/Fody" target="_blank" rel="external">Fody</a>可以对.NET程序集做多种操作。<a href="https://github.com/Fody/Costura/" target="_blank" rel="external">Costura</a>是Fody的一个扩展，专门用来将依赖嵌入成资源。Fody与VS的完美集成，编译完成后自动开始操作。<br>Nuget安装完Fody和Costura后，如果解决方案根路径下没有<code>FodyWeavers.xml</code>则新建它。把内容替换为</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Weavers</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Costura</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Weavers</span>&gt;</span>`</div></pre></td></tr></table></figure>
<p>就完事了。太易用了。我做了测试，WPF和控制台应用都可以。看文档，它还支持.NET Core。</p>
<h2 id="Dependencies-of-my-dependencies-is-not-my-dependencies"><a href="#Dependencies-of-my-dependencies-is-not-my-dependencies" class="headerlink" title="Dependencies of my dependencies, is not my dependencies"></a>Dependencies of my dependencies, is not my dependencies</h2><p>ILMerge也好，Fody也好，它们解决的都是应用程序所依赖库的问题。而我们的程序之所以叫.NET程序，是因为它依赖.NET Framework。如果要做到fully-self-contained的话，我们还需要把.NET Framework也塞进去。这就意味这我们需要一个不依赖.NET Framework的程序来释放.NET Framework和我们的应用程序。这其实就是重新发明安装程序了。退一步说，就算我们真的把.NET Framework打包进去了，因为.NET Framework的安装过程比较耗时，用户在点了按钮后几秒钟如果UI还没出来可能会认为我们的程序有问题。因此，把程序和.NET Framework一起分发的事情就交给愿意折腾的同学们了。我还是期待下.NET Core 3.0吧。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你的程序是WPF程序，请使用Fody.Costura；</p>
<p>如果你的程序不是WPF程序，那么可以任选ILMerge和Fody.Costura的一个。</p>
<p>如果你的程序需要与.NET Framework一起分发，请在处理主程序后使用支持静默安装的Installer将主程序与.NET运行时一起打包。</p>
<p><del>或者等.Net Core 3.0发布</del></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><p><a href="https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/" target="_blank" rel="external">.Net Core 3.0 - blogs.msdn.microsoft.com</a></p>
</li>
<li><p><a href="https://docs.microsoft.com/en-us/dotnet/framework/deployment/how-the-runtime-locates-assemblies" target="_blank" rel="external">How the Runtime Locates Assemblies - docs.microsoft.com</a></p>
</li>
<li><p><a href="https://github.com/Fody/Fody" target="_blank" rel="external">Fody - github.com</a></p>
</li>
<li><p><a href="https://github.com/Fody/Costura/" target="_blank" rel="external">Costura - github.com</a></p>
</li>
<li><p><a href="https://docs.microsoft.com/en-us/dotnet/framework/deployment/deployment-guide-for-developers#chaining" target="_blank" rel="external">.NET Framework deployment guide for developers - docs.microsoft.com</a></p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> WPF </tag>
            
            <tag> .Net Framework </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[引用类型的开销]]></title>
      <url>/2018/07/19/overhead-of-reference-types/</url>
      <content type="html"><![CDATA[<h2 id="值类型与引用类型"><a href="#值类型与引用类型" class="headerlink" title="值类型与引用类型"></a>值类型与引用类型</h2><p>C#中的类型分为引用类型和值类型。使用<code>struct</code>或<code>enum</code>关键字修饰的类型定义是值类型，使用<code>class</code>或<code>delegate</code>关键字修饰的类型是引用类型。引用类型和值类型各有限制，分别适用于不同的场景。不同于C++，C#中的值类型只能分配在栈上*1，引用类型只能分配在GC堆上。C#中的GC是精确式GC，这就对GC堆上的指针有了一些要求。这是引用类型有开销的原因之一。</p>
<h2 id="Sync-block-index-与-Type-object-pointer"><a href="#Sync-block-index-与-Type-object-pointer" class="headerlink" title="Sync block index 与 Type object pointer"></a>Sync block index 与 Type object pointer</h2><p>读过C# vir CLR的同学会知道，引用类型的开销是Sync blockindex和Type object pointer。他们的长度是都是一个字长。即在32位CLR上是4字节，在64位CLR上是8字节。Sync block index在CLR中是用于实现<code>lock</code>,<code>Monitor</code>等线程同步原语，Type object pointer是指向当前对象运行时类型信息的一个指针。Sync block index与Type object pointer只在CLR层面存在，对C#程序来说是透明的。但是CLR将它们暴封装后露C#，例如线程同步原语和反射API。</p>
<a id="more"></a>
<h2 id="特殊的类型-数组"><a href="#特殊的类型-数组" class="headerlink" title="特殊的类型-数组"></a>特殊的类型-数组</h2><p>C#中绝大部分类型的大小在编译期就可以确定，只要把对应的成员的大小相加即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SizeOf(T) = T.GetFields.Select(f=&gt;f.IsClass?WordSize:Sizeof(f)).Sum();</div></pre></td></tr></table></figure></p>
<p>数组是个很特殊的存在，特殊在它的大小是与元素的类型和数量有关。数组的内存布局包含了所有的元素。(另一个这样的类型是<code>string</code>)。<code>byte[4]</code>和<code>byte[3]</code>的类型都是<code>byte[]</code>，然而它们的大小却不一样。我们这次就好仔细观察下数组</p>
<h2 id="使用WinDBG"><a href="#使用WinDBG" class="headerlink" title="使用WinDBG"></a>使用WinDBG</h2><p>WinDBG是Windows下常用的Debugger。虽然是以调试非托管代码设计，但是加上相关的插件以后也可以用来调试托管代码。SOS.dll是一个提供托管代码调试支持的的插件。它同时支持CLR和CoreCLR。</p>
<p>安装好WinDBG后，就可以开始调试了。简单起见，这里使用如下代码。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">SOSFromEE</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">int</span> Length = <span class="number">10</span>;</div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">var</span> ints = Enumerable.Range(<span class="number">1</span>, Length).ToArray();</div><div class="line">            <span class="keyword">var</span> strs = ints.Select(i =&gt; i.ToString()).ToArray();</div><div class="line">            Console.ReadLine();</div><div class="line">            GC.KeepAlive(ints);</div><div class="line">            GC.KeepAlive(strs);</div><div class="line">            Console.Read();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在WinDBG中选择Launch对应的可执行程序即可。<br>在第一个断点时CLR还没有加载，我们继续让程序运行，等到不再出现ModLoad相关的提示时就可以让程序暂停了。<br>我们在这时加载SOS扩展。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.loadby sos CLRNameHere</div></pre></td></tr></table></figure>
<p>sos后跟的是CLR的名称</p>
<ul>
<li><p>CLR2.0(.Net framework 3.5及以前)是mscorwks</p>
</li>
<li><p>CLR4.0(.Net framework 4.0及以后)是clr</p>
</li>
<li><p>.net core是 coreclr</p>
</li>
</ul>
<p>加载模块的过程中需要从微软的服务器上下载相关的pdb文件。由于你懂的原因需要很长时间</p>
<h2 id="CLR2-0-下的数组"><a href="#CLR2-0-下的数组" class="headerlink" title="CLR2.0 下的数组"></a>CLR2.0 下的数组</h2><p>我们首先在32位的CLR2.0下观察。</p>
<p>首先使用<code>.loadby sos mscorwks</code>加载<code>SOS</code>扩展模块。</p>
<p><code>!dumpheap -type TypeNameHere</code>命令可以查看当前托管堆上类型名为<code>TypeNameHere</code>的对象。</p>
<h3 id="System-String"><a href="#System-String" class="headerlink" title="System.String[]"></a><code>System.String[]</code></h3><p>我们先看看<code>String[]</code>都有哪些:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumpheap -type System.String[]</div><div class="line"></div><div class="line"> Address       MT     Size</div><div class="line">03591390 78ae46e4       80     </div><div class="line">..........................</div><div class="line">total 17 objects</div><div class="line">Statistics:</div><div class="line">      MT    Count    TotalSize Class Name</div><div class="line">78ae46e4       17          676 System.Object[]</div><div class="line">Total 17 objects</div></pre></td></tr></table></figure>
<p><code>Address</code>显示的是对象在托管堆中的地址，<code>Method Table</code>就是上文中说的Type object pointer了。</p>
<p>我们查看下位于地址<code>03591390</code>的<code>String[]</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumparray 03591390</div><div class="line"></div><div class="line">Name: System.String[]</div><div class="line">MethodTable: 78ae46e4</div><div class="line">EEClass: 788cda74</div><div class="line">Size: 80(0x50) bytes</div><div class="line">Array: Rank 1, Number of elements 16, Type CLASS</div><div class="line">Element Methodtable: 78b10f14</div><div class="line">[0] 035911c8</div><div class="line">[1] 03591250</div><div class="line">[2] null</div><div class="line">[3] null</div><div class="line">[4] null</div><div class="line">[5] null</div><div class="line">[6] null</div><div class="line">[7] null</div><div class="line">[8] null</div><div class="line">[9] null</div><div class="line">[10] null</div><div class="line">[11] null</div><div class="line">[12] null</div><div class="line">[13] null</div><div class="line">[14] null</div><div class="line">[15] null</div></pre></td></tr></table></figure></p>
<p>可以看到这个数组一共有16个元素，元素的类型是<code>string</code>。</p>
<p>我们再来看看<code>03591390</code>位置的内存布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0:006&gt; dd 03591390 -0x4</div><div class="line"></div><div class="line">0359138c  00000000 78ae46e4 00000010 78b10f14</div><div class="line">0359139c  035911c8 03591250 00000000 00000000</div><div class="line">035913ac  00000000 00000000 00000000 00000000</div><div class="line">035913bc  00000000 00000000 00000000 00000000</div><div class="line">035913cc  00000000 00000000 00000000 00000000</div></pre></td></tr></table></figure>
<p><code>dd 03591390 -0x4</code>告诉WinDBG从<code>03591390</code>向前偏移4个字节的位置开始展示内存。之所以向前偏移4个字节是为了展示引用类型的开销。<code>0359138c</code>位置的值<code>00000000</code>是Sync block index，位于<code>03591390</code>的<code>78ae46e4</code>看起来有点摸不着头脑，在WinDBG的输出中查找后发现是<code>System.String[]</code>的<code>MethodTable</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Name: System.String[]</div><div class="line">MethodTable: 78ae46e4</div></pre></td></tr></table></figure></p>
<p><code>MethodTable</code>是CLR级别的概念，对应到这里就是Type Object Pointer。<br>GC堆上的对象往前偏４字节就能得到Sync block index，接下来是对象的Type object pointer。为了叙述方便，下文统称为对象头:)</p>
<p>由此推测，对象头长度是两个字长。起始位置为当前指针的位置往前偏移一个字长。有兴趣的同学可以在64位CLR上自行验证。</p>
<p>数组的长度是16(0x10)，地址<code>03591395</code>的值就是它。</p>
<p>地址<code>03591388</code>的<code>78b10f14</code>不知道是什么。没关系，CTRF+F查找后发现它在上文出现过。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Element Methodtable: 78b10f14</div></pre></td></tr></table></figure>
<p>应该是<code>String</code>的<code>Method table</code>。</p>
<p><code>dump</code>一下<code>System.String</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumpheap -type System.String</div><div class="line"></div><div class="line">      MT    Count    TotalSize Class Name</div><div class="line">78b10f14      154         6224 System.String</div></pre></td></tr></table></figure></p>
<p>看来猜得没错。总结一下，引用类型的数组有4字长的开销，分别是2字长的对象头，1字长的长度，1字长的元素类型指针</p>
<p>接下来看看值类型数组的布局</p>
<h3 id="System-Int32"><a href="#System-Int32" class="headerlink" title="System.Int32[]"></a><code>System.Int32[]</code></h3><p>老样子，首先先找到堆上的<code>Int32[]</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumpheap -type System.Int32[]</div><div class="line"> Address       MT     Size</div><div class="line">03591e50 78b130b0      296     </div><div class="line">................................</div><div class="line">total 18 objects</div><div class="line">Statistics:</div><div class="line">      MT    Count    TotalSize Class Name</div><div class="line">78b130b0       18         1440 System.Int32[]</div><div class="line">Total 18 objects</div></pre></td></tr></table></figure>
<p>dump一下相关属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">!dumparray 03591e50 </div><div class="line">Name: System.Int32[]</div><div class="line">MethodTable: 78b130b0</div><div class="line">EEClass: 788ce6a8</div><div class="line">Size: 296(0x128) bytes</div><div class="line">Array: Rank 1, Number of elements 71, Type Int32</div><div class="line">Element Methodtable: 78b13160</div></pre></td></tr></table></figure>
<p>查看内存布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0:006&gt; dd 03591e50 -0x4</div><div class="line">03591e4c  00000000 78b130b0 00000047 00000000</div><div class="line">03591e5c  00000000 00000000 00000000 00000000</div><div class="line">03591e6c  00000000 00000000 00000000 00000000</div><div class="line">03591e7c  00000000 00000000 00000000 00000000</div><div class="line">03591e8c  00000000 00000000 00000000 00000000</div><div class="line">03591e9c  00000000 00000000 00000000 00000000</div><div class="line">03591eac  00000000 00000000 00000000 00000000</div><div class="line">03591ebc  00000000 00000000 00000000 00000000</div></pre></td></tr></table></figure>
<p>首先<code>Int32[]</code>也有对象头和长度的开销，但是却没有元素类型指针的开销。</p>
<p>有心的同学可能已经发现了，<code>Int32[]</code>明确指出了元素的类型，而<code>String[]</code>却没有。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">!dumparray 03591390</div><div class="line">Name: System.String[]</div><div class="line">MethodTable: 78ae46e4</div><div class="line">EEClass: 788cda74</div><div class="line">Size: 80(0x50) bytes</div><div class="line">Array: Rank 1, Number of elements 16, Type *CLASS*</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">!dumparray 03591e50 </div><div class="line">Name: System.Int32[]</div><div class="line">MethodTable: 78b130b0</div><div class="line">EEClass: 788ce6a8</div><div class="line">Size: 296(0x128) bytes</div><div class="line">Array: Rank 1, Number of elements 71, Type *Int32*</div></pre></td></tr></table></figure>
<p><code>String[]</code>的<code>Type</code>是个<code>CLASS</code>而不是<code>String</code>，难道说System.String[]是个’假的’的字符串数组？</p>
<p>….</p>
<p>….</p>
<p>….</p>
<p>恭喜你猜对了。<br>使用<code>!objsize</code>命令发现<code>String[]</code>是个带了层皮的<code>Object[]</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">!objsize 03591e50 </div><div class="line">sizeof(03591e50) =          296 (       0x128) bytes (System.Int32[])</div><div class="line">0:006&gt; !objsize 03591390 </div><div class="line">sizeof(03591390) =          392 (       0x188) bytes (System.Object[])</div></pre></td></tr></table></figure></p>
<p>C# in depth中对泛型有这样的描述 </p>
<blockquote>
<p>对于一个泛型类<code>MyGeneric&lt;T&gt;</code>，对于<code>T</code>的是引用类型的情况，JIT只会为其生成一份代码;对于<code>T</code>是值类型的情况，则为每一个不同的<code>T</code>生成各自的代码。其中的原因是，在JIT运行时，指针的长度总是固定的，因而可以共用一套代码相同的代码。而值类型的长度是不确定的，因此需要为每个值类型单独生成代码。</p>
</blockquote>
<p>这里可能也是相同的原因吧。指针的长度相同，因而才需要储存元素的类型指针，实现类型检查。而值类型的代码不共用，所以不需要储存元素的类型指针。</p>
<p>本来到已经可以结束了，可是我在32位的CLR4.0观察到的结果却不太一样。</p>
<h2 id="CLR-4-0下的数组"><a href="#CLR-4-0下的数组" class="headerlink" title="CLR 4.0下的数组"></a>CLR 4.0下的数组</h2><p>与CLR 2.0不同，CLR 4.0下加载<code>SOS</code>的名字是clr</p>
<p><code>.loadby sos clr</code></p>
<h3 id="System-String-1"><a href="#System-String-1" class="headerlink" title="System.String[]"></a><code>System.String[]</code></h3><p>首先<code>dumpheap</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumpheap -type System.String[]</div><div class="line"> Address       MT     Size</div><div class="line">02531590 6979dfe0       84     </div><div class="line">...........................</div><div class="line">Statistics:</div><div class="line">      MT    Count    TotalSize Class Name</div><div class="line">6979dfe0       24          912 System.String[]</div><div class="line">Total 24 objects</div></pre></td></tr></table></figure>
<p>然后是<code>dumparray</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Name:        System.String[]</div><div class="line">MethodTable: 6979dfe0</div><div class="line">EEClass:     69374b80</div><div class="line">Size:        84(0x54) bytes</div><div class="line">Array:       Rank 1, Number of elements 18, Type CLASS</div><div class="line">Element Methodtable: 6979d488</div><div class="line">[0] 02531254</div></pre></td></tr></table></figure></p>
<p>最后<code>dd</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0:006&gt; dd 02531590 -0x4</div><div class="line">0253158c  00000000 6979dfe0 00000012 02531254</div><div class="line">0253159c  025312d8 00000000 00000000 02531568</div><div class="line">025315ac  00000000 00000000 00000000 00000000</div><div class="line">025315bc  00000000 00000000 00000000 00000000</div><div class="line">025315cc  00000000 00000000 00000000 00000000</div><div class="line">025315dc  00000000 00000000</div></pre></td></tr></table></figure></p>
<p>位于<code>02531598</code>的值<code>02531254</code>是第一个元素的值而不是<code>String</code>的<code>Method Table</code>!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">!dumpheap -type String</div><div class="line">Statistics:</div><div class="line">      MT    Count    TotalSize Class Name</div><div class="line">6979d488      193         5932 System.String</div><div class="line">Total 224 objects</div></pre></td></tr></table></figure></p>
<p>CLR 4.0把<code>Method Table</code>去掉了？</p>
<p>经过简单的算术，确实是这样的<br>18个元素，占据空间18*4=72。</p>
<p>对象头和数组大小占据2*4+4=12</p>
<p>84=72+12，跟<code>dumparray</code>出来的值一样。(有兴趣的同学根据上文中CLR2.0的数据计算下)</p>
<p><code>!objsize</code>也确认了我们的猜测<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !objsize 02531590</div><div class="line">sizeof(02531590) = 428 (0x1ac) bytes (System.String[])</div></pre></td></tr></table></figure></p>
<h3 id="System-Int32-1"><a href="#System-Int32-1" class="headerlink" title="System.Int32[]"></a><code>System.Int32[]</code></h3><p><code>!dumpheap</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumpheap -type System.Int32[]</div><div class="line"> Address       MT     Size</div><div class="line">02531f1c 6979f2a0      300     </div><div class="line">.............................. </div><div class="line">Statistics:</div><div class="line">      MT    Count    TotalSize Class Name</div><div class="line">6979f2a0       20          844 System.Int32[]</div><div class="line">Total 20 objects</div></pre></td></tr></table></figure></p>
<p><code>!dumparray</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumparray 02531f1c </div><div class="line">Name:        System.Int32[]</div><div class="line">MethodTable: 6979f2a0</div><div class="line">EEClass:     693752d8</div><div class="line">Size:        300(0x12c) bytes</div><div class="line">Array:       Rank 1, Number of elements 72, Type Int32</div><div class="line">Element Methodtable: 6979f2dc</div><div class="line">[0] 02531f24</div><div class="line">[1] 02531f28</div></pre></td></tr></table></figure></p>
<p><code>dd</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0:006&gt; dd 02531f1c -0x4</div><div class="line">02531f18  00000000 6979f2a0 00000048 00000003</div><div class="line">02531f28  00000007 0000000b 00000011 00000017</div><div class="line">02531f38  0000001d 00000025 0000002f 0000003b</div><div class="line">02531f48  00000047 00000059 0000006b 00000083</div><div class="line">02531f58  000000a3 000000c5 000000ef 00000125</div><div class="line">02531f68  00000161 000001af 00000209 00000277</div><div class="line">02531f78  000002f9 00000397 0000044f 0000052f</div><div class="line">02531f88  0000063d 0000078b 0000091d 00000af1</div></pre></td></tr></table></figure></p>
<p>值类型数组倒是没有什么变化。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>C#中引用类型有2个字长的对象头开销。分别是Sync block index和Type Object Pointer。数组是特殊的类型，它的大小与包含的元素相关，因此具有额外的开销。</p>
<ul>
<li><p>在CLR 2.0下</p>
<ul>
<li>引用类型的数组包含额外的2字长的开销。分别是长度和元素的类型指针</li>
<li>值类型的数组包含长度的额外开销开销。大小是一个字长。</li>
</ul>
</li>
<li><p>在CLR 4.0和CoreCLR中</p>
<ul>
<li>引用类型和值类型的数组包含长度的额外开销开销。大小是一个字长。</li>
</ul>
</li>
</ul>
<p>限于篇幅，CoreCLR的情况不再赘述，还请读者自行验证。</p>
<p>/*其实本来看到Stackoverflow的回答只是想自己验证下的，但是自己动手的结果和答案里提到的不太一样，查了原因发现答案里用的是CLR2.0，我自己用的是CLR4.0。这就挖出来了CLR实现的更改。CoreCLR里使用的是CLR4.0里的规则。目前还不清楚MS为何要改实现*/</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://stackoverflow.com/questions/1589669/overhead-of-a-net-array" target="_blank" rel="external">Overhead of a .NET array?</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension" target="_blank" rel="external">SOS.dll (SOS Debugging Extension)</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> reference type </tag>
            
            <tag> overhead </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向抽象编程]]></title>
      <url>/2018/07/12/program-upon-abstractions/</url>
      <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>说来惭愧，直到近几天才明白了一点面向对象设计的。给我带来启发的是<a href="https://en.wikipedia.org/wiki/SOLID" target="_blank" rel="external"><strong>SOLID</strong></a>中的D，它代表Dependency Inversion（依赖反转）。尽管写/背定义很无聊，但我还是想写一下依赖反转的核心</p>
<blockquote>
<p>上层模块不应该依赖下层模块，他们都应该依赖抽象</p>
</blockquote>
<h1 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap, show me the code"></a>Talk is cheap, show me the code</h1><p>最近在写一个音乐电台应用，采用服务端、客户端的方式实现。在服务端，用户可以指定一个路径，程序根据这个路径生成播放列表。</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>服务器是一个一旦开起来就不会轻易关闭的程序，我希望播放列表能够自动刷新。这样当用户添加或删除了某首音乐后不用重启服务器就可以反映变化。考虑到易用性，应该支持由路径直接生成播放列表。歌曲是有封面等其他信息的，要满足这些信息的可定制化，程序也支持由配置文件指定的播放列表。<br><a id="more"></a></p>
<h2 id="现有代码"><a href="#现有代码" class="headerlink" title="现有代码"></a>现有代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">internal class PlaylistManager</div><div class="line">&#123;</div><div class="line">    public IReadonlyList&lt;Song&gt; AllSong =&gt; _backLogs.AsReadOnly();</div><div class="line">    private readonly List&lt;Song&gt; _backLogs;</div><div class="line">    public PlaylistManager(IEnumerable&lt;Song&gt; backlog)</div><div class="line">    &#123;</div><div class="line">        _backLogs = new List&lt;Song&gt;(backlog);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现有代码中构造函数的IEnumerable\<song\>参数指定了播放列表，可是刷新却需要外部的支持：基于路径的刷新和基于配置文件的刷新是完全不一样的。我完全可以把这两个刷新都放到<code>PlaylistManager</code>里，根据生成播放列表的类型决定调用那个版本。这样就把<code>PlaylistManager</code>完全和列表生成的逻辑绑死在一起了，如果以后要在加一个新的生成方式就还要修改<code>PlaylistManager</code>的代码，尽管它跟<code>PlaylistManager</code>并无关系</song\></p>
<h2 id="修改思路"><a href="#修改思路" class="headerlink" title="修改思路"></a>修改思路</h2><p>如果我们将生成播放列表这一行为抽象为接口<code>IPlaylistProvider</code>的话，<code>PlaylistManager</code>就可以完全跟这部分逻辑分开了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public interface IPlaylistProvider</div><div class="line">&#123;</div><div class="line">    IReadonlyList&lt;Song&gt; AllSongs &#123; get; &#125;</div><div class="line">    void Refresh();</div><div class="line">&#125;</div><div class="line"></div><div class="line">internal class PlaylistManager</div><div class="line">&#123;</div><div class="line">    public IReadonlyList&lt;Song&gt; AllSong =&gt; _backLogs.AsReadOnly();</div><div class="line">    private readonly List&lt;Song&gt; _backLogs;</div><div class="line">    private readonly IPlaylistProvider _provider;</div><div class="line">    public PlaylistManager(IPlaylistProvider provider)</div><div class="line">    &#123;</div><div class="line">        _provider = provider;</div><div class="line">        _backLogs = new List&lt;Song&gt;(_provider.AllSongs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    internal void Refresh()</div><div class="line">    &#123;</div><div class="line">        Refresh();</div><div class="line">        _backLogs.Clear();</div><div class="line">        _backLogs.AddRange(_provider.AllSongs);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以分别实现基于路径和配置文件的<code>IPlaylistProvider</code></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileSystemProvider</span> : <span class="title">IPlaylistProvider</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemProvider</span>(<span class="params"><span class="keyword">string</span> path,<span class="keyword">bool</span> recursive</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!Directory.Exists(path))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$"<span class="subst">&#123;path&#125;</span> is not a directory"</span>);</div><div class="line">        &#125;</div><div class="line">        Path = path;</div><div class="line">        Recursive = recursive;</div><div class="line">        _songs = ReadSongs();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span>[] MusicExtension = <span class="keyword">new</span>[] &#123;<span class="string">".mp3"</span>,<span class="string">".wma"</span> &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;Song&gt; <span class="title">ReadSongs</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> song = <span class="keyword">new</span> List&lt;Song&gt;();</div><div class="line">        <span class="keyword">var</span> dir = <span class="keyword">new</span> DirectoryInfo(Path);</div><div class="line">        <span class="keyword">var</span> files = dir.GetFiles().Where(i =&gt; MusicExtension.Contains(i.Extension));</div><div class="line">        song.AddRange(files.Select(f =&gt; <span class="keyword">new</span> Song()</div><div class="line">        &#123;</div><div class="line">            FilePath = f.FullName,</div><div class="line">            Title = f.Name,</div><div class="line">        &#125;));</div><div class="line">        <span class="keyword">return</span> song;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> IReadOnlyList&lt;Song&gt; AllSongs =&gt; _songs.AsReadOnly();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Path &#123; <span class="keyword">get</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> Recursive &#123; <span class="keyword">get</span>; &#125;</div><div class="line">    <span class="keyword">private</span> List&lt;Song&gt; _songs;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Refresh</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        _songs = ReadSongs();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonPlaylistProvider</span> : <span class="title">IPlaylistProvider</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonPlaylistProvider</span>(<span class="params"><span class="keyword">string</span> configPath</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        _songs = ReadSongs();</div><div class="line">        ConfigPath = configPath;</div><div class="line">        <span class="keyword">if</span> (!File.Exists(ConfigPath))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$"Can't find config file at <span class="subst">&#123;ConfigPath&#125;</span>"</span>);</div><div class="line">        &#125;</div><div class="line">        ReadSongs();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;Song&gt; <span class="title">ReadSongs</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> json = File.ReadAllText(ConfigPath);</div><div class="line">        <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;List&lt;Song&gt;&gt;(json)??<span class="keyword">new</span> List&lt;Song&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Song&gt; _songs;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ConfigPath &#123; <span class="keyword">get</span>; &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> IReadOnlyList&lt;Song&gt; AllSongs =&gt; _songs.AsReadOnly();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Refresh</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        ReadSongs();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个例子中，<code>PlaylistManager</code>不依赖<code>FileSystemProvider</code>和<code>JsonPlaylistProvider</code>，它们三者都依赖于<code>IPlaylistProvider</code>这一接口。代码的可读性和可维护性相比于把刷新的逻辑放在<code>PlaylistManager</code>里高了好多</p>
<p>这里体现了依赖反转的原则：</p>
<blockquote>
<p>上层模块不应该依赖下层模块，它们都应该依赖与抽象</p>
</blockquote>
<p>我在用SOLID重构手头的项目，改的差不多的时候打算写写开发笔记。<del>咕咕咕</del></p>
]]></content>
      
        
        <tags>
            
            <tag> OOP </tag>
            
            <tag> SOLID </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次愉(dan)快(teng)的捉虫]]></title>
      <url>/2018/05/21/hell-mode-debugging/</url>
      <content type="html"><![CDATA[<h2 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h2><p>BUG是任何软件都会遇到的问题。它通常是开发人员考虑问题不全面而埋下的隐形炸弹，在条件合适的时候就会爆炸；开发自己埋BUG往往比较容易除错，因为代码都是自己写的，定位问题后<code>git blame</code>一下就可以甩锅了；而程序依赖项里的BUG则排查起来则让人一筹莫展，尤其是在没有足够多信息的情况。</p>
<p>面对来自客户和QA的压力，绞尽脑汁仍无法定位问题开发们只能找借口了🤣</p>
<ul>
<li>It’s a feature,not a bug.</li>
<li>That’s the design decision, so not a bug</li>
</ul>
<p>我以前也遇到框架出问题的情况，不过都是自己改代码改出来的，倒也不是很难排查。但这次挖出来的BUG就完全不一样了</p>
<a id="more"></a>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>一个WPF的项目，勉强在deadline之前赶完了功能。出了新版本后接到QA报告，程序在Windows 8.1上死于OOM:</p>
<blockquote>
<p>System.OutOfMemoryException: Insufficient memory to continue the execution of the program.<br>   at System.Windows.Media.MediaContext.NotifyPartitionIsZombie(Int32 failureCode)<br>   at System.Windows.Media.MediaContext.NotifyChannelMessage()<br>   at System.Windows.Interop.HwndTarget.HandleMessage(Int32 msg, IntPtr wparam, IntPtr lparam)<br>   at System.Windows.Interop.HwndSource.HwndTargetFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)<br>   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)<br>   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)<br>   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Boolean isSingleParameter)<br>   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Boolean isSingleParameter, Delegate catchHandler)<br>   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, Object args, Boolean isSingleParameter, Delegate catchHandler)<br>   at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Boolean isSingleParameter)<br>   at System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority priority, Delegate method, Object arg)<br>   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)<br>   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG&amp; msg)<br>   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)<br>   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)<br>   at System.Windows.Threading.Dispatcher.Run()</p>
</blockquote>
<h2 id="捉虫"><a href="#捉虫" class="headerlink" title="捉虫"></a>捉虫</h2><h3 id="出师不利"><a href="#出师不利" class="headerlink" title="出师不利"></a>出师不利</h3><p>程序里用自定义的<code>Window Style</code>替代了WPF自带的。但是自定义的<code>Window Style</code>在最大化的时候会<a href="https://stackoverflow.com/questions/20941443/properly-maximizing-wpf-window-with-windowstyle-none" target="_blank" rel="external">覆盖任务栏</a>。为了解决这个问题，我们使用了回答里自定义的消息循环。看到调用栈里的<code>Hwnd</code>，初步怀疑是自定义的消息循环的问题。把消息循环相关的代码拿掉，问题依旧。看来不是消息循环的问题。不过为什么我在开发的时候没有遇到问题呢？</p>
<h3 id="寻找原因"><a href="#寻找原因" class="headerlink" title="寻找原因"></a>寻找原因</h3><p>把出问题版本直接放在我的开发机上跑发现并没有问题。放在另一个同事的机子上也没问题。这时候意识到问题有点蹊跷。一般来说这种不能稳定重现的问题都或多或少会和多线程和死锁有关。然而上个版本到这个版本并没有写这些方面的代码。这时候开始怀疑是环境的问题了。找来各个版本的Windows，依次尝试后发现只在Windows 8.1上有问题。难道是OS的问题？同事提醒了一句，说以前的版本是可以在Windows 8.1上正常跑的。用二分法，找到了最晚的能用的版本B和最早的不能用的版本A。</p>
<h3 id="又入困境"><a href="#又入困境" class="headerlink" title="又入困境"></a>又入困境</h3><p>按理说，找到版本后diff下改动的代码就能比较快的定位问题了。不过现在有了稳定浮现的版本B，我决定从异常本身入手。一番搜索后找到了微软的一篇<a href="https://blogs.msdn.microsoft.com/dsui_team/2013/11/18/wpf-render-thread-failures/" target="_blank" rel="external">博客</a>，其中提到这个错误通常是渲染子系统出问题的症状：</p>
<blockquote>
<p>… WPF render thread encountered some fatal error … Most of the time, a failure occurs when calling into DirectX/D3D … When a failure is detected, The render thread will attempt to map the failure it receives to an appropriate managed exception. The render thread only synchronizes with the UI thread in a few locations …The most common locations when they synchronize are … or as a result of the UI thread handling a “channel” message from DirectX.</p>
<p>If a render thread failure manifests as a System.OutOfMemoryException, then the likelihood is that the render thread was a victim of the process exhausting some resource .The exhausted resource is most often available/contiguous virtual address space … It might be a situation where sometimes the WPF render thread is the victim of the resource exhaustion …</p>
</blockquote>
<p>WPF里的渲染是由非托管的DirectX做的。为了从程序员的角度隐藏掉渲染这个过程，WPF将自身拆分为不同的组件。<code>PreserentationFramework.dll</code>和<code>PreserentationFrameworkCore.dll</code>是程序员直接能接触到的。这里实现的是组合子系统。渲染子系统则在非托管的<code>milcore.dll</code>里实现。<code>System.Windows.Media.Visual</code>是WPF组合子系统的入口点，它通过私有的通信协议与<code>milcore</code>里的渲染子系统通信，从而将组合子系统和渲染子系统连接起来。</p>
<p>看起来我们的代码耗尽了DirectX里边的某种资源，从而让渲染失败了。C#做为一个托管语言，居然能捅这么大的篓子，完全不科学。这个BUG越来越有意思了🤔</p>
<p>既然异常上看不出来什么头绪那就要从代码入手了。找diff的时候发现B版本没有打tag。</p>
<p>没打tag不算大问题，多花了些时间成功找到了那个commit，但是心情有点不爽。</p>
<p>diff的代码不多。排除掉无关的文件就只剩下一些布局文件比较可疑。改流程，依次跳过这些页面，发现一跳到登录页面就挂了。登录页面的diff有点多，二分删除很快就定位到了问题的根源:<code>ImageButton</code>。</p>
<p><code>ImageButton</code>是个在普通、鼠标悬停、被按下三种不同状态时显示不同的图片的按钮。</p>
<p><code>ImageButton.cs</code>:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System.Windows;</div><div class="line"><span class="keyword">using</span> System.Windows.Controls;</div><div class="line"><span class="keyword">using</span> System.Windows.Media;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">Debugging</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ImageButton</span> : <span class="title">Button</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> ImageSource Source</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> (ImageSource)GetValue(SourceProperty); &#125;</div><div class="line">            <span class="keyword">set</span> &#123; SetValue(SourceProperty, <span class="keyword">value</span>); &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty SourceProperty =</div><div class="line">            DependencyProperty.Register(<span class="string">"Source"</span>, <span class="keyword">typeof</span>(ImageSource), <span class="keyword">typeof</span>(ImageButton), <span class="keyword">new</span> PropertyMetadata(<span class="literal">null</span>));</div><div class="line"></div><div class="line">        <span class="keyword">public</span> ImageSource MouseOverImage</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> (ImageSource)GetValue(MouseOverImageProperty); &#125;</div><div class="line">            <span class="keyword">set</span> &#123; SetValue(MouseOverImageProperty, <span class="keyword">value</span>); &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty MouseOverImageProperty =</div><div class="line">            DependencyProperty.Register(<span class="string">"MouseOverImage"</span>, <span class="keyword">typeof</span>(ImageSource), <span class="keyword">typeof</span>(ImageButton), <span class="keyword">new</span> PropertyMetadata(<span class="literal">null</span>));</div><div class="line"></div><div class="line">        <span class="keyword">public</span> ImageSource PressedImage</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> (ImageSource)GetValue(PressedImageProperty); &#125;</div><div class="line">            <span class="keyword">set</span> &#123; SetValue(PressedImageProperty, <span class="keyword">value</span>); &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty PressedImageProperty =</div><div class="line">            DependencyProperty.Register(<span class="string">"PressedImage"</span>, <span class="keyword">typeof</span>(ImageSource), <span class="keyword">typeof</span>(ImageButton), <span class="keyword">new</span> PropertyMetadata(<span class="literal">null</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ImageButton.xaml</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></div><div class="line"><span class="tag">                    <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></div><div class="line"><span class="tag">                    <span class="attr">xmlns:local</span>=<span class="string">"clr-namespace:Debugging"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">"local:ImageButton"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Template"</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">"local:ImageButton"</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Image</span> <span class="attr">x:Name</span>=<span class="string">"image"</span> <span class="attr">Source</span>=<span class="string">"&#123;TemplateBinding Source&#125;"</span> /&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ControlTemplate.Triggers</span>&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"IsMouseOver"</span> <span class="attr">Value</span>=<span class="string">"True"</span>&gt;</span></span></div><div class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">"image"</span> <span class="attr">Property</span>=<span class="string">"Source"</span> <span class="attr">Value</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;, Path=MouseOverImage&#125;"</span> /&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Trigger</span> <span class="attr">Property</span>=<span class="string">"IsPressed"</span> <span class="attr">Value</span>=<span class="string">"True"</span>&gt;</span></span></div><div class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">TargetName</span>=<span class="string">"image"</span> <span class="attr">Property</span>=<span class="string">"Source"</span> <span class="attr">Value</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;, Path=PressedImage&#125;"</span> /&gt;</span></span></div><div class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Trigger</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ControlTemplate.Triggers</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></div></pre></td></tr></table></figure>
<p>登陆页面中是这样使用ImageButton的:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">....</div><div class="line"><span class="tag">&lt;<span class="name">ImageButton</span> <span class="attr">Source</span>=<span class="string">"&#123;StaticResource SomeImage&#125;"</span> <span class="attr">MouseOverImage</span>=<span class="string">"&#123;StaticResouce SomeOtherImage&#125;"</span> <span class="attr">PressedImage</span>=<span class="string">"&#123;StaticResources AnotherImage&#125;"</span> /&gt;</span></div><div class="line">....</div></pre></td></tr></table></figure></p>
<p>把<code>Source=&quot;{StaticResource SomeImage}&quot;</code>这一句去掉就正常了。似乎它就是罪魁祸首。但是，把这部分代码和图片拿出来放到另一个程序里却又一切正常。</p>
<h3 id="转机"><a href="#转机" class="headerlink" title="转机"></a>转机</h3><p>接下来又尝试了</p>
<ul>
<li>把<code>ImageButton</code>替换为<code>Image</code></li>
<li>把<code>Template.Trigger</code>去掉</li>
<li>把<code>SomeImage</code>指向其他图片</li>
</ul>
<p>但是还是找不到root cause。一模一样的代码不能在其他程序复现，那就说明BUG是我们程序自己造成的。但是这个BUG只在Windows 8.1下出现，说明跟环境也有可能有关系。距离发现BUG已经过去一天半了，放弃的话实在是不甘心，接下来只能猜了。</p>
<p>堆栈里显示程序挂在WPF的程序集里，基于这个现象决定retarget到.NET Framework的最新版本4.7.2。编译打包部署一套流程走完，在运行的时候发现Windows 8.1没有安装.NET Framework 4.7.2。好吧，那就装。可是安装包告诉我不满足条件：</p>
<p><img src="/2018/05/21/hell-mode-debugging/net472_error.png" alt="net472_requirement_not_meet"></p>
<p>需要安装<a href="https://support.microsoft.com/en-us/help/2919355/windows-rt-8-1-windows-8-1-and-windows-server-2012-r2-update-april-201" target="_blank" rel="external"><strong>KB2919355</strong></a>？</p>
<h3 id="微软来背锅"><a href="#微软来背锅" class="headerlink" title="微软来背锅"></a>微软来背锅</h3><p>在微软的<a href="https://support.microsoft.com/en-us/help/2919355/windows-rt-8-1-windows-8-1-and-windows-server-2012-r2-update-april-201" target="_blank" rel="external">支持网站</a>上详细列出了KB2919355的change log。以<code>image</code>为关键字CTRL+F发现这样的描述：</p>
<blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">Article number</th>
<th style="text-align:center">Article Title</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://support.microsoft.com/en-us/help/2929755" target="_blank" rel="external">2929755</a></td>
<td style="text-align:center">Out of memory when you load some image resources in a Windows application</td>
</tr>
</tbody>
</table>
</blockquote>
<p>我去，这就是我们遇到的问题。</p>
<p><a href="https://support.microsoft.com/en-us/help/2929755/out-of-memory-when-you-load-some-image-resources-in-a-windows-applicat" target="_blank" rel="external">对应的页面</a>给出的描述：</p>
<blockquote>
<p><strong>Symptoms</strong></p>
<p>When you load some image resources in an application such as Microsoft Visual Studio on a computer that has Windows 8.1, Windows Server 2012 R2, Windows 8, Windows Server 2012, Windows 7, or Windows Server 2008 R2 installed, the application stops responding and memory leaks in Windows. This issue occurs after you install the following update:<br>2670838 Platform update for Windows 7 SP1 and Windows Server 2008 R2 SP1</p>
<p><strong>File Information</strong></p>
<ul>
<li>For all supported x86-based versions of Windows 8:</li>
</ul>
<table>
<thead>
<tr>
<th>File name</th>
<th style="text-align:left">File version</th>
<th style="text-align:left">File size</th>
<th style="text-align:left">Date</th>
<th style="text-align:left">Time</th>
<th style="text-align:left">Platform</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windowscodecs.dll</td>
<td style="text-align:left">6.2.9200.16809</td>
<td style="text-align:left">1,339,392</td>
<td style="text-align:left">31-Jan-2014</td>
<td style="text-align:left">00:48</td>
<td style="text-align:left">x86</td>
</tr>
<tr>
<td>Windowscodecs.dll</td>
<td style="text-align:left">6.2.9200.20930</td>
<td style="text-align:left">1,319,936</td>
<td style="text-align:left">31-Jan-2014</td>
<td style="text-align:left">06:04</td>
<td style="text-align:left">x86</td>
</tr>
</tbody>
</table>
</blockquote>
<p>这个BUG是<a href="https://support.microsoft.com/en-us/help/2670838" target="_blank" rel="external">KB2670838</a>引入的。在2670838的更新中,微软更新了现有的Windows Imaging Component (WIC)</p>
<blockquote>
<p>This update improves the range and performance of the following graphics and imaging components:</p>
<ul>
<li>Windows Imaging Component (WIC)</li>
</ul>
</blockquote>
<p>我们在diff里重点关注了Image相更改，发现改了这么一行：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">"Image"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"RenderOptions.BitmapScalingMode"</span></span></span></div><div class="line"><span class="undefined">                    Value="Fant" /&gt;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.bitmapscalingmode?view=netframework-4.7.2" target="_blank" rel="external">RenderOptons.BitmapScalingMode</a>指明在需要缩放时使用的算法。<code>Fant</code>是质量最高的一种之一。尝试<code>Fant</code>改为<code>Linear</code>后程序正常运行。继续尝试其他的值，发现除了<code>Linear</code>和<code>Unspecified</code>都会崩溃。</p>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>在KB2670838里的WIC在特定情况会OOM爆掉。WPF里的<code>BitmapScalingMode.Fant</code>依赖WIC实现，在装了KB2670838的环境里跟就会跟WIC一起OOM爆掉；微软在后来发行的KB2919355中修复了这个BUG。</p>
<p>我们的测试机的Windows系统由RTM的镜像安装并且关闭了自动更新。在Windows 8.1之前的RTM镜像没有自带KBB2670838，在Windows 8.1之后RTM镜像自带了KB2919355。偏偏这个Windows 8.1的RTM镜像内置了KB2670838而没有内置KB2919355，程序就这样死于OOM。</p>
<p>验证Windowscodecs.dll的版本也支持这个结论。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>定位环境问题的时候要控制变量</li>
<li>二分法能快速定位出错的位置</li>
<li>打好Tag很重要</li>
<li>一直以来依赖的底层也会有BUG。大胆质疑，小心求证。</li>
</ul>
<p><del>该甩锅的时候要果断的甩给微软</del></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/wpf-architecture#systemwindowsmediavisual" target="_blank" rel="external">WPF Architecture - docs.microsoft.com</a></p>
<p><a href="https://social.msdn.microsoft.com/Forums/en-US/2ca9e3d5-06b9-4ca0-b5e0-0a42d54cd926/wpf-tooltip-rendering-issue-application-hang?forum=wpf" target="_blank" rel="external">WPF ToolTip Rendering Issue : Application Hang - social.msdn.microsoft.com</a></p>
<p><a href="https://support.microsoft.com/en-us/help/2919355/windows-rt-8-1-windows-8-1-and-windows-server-2012-r2-update-april-201" target="_blank" rel="external">Windows RT 8.1, Windows 8.1, and Windows Server 2012 R2 update: April 2014 - support.microsoft.com</a></p>
<p><a href="https://support.microsoft.com/en-us/help/2670838/platform-update-for-windows-7-sp1-and-windows-server-2008-r2-sp1" target="_blank" rel="external">Platform update for Windows 7 SP1 and Windows Server 2008 R2 SP1 - support.microsoft.com</a></p>
<p><a href="https://msdn.microsoft.com/library/windows/desktop/ee719902.aspx" target="_blank" rel="external">Windows Imaging Component - msdn.microsoft.com</a></p>
]]></content>
      
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> Debugging </tag>
            
            <tag> WPF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[闭包，变量捕获与重入问题]]></title>
      <url>/2018/03/08/closure-and-re-entrance/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>公司的APP，在断网后进行一个10秒的倒计时操作，每秒钟都会尝试重新联网。当秒数到0时又重新开始计时，倒计时在用户退出程序或者连上网络结束。</p>
<p>按理说是个很简单的Case。QA却报过来个BUG，说APP状态由</p>
<p>联网-&gt;断网-&gt;联网-&gt;断网</p>
<p>变化后，倒计时的秒数变为</p>
<blockquote>
<p>9 3 8 2 7 1</p>
</blockquote>
<p>变得不连续了。</p>
<a id="more"></a>
<p>思考了一下，觉得应该是第一次倒计时的没有退出，第二次倒计时开始后两者都开始更新UI。</p>
<p>看了代码，果然是这样的</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnIPChanged</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ShowOfflineUI();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowOfflineUI</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Task.Factory.Start(<span class="keyword">delegate</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">        &#123;</div><div class="line">            i = (i<span class="number">-1</span>)%<span class="number">10</span>;</div><div class="line">            Invoke(UpdateCountDown(i))<span class="comment">//update UI on UI thread</span></div><div class="line">            <span class="keyword">try</span></div><div class="line">            &#123;</div><div class="line">                Thread.Sleep(TimeSpan.FromSeconds(<span class="number">1</span>))</div><div class="line">                <span class="keyword">if</span>(Connect())</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在第二次触发倒计时的时候原来的倒计时还在继续，即，两个倒计时同时执行是不安全的。这是典型的<a href="https://en.wikipedia.org/wiki/Reentrancy_(computing" target="_blank" rel="external">重入问题</a>)</p>
<hr>
<p>说实话我不是很喜欢直接用Thread.Sleep来做操作，这样占用了一个线程忙等，浪费了资源。C#中一般采用基于Task的异步编程来做，这样不会浪费资源。Task提供的CancellationToken能够比较容易的实现取消。放到这个Case里，只要开始倒计时的时候取消上一次的倒计时就好了。</p>
<p>说干就干,我最喜欢用Task重写基于Thread的并发/异步了</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">TaskCancellationToken _cts;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnIPChanged</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ShowOfflineUI();</div><div class="line">    ShowOfflineUI();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">async</span> Task <span class="title">ShowOfflineUI</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    _cts?.Cancel();</div><div class="line">    _cts = <span class="keyword">new</span> CancellationToken();</div><div class="line">    <span class="keyword">await</span> Task.Run(</div><div class="line">        <span class="keyword">async</span> ()=&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">            &#123;</div><div class="line">                i = (i<span class="number">-1</span>)%<span class="number">10</span>;</div><div class="line">                Invoke(UpdateCountDown(i));</div><div class="line">                <span class="keyword">await</span> Task.Delay(TimeSpan.FromSeconds(<span class="number">1</span>),_cts.Token);</div><div class="line">                <span class="keyword">if</span>(Connect())</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了验证方法的正确性，我特地在OnIPChanged()调用了两次ShowOfflineUI()。但是第一个Task并没有被取消。</p>
<h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>写出了跟自己预期不一样的代码怎么办？<br>当然是上Debugger了。<br>在Debugger的火眼金睛下，我很快注意到了最明显的现象：在第二次调用ShowOfflineUI的时候，_cts.Cancel()并没有把第一个Task中的CancellationToken的IsCancellationRequest变为True。<br>计算机科学里有句老话，那就是永远不要怀疑近30年内编译器的正确性。经过数十分钟的排(谷)查(歌)定位了问题的原因:两个Task引用的_cts是<strong>同一个</strong>。</p>
<h2 id="原因剖析"><a href="#原因剖析" class="headerlink" title="原因剖析"></a>原因剖析</h2><p>如果一个匿名函数引用了不属于他自己的局部变量，那么这个现象就称为闭包。因为这实在是太自然了所以我才没往这上面想。在给Task.Run中，我传入了一个Action<task>类型的函数，它捕获了外部变量_cts。在函数中每次用到_cts的时候，被捕获的变量的值被重新计算，结果作为实际的值。而我的本意是让两个Task拥有不同的_cts，这样后边的Task就可以取消前边的Task了。<br>明白了这些后就很好改了，在ShowOfflineUI里放一个局部变量，存储_cts的值，让匿名函数捕获这个局部变量就好了<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">async</span> Task <span class="title">ShowOfflineUI</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> local = _cts;</div><div class="line">    local?.Cancel();</div><div class="line">    _cts = <span class="keyword">new</span> CancellationToken();</div><div class="line">    <span class="keyword">await</span> Task.Run(</div><div class="line">        <span class="keyword">async</span> ()=&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">            &#123;</div><div class="line">                i = (i<span class="number">-1</span>)%<span class="number">10</span>;</div><div class="line">                Invoke(UpdateCountDown(i));</div><div class="line">                <span class="keyword">await</span> Task.Delay(TimeSpan.FromSeconds(<span class="number">1</span>),local?.Token??CancellationToken.None);</div><div class="line">                <span class="keyword">if</span>(Connect())</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></task></p>
<hr>
<p>有兴趣的朋友可以猜一猜这两段代码的结果，再运行验证一下</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NonLocal</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    List&lt;Action&gt; actions = <span class="keyword">new</span> List&lt;Action&gt;();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">10</span>;i++)</div><div class="line">        actions.Add(()=&gt;Console.WriteLine(i));</div><div class="line">    actions.ForEach(a=&gt;a());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Local</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     List&lt;Action&gt; actions = <span class="keyword">new</span> List&lt;Action&gt;();</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">10</span>;i++)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">int</span> j = i;</div><div class="line">         actions.Add(()=&gt;Console.WriteLine (j));</div><div class="line">     &#125;</div><div class="line">     actions.ForEach(a=&gt;a());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相信名字就给大家足够多的提示了</p>
<p>最后祝你身体健康，再见</p>
]]></content>
      
        
        <tags>
            
            <tag> Reentrance </tag>
            
            <tag> async/await </tag>
            
            <tag> lambda </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTPClient 踩坑记]]></title>
      <url>/2017/10/24/httpclient-good-part-and-tipfalls/</url>
      <content type="html"><![CDATA[<p>HttpClient是随着.Net framework 4.5一起发布的现代Http库。比起WebClient，HttpClient最大的优点就是<br>加入了C#5中的async/await异步方法的支持。async/await的坑暂且不表，今天就来说一说这个HttpClient</p>
<h2 id="HttpClient的坑"><a href="#HttpClient的坑" class="headerlink" title="HttpClient的坑"></a>HttpClient的坑</h2><p>HttpClient实现了IDisposable接口，很多小伙伴一看到IDisposeable接口就纷纷把HttpClient套在了using里边</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bad httpclient usage</span></div><div class="line"><span class="keyword">using</span>(<span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient())</div><div class="line">&#123;</div><div class="line">    <span class="comment">//do stuffs</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种用法是<strong>错误</strong>的.HttpClient在设计之初被设计为一个可重用的对象，它的生命周期应该与应用程序相一致.上述错误的用法每发起一个请求就会创建一个新的HttpClient，并且在收到回复之后立即把HttpClient dispose掉。众所周知TCP连接在真正断开之前会有几分钟处于CLOSE_WAIT状态。这个状态下TCP链接并没有真正断开。短时间内大量发出Http请求会使系统可用的端口急剧消耗。</p>
<a id="more"></a>
<p>MS的人推荐重用HttpClient以使其生命周期与应用相同</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//good httpclient usage</span></div><div class="line"><span class="keyword">class</span> <span class="title">GoodHttpClientSample</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> HttpClient client = <span class="keyword">new</span> HttpClient();</div><div class="line">    <span class="function"><span class="keyword">public</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">GetStringAsync</span>(<span class="params"><span class="keyword">string</span> url</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> resposne = <span class="keyword">await</span> client.GetAsync(url).ConfigureAwait(<span class="literal">false</span>);</div><div class="line">        <span class="keyword">return</span> response.Content.ReadAsStringAsync();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="HttpClient的优点"><a href="#HttpClient的优点" class="headerlink" title="HttpClient的优点"></a>HttpClient的优点</h2><p>踩过了坑我们再来说说他的好处。去掉async/await支持这个最大的有点，HttpClient的一个构造函数的重载接受一个HttpMessageHandler。这个重载很有意思。HttpMessageHandler可以在发出Http请求和接受Http回复时做出一些回应。.net framework里有一个类叫做DelegatingHandler，它继承了HttpMessageHandler。叫做DelegatingHandler是因为它有个类型为HttpMessageHandler的InnerHandler属性，因而可以把请求delegate给InnerHandler。通过这个DelegatingHandler我们可以请以实现像Java web里的filter chain一样的逻辑。</p>
<p>今天重构了公司的代码。公司现有的HttpManager提供了GET和POST两种Http动词的异步方法。在这些方法中还进行了日志记录和失败重试。日志记录和失败重试相关的代码非常重复，但是又无法写成一个函数。因此我把这部分逻辑抽出来做成了两个DelegatingHandler</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">LogHandler</span>:<span class="title">DelegatingHandler</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILog _log;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogHandler</span>(<span class="params">ILog log,HttpMessageHandler handler</span>):<span class="title">base</span>(<span class="params">handler</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        _log = log;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">async</span> <span class="keyword">override</span> Task&lt;HttpResponseMessage&gt; <span class="title">SendAsync</span>(<span class="params">HttpRequestMessage request, CancellationToken cancellationToken</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> begin = DateTime.Now;</div><div class="line">            _log.I(<span class="string">$"<span class="subst">&#123;request.Method&#125;</span> -&gt;<span class="subst">&#123;request.RequestUri&#125;</span>"</span>);</div><div class="line">            <span class="keyword">var</span> response = <span class="keyword">await</span> <span class="keyword">base</span>.SendAsync(request,cancellationToken);</div><div class="line">            <span class="keyword">var</span> end = DateTime.Now;</div><div class="line">            <span class="keyword">var</span> diff = (end-begin).TotalMillseconds;</div><div class="line">            _log.I(<span class="string">$"<span class="subst">&#123;request.Method&#125;</span> &lt;- <span class="subst">&#123;response.Content.ReadAsStringAsync()&#125;</span> cost<span class="subst">&#123;diff&#125;</span>ms"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span>(Exception e)</div><div class="line">        &#123;</div><div class="line">            _log.E(<span class="string">$"<span class="subst">&#123;request.Method&#125;</span> -&gt;<span class="subst">&#123;request.RequestUri&#125;</span>,<span class="subst">&#123;e&#125;</span>"</span>);</div><div class="line">            <span class="keyword">throw</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">RetryHandler</span>:<span class="title">DelegatingHandler</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">async</span> <span class="keyword">override</span> Task&lt;HttpResponseMessage&gt; <span class="title">SendAsync</span>(<span class="params">HttpRequestMessage request,CancellationToken cancellationToken</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        HttpResponseMessage response = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=_retryTimes,i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">try</span></div><div class="line">            &#123;</div><div class="line">                response = <span class="keyword">await</span> <span class="keyword">base</span>.SendAsync(request,cancellationToken);</div><div class="line">                <span class="keyword">return</span> response;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span>(Exception)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i==_retryTimes)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">throw</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//make compiler happy. </span></div><div class="line">            <span class="keyword">return</span> response;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">int</span> _retryTimes = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RetryHandler</span>(<span class="params"><span class="keyword">int</span> retryTimes,HttpMessageHandler handler</span>):<span class="title">base</span>(<span class="params">handler</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(retryTimes&lt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="keyword">nameof</span>(retryTimes));</div><div class="line">        &#125;</div><div class="line">        _retryTimes = retryTimes;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HttpClientHandler是个真正实现HttpClient逻辑的HttpMessageHandler。因此，我们只要保证最内部的Handler时HttpClientHandler就OK了。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ILog _log;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> HttpClient _client = <span class="keyword">new</span> </div><div class="line">HttpClient(<span class="keyword">new</span> RetryHandler(<span class="number">3</span>,<span class="keyword">new</span> LogHandler(_log,<span class="keyword">new</span> HttpClientHandler())));</div></pre></td></tr></table></figure>
<p><strong>需要注意的是，如果HttpHandler没有返回HttpResponseMessage,对应的异步方法会在运行时抛出InvalidOperationException</strong></p>
<p>重构之后整个Http封装类的代码行数从400行减少到了120行左右，可读性和可维护性提升显著。</p>
<h2 id="Further-reading"><a href="#Further-reading" class="headerlink" title="Further reading"></a>Further reading</h2><p><a href="https://www.thomaslevesque.com/2016/12/08/fun-with-the-httpclient-pipeline/" target="_blank" rel="external">FUN WITH THE HTTPCLIENT PIPELINE</a></p>
<p><a href="https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/" target="_blank" rel="external">YOU’RE USING HTTPCLIENT WRONG AND IT IS DESTABILIZING YOUR SOFTWARE</a></p>
<p><a href="https://stackoverflow.com/questions/15705092/do-httpclient-and-httpclienthandler-have-to-be-disposed" target="_blank" rel="external">Do HttpClient and HttpClientHandler have to be disposed?</a></p>
]]></content>
      
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> HttpClient </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
