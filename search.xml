<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Build a (partial) self-contained WPF application]]></title>
      <url>/2018/07/31/self-contained-wpf-application/</url>
      <content type="html"><![CDATA[<h2 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h2><p>新事物的产生总是与老事物有千丝万缕的联系。或是从中得到启发，或是对其全面改良。新事物的源头通常可以追溯到很久远的一些概念上。因此有了「站在巨人的肩膀上」 这样的说法。在程序设计里面，「巨人们的肩膀」 就是我们的应用程序使用的库了。踩在这些「巨人」们的肩膀上我们的程序才得以重见天日；为了实现一个库，有时候会使用到其他的库。我们所依赖的「巨人」又踩在了其他「巨人」的肩膀上，把依赖关系变成了树状结构，我们的程序处在根节点。</p>
<p>扯远了:)</p>
<a id="more"></a>
<p>开发的时候有包管理工具帮我们管理依赖，而到了分发的时候，需要一个容器把我们的程序和它的依赖项一起分发。这就需要用到安装程序。最终用户只要拿到安装程序，运行安装，由安装程序去操心依赖项到底应该放在哪。</p>
<p>人是懒惰的动物，从用户发现软件到真正用上软件之间，每多一个步骤都会让损失一批潜在用户。而现在随着手机的流行，用户已经不想安装了。他们只想下载「软件」，双击就能直接运行。至于什么安装路径，UAC权限之类的用户才不想操心呢。</p>
<p>这就要求我们的程序要将安装这个过程隐藏起来。在用户看不到的情况下部署自己的依赖项。这样的程序在英文里被称为 self-contained</p>
<blockquote>
<p>self-contained<br><em>adjective</em></p>
<ul>
<li>(of a thing) complete, or having all that is needed, in itself.</li>
<li>(of a person) quiet and independent; not depending on or influenced by others.</li>
</ul>
</blockquote>
<p>这几天我们也有了将最终程序self-contain化的需求。终于可以合理的抛弃MFC写的Installer了😁</p>
<h2 id="Self-contained-in-NET"><a href="#Self-contained-in-NET" class="headerlink" title="Self-contained in .NET"></a>Self-contained in .NET</h2><p>.NET在设计之初只是想提高Windows程序员的开发效率，顺便解决一下<a href="https://en.wikipedia.org/wiki/DLL_Hell" target="_blank" rel="external">DLL Hell</a>。至于应用分发根本就不再日程上。就算真的考虑过，也一定会采用动态链接的方式。因为<a href="https://en.wikipedia.org/wiki/.NET_Framework_version_history" target="_blank" rel="external">当时</a>的硬盘还是很贵滴。</p>
<p>总之，.NET就这样决定采用动态链接了。.NET里的几个基本概念也都与动态链接脱不开关系：</p>
<p><a href="https://en.wikipedia.org/wiki/Assembly_(CLI" target="_blank" rel="external">程序集</a>)是.NET世界里最常见的分发单元。程序集有独立的版本号。在引用其他程序集的时候，需要显式指明对应的版本。这样，相同名字不同版本的程序集就可以被区别开，以此为基础就解决Dll hell的问题。CLR在运行的时候以一套<a href="https://docs.microsoft.com/en-us/dotnet/framework/deployment/how-the-runtime-locates-assemblies" target="_blank" rel="external">复杂的规则</a>试图加载程序的依赖项。</p>
<p>看起来似乎.NET与静态链接无缘了。不过也有好消息，在Build 2018开发者大会上，微软<a href="https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/" target="_blank" rel="external">宣布</a>现有的桌面程序可以在明年推出的.Net core 3上选择与运行时静态链接在一起，将整个程序变为单一的可执行文件。</p>
<blockquote>
<p>Side-by-side and App-local Deployment</p>
<p>For cases where the maximum isolation is required, you can deploy .NET Core with your  application. We’re working on new build tools that will bundle your app and .NET Core  together as in a single executable, as a new option.</p>
<p><strong>We’ve had requests for deployment options like this for many years, but were never able to deliver those with the .NET Framework. The much more modular architecture used by .NET Core makes these flexible deployment options possible.</strong></p>
</blockquote>
<p>.Net Core 3.0的推出时间是明年，我们显然不能等到那个时候。为了实现需求，先向搜索引擎求助吧。</p>
<h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p>静态链接将依赖项打包进我们的程序，生成单一的二进制文件。这是个很直观的切入点。以<code>C# static link</code>为关键词，发现有几个同类型的工具。例如<a href="https://github.com/Microsoft/ILMerge" target="_blank" rel="external">ILMerge</a>。在.NET的世界中，源代码经过编译后产生的程序集里存储的并不是机器代码而是一种叫<a href="https://en.wikipedia.org/wiki/Common_Intermediate_Language" target="_blank" rel="external">MSIL</a>的中间代码。程序集由CLR加载后被JIT即时编译为机器码。</p>
<p>ILMerge之类的工具工作在IL层面。它们将不同程序集的IL代码粘合起来，生成单一的程序集。</p>
<p>听起来是不是很美好？如果你写个小demo的话会发现确实很好用。但是ILMerge无法对WPF中的XAML资源进行改写。程序挂在运行时。</p>
<h3 id="内嵌资源"><a href="#内嵌资源" class="headerlink" title="内嵌资源"></a>内嵌资源</h3><p>.NET中的程序集有资源的概念。任何文件都能以资源的形式嵌入进程序集。另一个思路是是把依赖项当作资源嵌进我们的主程序。只要能在运行时把它们暴露给CLR，就能实现self-contain。<br>先来看看API：</p>
<ul>
<li><code>Assembly.GetManifestResourceStream(string name)</code>:</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Loads the specified manifest resource from this assembly.</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> System.IO.<span class="function">Stream <span class="title">GetManifestResourceStream</span> (<span class="params">Type type, <span class="keyword">string</span> name</span>)</span></div></pre></td></tr></table></figure>
<ul>
<li><code>AppDomain.Load(Byte[])</code>:</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Loads the Assembly with a common object file format (COFF) based image containing an emitted Assembly.</span></div><div class="line"><span class="keyword">public</span> System.Reflection.<span class="function">Assembly <span class="title">Load</span> (<span class="params"><span class="keyword">byte</span>[] rawAssembly</span>)</span>;</div></pre></td></tr></table></figure>
<ul>
<li><code>AppDomain.AssemblyResolve</code></li>
</ul>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Occurs when the resolution of an assembly fails.</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">event</span> ResolveEventHandler AssemblyResolve;</div></pre></td></tr></table></figure>
<p>我们把依赖项嵌入到程序内部后，CLR找不到引用的程序集的时候就会触发<code>AppDomain.AssemblyResolve</code>事件。我们可以在这里拿到依赖的<code>AssemblyName</code>,<code>Assembly.GetManifestResourceStream(string name)</code>得到包含依赖项的的<code>stream</code>，把<code>stream</code>的内容读出来放到<code>byte[]</code>里，调用<code>AppDomain.Load(Byte[])</code>将程序集加载。</p>
<p>大致过程走得通，不过有点麻烦。hardcode依赖的名字后，以后添加新依赖项还要更改hardcode的名字。毕竟程序员也是人，也想偷懒。这些活最好自动化。要是能和VS里的编译结合起来就更好了🤤</p>
<p>你别说，还真有这样的工具。<a href="https://github.com/Fody/Fody" target="_blank" rel="external">Fody</a>可以对.NET程序集做多种操作。<a href="https://github.com/Fody/Costura/" target="_blank" rel="external">Costura</a>是Fody的一个扩展，专门用来将依赖嵌入成资源。Fody与VS的完美集成，编译完成后自动开始操作。<br>Nuget安装完Fody和Costura后，如果解决方案根路径下没有<code>FodyWeavers.xml</code>则新建它。把内容替换为</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Weavers</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Costura</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Weavers</span>&gt;</span>`</div></pre></td></tr></table></figure>
<p>就完事了。太易用了。我做了测试，WPF和控制台应用都可以。看文档，它还支持.NET Core。</p>
<h2 id="Dependencies-of-my-dependencies-is-not-my-dependencies"><a href="#Dependencies-of-my-dependencies-is-not-my-dependencies" class="headerlink" title="Dependencies of my dependencies, is not my dependencies"></a>Dependencies of my dependencies, is not my dependencies</h2><p>ILMerge也好，Fody也好，它们解决的都是应用程序所依赖库的问题。而我们的程序之所以叫.NET程序，是因为它依赖.NET Framework。如果要做到fully-self-contained的话，我们还需要把.NET Framework也塞进去。这就意味这我们需要一个不依赖.NET Framework的程序来释放.NET Framework和我们的应用程序。这其实就是重新发明安装程序了。退一步说，就算我们真的把.NET Framework打包进去了，因为.NET Framework的安装过程比较耗时，用户在点了按钮后几秒钟如果UI还没出来可能会认为我们的程序有问题。因此，把程序和.NET Framework一起分发的事情就交给愿意折腾的同学们了。我还是期待下.NET Core 3.0吧。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你的程序是WPF程序，请使用Fody.Costura；</p>
<p>如果你的程序不是WPF程序，那么可以任选ILMerge和Fody.Costura的一个。</p>
<p>如果你的程序需要与.NET Framework一起分发，请在处理主程序后使用支持静默安装的Installer将主程序与.NET运行时一起打包。</p>
<p><del>或者等.Net Core 3.0发布</del></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><p><a href="https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/" target="_blank" rel="external">.Net Core 3.0 - blogs.msdn.microsoft.com</a></p>
</li>
<li><p><a href="https://docs.microsoft.com/en-us/dotnet/framework/deployment/how-the-runtime-locates-assemblies" target="_blank" rel="external">How the Runtime Locates Assemblies - docs.microsoft.com</a></p>
</li>
<li><p><a href="https://github.com/Fody/Fody" target="_blank" rel="external">Fody - github.com</a></p>
</li>
<li><p><a href="https://github.com/Fody/Costura/" target="_blank" rel="external">Costura - github.com</a></p>
</li>
<li><p><a href="https://docs.microsoft.com/en-us/dotnet/framework/deployment/deployment-guide-for-developers#chaining" target="_blank" rel="external">.NET Framework deployment guide for developers - docs.microsoft.com</a></p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> WPF </tag>
            
            <tag> .Net Framework </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[引用类型的开销]]></title>
      <url>/2018/07/19/overhead-of-reference-types/</url>
      <content type="html"><![CDATA[<h2 id="值类型与引用类型"><a href="#值类型与引用类型" class="headerlink" title="值类型与引用类型"></a>值类型与引用类型</h2><p>C#中的类型分为引用类型和值类型。使用<code>struct</code>或<code>enum</code>关键字修饰的类型定义是值类型，使用<code>class</code>或<code>delegate</code>关键字修饰的类型是引用类型。引用类型和值类型各有限制，分别适用于不同的场景。不同于C++，C#中的值类型只能分配在栈上*1，引用类型只能分配在GC堆上。C#中的GC是精确式GC，这就对GC堆上的指针有了一些要求。这是引用类型有开销的原因之一。</p>
<h2 id="Sync-block-index-与-Type-object-pointer"><a href="#Sync-block-index-与-Type-object-pointer" class="headerlink" title="Sync block index 与 Type object pointer"></a>Sync block index 与 Type object pointer</h2><p>读过C# vir CLR的同学会知道，引用类型的开销是Sync blockindex和Type object pointer。他们的长度是都是一个字长。即在32位CLR上是4字节，在64位CLR上是8字节。Sync block index在CLR中是用于实现<code>lock</code>,<code>Monitor</code>等线程同步原语，Type object pointer是指向当前对象运行时类型信息的一个指针。Sync block index与Type object pointer只在CLR层面存在，对C#程序来说是透明的。但是CLR将它们暴封装后露C#，例如线程同步原语和反射API。</p>
<a id="more"></a>
<h2 id="特殊的类型-数组"><a href="#特殊的类型-数组" class="headerlink" title="特殊的类型-数组"></a>特殊的类型-数组</h2><p>C#中绝大部分类型的大小在编译期就可以确定，只要把对应的成员的大小相加即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SizeOf(T) = T.GetFields.Select(f=&gt;f.IsClass?WordSize:Sizeof(f)).Sum();</div></pre></td></tr></table></figure></p>
<p>数组是个很特殊的存在，特殊在它的大小是与元素的类型和数量有关。数组的内存布局包含了所有的元素。(另一个这样的类型是<code>string</code>)。<code>byte[4]</code>和<code>byte[3]</code>的类型都是<code>byte[]</code>，然而它们的大小却不一样。我们这次就好仔细观察下数组</p>
<h2 id="使用WinDBG"><a href="#使用WinDBG" class="headerlink" title="使用WinDBG"></a>使用WinDBG</h2><p>WinDBG是Windows下常用的Debugger。虽然是以调试非托管代码设计，但是加上相关的插件以后也可以用来调试托管代码。SOS.dll是一个提供托管代码调试支持的的插件。它同时支持CLR和CoreCLR。</p>
<p>安装好WinDBG后，就可以开始调试了。简单起见，这里使用如下代码。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">SOSFromEE</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">int</span> Length = <span class="number">10</span>;</div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">var</span> ints = Enumerable.Range(<span class="number">1</span>, Length).ToArray();</div><div class="line">            <span class="keyword">var</span> strs = ints.Select(i =&gt; i.ToString()).ToArray();</div><div class="line">            Console.ReadLine();</div><div class="line">            GC.KeepAlive(ints);</div><div class="line">            GC.KeepAlive(strs);</div><div class="line">            Console.Read();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在WinDBG中选择Launch对应的可执行程序即可。<br>在第一个断点时CLR还没有加载，我们继续让程序运行，等到不再出现ModLoad相关的提示时就可以让程序暂停了。<br>我们在这时加载SOS扩展。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.loadby sos CLRNameHere</div></pre></td></tr></table></figure>
<p>sos后跟的是CLR的名称</p>
<ul>
<li><p>CLR2.0(.Net framework 3.5及以前)是mscorwks</p>
</li>
<li><p>CLR4.0(.Net framework 4.0及以后)是clr</p>
</li>
<li><p>.net core是 coreclr</p>
</li>
</ul>
<p>加载模块的过程中需要从微软的服务器上下载相关的pdb文件。由于你懂的原因需要很长时间</p>
<h2 id="CLR2-0-下的数组"><a href="#CLR2-0-下的数组" class="headerlink" title="CLR2.0 下的数组"></a>CLR2.0 下的数组</h2><p>我们首先在32位的CLR2.0下观察。</p>
<p>首先使用<code>.loadby sos mscorwks</code>加载<code>SOS</code>扩展模块。</p>
<p><code>!dumpheap -type TypeNameHere</code>命令可以查看当前托管堆上类型名为<code>TypeNameHere</code>的对象。</p>
<h3 id="System-String"><a href="#System-String" class="headerlink" title="System.String[]"></a><code>System.String[]</code></h3><p>我们先看看<code>String[]</code>都有哪些:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumpheap -type System.String[]</div><div class="line"></div><div class="line"> Address       MT     Size</div><div class="line">03591390 78ae46e4       80     </div><div class="line">..........................</div><div class="line">total 17 objects</div><div class="line">Statistics:</div><div class="line">      MT    Count    TotalSize Class Name</div><div class="line">78ae46e4       17          676 System.Object[]</div><div class="line">Total 17 objects</div></pre></td></tr></table></figure>
<p><code>Address</code>显示的是对象在托管堆中的地址，<code>Method Table</code>就是上文中说的Type object pointer了。</p>
<p>我们查看下位于地址<code>03591390</code>的<code>String[]</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumparray 03591390</div><div class="line"></div><div class="line">Name: System.String[]</div><div class="line">MethodTable: 78ae46e4</div><div class="line">EEClass: 788cda74</div><div class="line">Size: 80(0x50) bytes</div><div class="line">Array: Rank 1, Number of elements 16, Type CLASS</div><div class="line">Element Methodtable: 78b10f14</div><div class="line">[0] 035911c8</div><div class="line">[1] 03591250</div><div class="line">[2] null</div><div class="line">[3] null</div><div class="line">[4] null</div><div class="line">[5] null</div><div class="line">[6] null</div><div class="line">[7] null</div><div class="line">[8] null</div><div class="line">[9] null</div><div class="line">[10] null</div><div class="line">[11] null</div><div class="line">[12] null</div><div class="line">[13] null</div><div class="line">[14] null</div><div class="line">[15] null</div></pre></td></tr></table></figure></p>
<p>可以看到这个数组一共有16个元素，元素的类型是<code>string</code>。</p>
<p>我们再来看看<code>03591390</code>位置的内存布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0:006&gt; dd 03591390 -0x4</div><div class="line"></div><div class="line">0359138c  00000000 78ae46e4 00000010 78b10f14</div><div class="line">0359139c  035911c8 03591250 00000000 00000000</div><div class="line">035913ac  00000000 00000000 00000000 00000000</div><div class="line">035913bc  00000000 00000000 00000000 00000000</div><div class="line">035913cc  00000000 00000000 00000000 00000000</div></pre></td></tr></table></figure>
<p><code>dd 03591390 -0x4</code>告诉WinDBG从<code>03591390</code>向前偏移4个字节的位置开始展示内存。之所以向前偏移4个字节是为了展示引用类型的开销。<code>0359138c</code>位置的值<code>00000000</code>是Sync block index，位于<code>03591390</code>的<code>78ae46e4</code>看起来有点摸不着头脑，在WinDBG的输出中查找后发现是<code>System.String[]</code>的<code>MethodTable</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Name: System.String[]</div><div class="line">MethodTable: 78ae46e4</div></pre></td></tr></table></figure></p>
<p><code>MethodTable</code>是CLR级别的概念，对应到这里就是Type Object Pointer。<br>GC堆上的对象往前偏４字节就能得到Sync block index，接下来是对象的Type object pointer。为了叙述方便，下文统称为对象头:)</p>
<p>由此推测，对象头长度是两个字长。起始位置为当前指针的位置往前偏移一个字长。有兴趣的同学可以在64位CLR上自行验证。</p>
<p>数组的长度是16(0x10)，地址<code>03591395</code>的值就是它。</p>
<p>地址<code>03591388</code>的<code>78b10f14</code>不知道是什么。没关系，CTRF+F查找后发现它在上文出现过。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Element Methodtable: 78b10f14</div></pre></td></tr></table></figure>
<p>应该是<code>String</code>的<code>Method table</code>。</p>
<p><code>dump</code>一下<code>System.String</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumpheap -type System.String</div><div class="line"></div><div class="line">      MT    Count    TotalSize Class Name</div><div class="line">78b10f14      154         6224 System.String</div></pre></td></tr></table></figure></p>
<p>看来猜得没错。总结一下，引用类型的数组有4字长的开销，分别是2字长的对象头，1字长的长度，1字长的元素类型指针</p>
<p>接下来看看值类型数组的布局</p>
<h3 id="System-Int32"><a href="#System-Int32" class="headerlink" title="System.Int32[]"></a><code>System.Int32[]</code></h3><p>老样子，首先先找到堆上的<code>Int32[]</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumpheap -type System.Int32[]</div><div class="line"> Address       MT     Size</div><div class="line">03591e50 78b130b0      296     </div><div class="line">................................</div><div class="line">total 18 objects</div><div class="line">Statistics:</div><div class="line">      MT    Count    TotalSize Class Name</div><div class="line">78b130b0       18         1440 System.Int32[]</div><div class="line">Total 18 objects</div></pre></td></tr></table></figure>
<p>dump一下相关属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">!dumparray 03591e50 </div><div class="line">Name: System.Int32[]</div><div class="line">MethodTable: 78b130b0</div><div class="line">EEClass: 788ce6a8</div><div class="line">Size: 296(0x128) bytes</div><div class="line">Array: Rank 1, Number of elements 71, Type Int32</div><div class="line">Element Methodtable: 78b13160</div></pre></td></tr></table></figure>
<p>查看内存布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0:006&gt; dd 03591e50 -0x4</div><div class="line">03591e4c  00000000 78b130b0 00000047 00000000</div><div class="line">03591e5c  00000000 00000000 00000000 00000000</div><div class="line">03591e6c  00000000 00000000 00000000 00000000</div><div class="line">03591e7c  00000000 00000000 00000000 00000000</div><div class="line">03591e8c  00000000 00000000 00000000 00000000</div><div class="line">03591e9c  00000000 00000000 00000000 00000000</div><div class="line">03591eac  00000000 00000000 00000000 00000000</div><div class="line">03591ebc  00000000 00000000 00000000 00000000</div></pre></td></tr></table></figure>
<p>首先<code>Int32[]</code>也有对象头和长度的开销，但是却没有元素类型指针的开销。</p>
<p>有心的同学可能已经发现了，<code>Int32[]</code>明确指出了元素的类型，而<code>String[]</code>却没有。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">!dumparray 03591390</div><div class="line">Name: System.String[]</div><div class="line">MethodTable: 78ae46e4</div><div class="line">EEClass: 788cda74</div><div class="line">Size: 80(0x50) bytes</div><div class="line">Array: Rank 1, Number of elements 16, Type *CLASS*</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">!dumparray 03591e50 </div><div class="line">Name: System.Int32[]</div><div class="line">MethodTable: 78b130b0</div><div class="line">EEClass: 788ce6a8</div><div class="line">Size: 296(0x128) bytes</div><div class="line">Array: Rank 1, Number of elements 71, Type *Int32*</div></pre></td></tr></table></figure>
<p><code>String[]</code>的<code>Type</code>是个<code>CLASS</code>而不是<code>String</code>，难道说System.String[]是个’假的’的字符串数组？</p>
<p>….</p>
<p>….</p>
<p>….</p>
<p>恭喜你猜对了。<br>使用<code>!objsize</code>命令发现<code>String[]</code>是个带了层皮的<code>Object[]</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">!objsize 03591e50 </div><div class="line">sizeof(03591e50) =          296 (       0x128) bytes (System.Int32[])</div><div class="line">0:006&gt; !objsize 03591390 </div><div class="line">sizeof(03591390) =          392 (       0x188) bytes (System.Object[])</div></pre></td></tr></table></figure></p>
<p>C# in depth中对泛型有这样的描述 </p>
<blockquote>
<p>对于一个泛型类<code>MyGeneric&lt;T&gt;</code>，对于<code>T</code>的是引用类型的情况，JIT只会为其生成一份代码;对于<code>T</code>是值类型的情况，则为每一个不同的<code>T</code>生成各自的代码。其中的原因是，在JIT运行时，指针的长度总是固定的，因而可以共用一套代码相同的代码。而值类型的长度是不确定的，因此需要为每个值类型单独生成代码。</p>
</blockquote>
<p>这里可能也是相同的原因吧。指针的长度相同，因而才需要储存元素的类型指针，实现类型检查。而值类型的代码不共用，所以不需要储存元素的类型指针。</p>
<p>本来到已经可以结束了，可是我在32位的CLR4.0观察到的结果却不太一样。</p>
<h2 id="CLR-4-0下的数组"><a href="#CLR-4-0下的数组" class="headerlink" title="CLR 4.0下的数组"></a>CLR 4.0下的数组</h2><p>与CLR 2.0不同，CLR 4.0下加载<code>SOS</code>的名字是clr</p>
<p><code>.loadby sos clr</code></p>
<h3 id="System-String-1"><a href="#System-String-1" class="headerlink" title="System.String[]"></a><code>System.String[]</code></h3><p>首先<code>dumpheap</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumpheap -type System.String[]</div><div class="line"> Address       MT     Size</div><div class="line">02531590 6979dfe0       84     </div><div class="line">...........................</div><div class="line">Statistics:</div><div class="line">      MT    Count    TotalSize Class Name</div><div class="line">6979dfe0       24          912 System.String[]</div><div class="line">Total 24 objects</div></pre></td></tr></table></figure>
<p>然后是<code>dumparray</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Name:        System.String[]</div><div class="line">MethodTable: 6979dfe0</div><div class="line">EEClass:     69374b80</div><div class="line">Size:        84(0x54) bytes</div><div class="line">Array:       Rank 1, Number of elements 18, Type CLASS</div><div class="line">Element Methodtable: 6979d488</div><div class="line">[0] 02531254</div></pre></td></tr></table></figure></p>
<p>最后<code>dd</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0:006&gt; dd 02531590 -0x4</div><div class="line">0253158c  00000000 6979dfe0 00000012 02531254</div><div class="line">0253159c  025312d8 00000000 00000000 02531568</div><div class="line">025315ac  00000000 00000000 00000000 00000000</div><div class="line">025315bc  00000000 00000000 00000000 00000000</div><div class="line">025315cc  00000000 00000000 00000000 00000000</div><div class="line">025315dc  00000000 00000000</div></pre></td></tr></table></figure></p>
<p>位于<code>02531598</code>的值<code>02531254</code>是第一个元素的值而不是<code>String</code>的<code>Method Table</code>!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">!dumpheap -type String</div><div class="line">Statistics:</div><div class="line">      MT    Count    TotalSize Class Name</div><div class="line">6979d488      193         5932 System.String</div><div class="line">Total 224 objects</div></pre></td></tr></table></figure></p>
<p>CLR 4.0把<code>Method Table</code>去掉了？</p>
<p>经过简单的算术，确实是这样的<br>18个元素，占据空间18*4=72。</p>
<p>对象头和数组大小占据2*4+4=12</p>
<p>84=72+12，跟<code>dumparray</code>出来的值一样。(有兴趣的同学根据上文中CLR2.0的数据计算下)</p>
<p><code>!objsize</code>也确认了我们的猜测<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !objsize 02531590</div><div class="line">sizeof(02531590) = 428 (0x1ac) bytes (System.String[])</div></pre></td></tr></table></figure></p>
<h3 id="System-Int32-1"><a href="#System-Int32-1" class="headerlink" title="System.Int32[]"></a><code>System.Int32[]</code></h3><p><code>!dumpheap</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumpheap -type System.Int32[]</div><div class="line"> Address       MT     Size</div><div class="line">02531f1c 6979f2a0      300     </div><div class="line">.............................. </div><div class="line">Statistics:</div><div class="line">      MT    Count    TotalSize Class Name</div><div class="line">6979f2a0       20          844 System.Int32[]</div><div class="line">Total 20 objects</div></pre></td></tr></table></figure></p>
<p><code>!dumparray</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0:006&gt; !dumparray 02531f1c </div><div class="line">Name:        System.Int32[]</div><div class="line">MethodTable: 6979f2a0</div><div class="line">EEClass:     693752d8</div><div class="line">Size:        300(0x12c) bytes</div><div class="line">Array:       Rank 1, Number of elements 72, Type Int32</div><div class="line">Element Methodtable: 6979f2dc</div><div class="line">[0] 02531f24</div><div class="line">[1] 02531f28</div></pre></td></tr></table></figure></p>
<p><code>dd</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0:006&gt; dd 02531f1c -0x4</div><div class="line">02531f18  00000000 6979f2a0 00000048 00000003</div><div class="line">02531f28  00000007 0000000b 00000011 00000017</div><div class="line">02531f38  0000001d 00000025 0000002f 0000003b</div><div class="line">02531f48  00000047 00000059 0000006b 00000083</div><div class="line">02531f58  000000a3 000000c5 000000ef 00000125</div><div class="line">02531f68  00000161 000001af 00000209 00000277</div><div class="line">02531f78  000002f9 00000397 0000044f 0000052f</div><div class="line">02531f88  0000063d 0000078b 0000091d 00000af1</div></pre></td></tr></table></figure></p>
<p>值类型数组倒是没有什么变化。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>C#中引用类型有2个字长的对象头开销。分别是Sync block index和Type Object Pointer。数组是特殊的类型，它的大小与包含的元素相关，因此具有额外的开销。</p>
<ul>
<li><p>在CLR 2.0下</p>
<ul>
<li>引用类型的数组包含额外的2字长的开销。分别是长度和元素的类型指针</li>
<li>值类型的数组包含长度的额外开销开销。大小是一个字长。</li>
</ul>
</li>
<li><p>在CLR 4.0和CoreCLR中</p>
<ul>
<li>引用类型和值类型的数组包含长度的额外开销开销。大小是一个字长。</li>
</ul>
</li>
</ul>
<p>限于篇幅，CoreCLR的情况不再赘述，还请读者自行验证。</p>
<p>/*其实本来看到Stackoverflow的回答只是想自己验证下的，但是自己动手的结果和答案里提到的不太一样，查了原因发现答案里用的是CLR2.0，我自己用的是CLR4.0。这就挖出来了CLR实现的更改。CoreCLR里使用的是CLR4.0里的规则。目前还不清楚MS为何要改实现*/</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://stackoverflow.com/questions/1589669/overhead-of-a-net-array" target="_blank" rel="external">Overhead of a .NET array?</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension" target="_blank" rel="external">SOS.dll (SOS Debugging Extension)</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> reference type </tag>
            
            <tag> overhead </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向抽象编程]]></title>
      <url>/2018/07/12/program-upon-abstractions/</url>
      <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>说来惭愧，直到近几天才明白了一点面向对象设计的。给我带来启发的是<a href="https://en.wikipedia.org/wiki/SOLID" target="_blank" rel="external"><strong>SOLID</strong></a>中的D，它代表Dependency Inversion（依赖反转）。尽管写/背定义很无聊，但我还是想写一下依赖反转的核心</p>
<blockquote>
<p>上层模块不应该依赖下层模块，他们都应该依赖抽象</p>
</blockquote>
<h1 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap, show me the code"></a>Talk is cheap, show me the code</h1><p>最近在写一个音乐电台应用，采用服务端、客户端的方式实现。在服务端，用户可以指定一个路径，程序根据这个路径生成播放列表。</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>服务器是一个一旦开起来就不会轻易关闭的程序，我希望播放列表能够自动刷新。这样当用户添加或删除了某首音乐后不用重启服务器就可以反映变化。考虑到易用性，应该支持由路径直接生成播放列表。歌曲是有封面等其他信息的，要满足这些信息的可定制化，程序也支持由配置文件指定的播放列表。<br><a id="more"></a></p>
<h2 id="现有代码"><a href="#现有代码" class="headerlink" title="现有代码"></a>现有代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">internal class PlaylistManager</div><div class="line">&#123;</div><div class="line">    public IReadonlyList&lt;Song&gt; AllSong =&gt; _backLogs.AsReadOnly();</div><div class="line">    private readonly List&lt;Song&gt; _backLogs;</div><div class="line">    public PlaylistManager(IEnumerable&lt;Song&gt; backlog)</div><div class="line">    &#123;</div><div class="line">        _backLogs = new List&lt;Song&gt;(backlog);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现有代码中构造函数的IEnumerable\<song\>参数指定了播放列表，可是刷新却需要外部的支持：基于路径的刷新和基于配置文件的刷新是完全不一样的。我完全可以把这两个刷新都放到<code>PlaylistManager</code>里，根据生成播放列表的类型决定调用那个版本。这样就把<code>PlaylistManager</code>完全和列表生成的逻辑绑死在一起了，如果以后要在加一个新的生成方式就还要修改<code>PlaylistManager</code>的代码，尽管它跟<code>PlaylistManager</code>并无关系</song\></p>
<h2 id="修改思路"><a href="#修改思路" class="headerlink" title="修改思路"></a>修改思路</h2><p>如果我们将生成播放列表这一行为抽象为接口<code>IPlaylistProvider</code>的话，<code>PlaylistManager</code>就可以完全跟这部分逻辑分开了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public interface IPlaylistProvider</div><div class="line">&#123;</div><div class="line">    IReadonlyList&lt;Song&gt; AllSongs &#123; get; &#125;</div><div class="line">    void Refresh();</div><div class="line">&#125;</div><div class="line"></div><div class="line">internal class PlaylistManager</div><div class="line">&#123;</div><div class="line">    public IReadonlyList&lt;Song&gt; AllSong =&gt; _backLogs.AsReadOnly();</div><div class="line">    private readonly List&lt;Song&gt; _backLogs;</div><div class="line">    private readonly IPlaylistProvider _provider;</div><div class="line">    public PlaylistManager(IPlaylistProvider provider)</div><div class="line">    &#123;</div><div class="line">        _provider = provider;</div><div class="line">        _backLogs = new List&lt;Song&gt;(_provider.AllSongs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    internal void Refresh()</div><div class="line">    &#123;</div><div class="line">        Refresh();</div><div class="line">        _backLogs.Clear();</div><div class="line">        _backLogs.AddRange(_provider.AllSongs);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以分别实现基于路径和配置文件的<code>IPlaylistProvider</code></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileSystemProvider</span> : <span class="title">IPlaylistProvider</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemProvider</span>(<span class="params"><span class="keyword">string</span> path,<span class="keyword">bool</span> recursive</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!Directory.Exists(path))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$"<span class="subst">&#123;path&#125;</span> is not a directory"</span>);</div><div class="line">        &#125;</div><div class="line">        Path = path;</div><div class="line">        Recursive = recursive;</div><div class="line">        _songs = ReadSongs();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span>[] MusicExtension = <span class="keyword">new</span>[] &#123;<span class="string">".mp3"</span>,<span class="string">".wma"</span> &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;Song&gt; <span class="title">ReadSongs</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> song = <span class="keyword">new</span> List&lt;Song&gt;();</div><div class="line">        <span class="keyword">var</span> dir = <span class="keyword">new</span> DirectoryInfo(Path);</div><div class="line">        <span class="keyword">var</span> files = dir.GetFiles().Where(i =&gt; MusicExtension.Contains(i.Extension));</div><div class="line">        song.AddRange(files.Select(f =&gt; <span class="keyword">new</span> Song()</div><div class="line">        &#123;</div><div class="line">            FilePath = f.FullName,</div><div class="line">            Title = f.Name,</div><div class="line">        &#125;));</div><div class="line">        <span class="keyword">return</span> song;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> IReadOnlyList&lt;Song&gt; AllSongs =&gt; _songs.AsReadOnly();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Path &#123; <span class="keyword">get</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> Recursive &#123; <span class="keyword">get</span>; &#125;</div><div class="line">    <span class="keyword">private</span> List&lt;Song&gt; _songs;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Refresh</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        _songs = ReadSongs();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonPlaylistProvider</span> : <span class="title">IPlaylistProvider</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonPlaylistProvider</span>(<span class="params"><span class="keyword">string</span> configPath</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        _songs = ReadSongs();</div><div class="line">        ConfigPath = configPath;</div><div class="line">        <span class="keyword">if</span> (!File.Exists(ConfigPath))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$"Can't find config file at <span class="subst">&#123;ConfigPath&#125;</span>"</span>);</div><div class="line">        &#125;</div><div class="line">        ReadSongs();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;Song&gt; <span class="title">ReadSongs</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> json = File.ReadAllText(ConfigPath);</div><div class="line">        <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;List&lt;Song&gt;&gt;(json)??<span class="keyword">new</span> List&lt;Song&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Song&gt; _songs;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ConfigPath &#123; <span class="keyword">get</span>; &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> IReadOnlyList&lt;Song&gt; AllSongs =&gt; _songs.AsReadOnly();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Refresh</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        ReadSongs();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个例子中，<code>PlaylistManager</code>不依赖<code>FileSystemProvider</code>和<code>JsonPlaylistProvider</code>，它们三者都依赖于<code>IPlaylistProvider</code>这一接口。代码的可读性和可维护性相比于把刷新的逻辑放在<code>PlaylistManager</code>里高了好多</p>
<p>这里体现了依赖反转的原则：</p>
<blockquote>
<p>上层模块不应该依赖下层模块，它们都应该依赖与抽象</p>
</blockquote>
<p>如果你也像曾经的我一样，熟记面向对象的各种原理却不明白其中的道理，不妨试试用<a href="https://en.wikipedia.org/wiki/SOLID" target="_blank" rel="external">SOLID</a>的方法论组织自己的代码，相信这会加深你对OOP的理解。</p>
]]></content>
      
        
        <tags>
            
            <tag> OOP </tag>
            
            <tag> SOLID </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一次愉(dan)快(teng)的捉虫经历]]></title>
      <url>/2018/05/21/an-awful-debugging/</url>
      <content type="html"><![CDATA[<h2 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h2><p>缺陷是是在软件开发过程中经常遇到的问题。它是如此常见以在开发者的圈子中衍生出“It’s not a bug,it’s a feature”这样的段子。快速定位、解决问题是优秀开发者必备的素质。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>公司有个基于WPF的项目，上线在即。几个开发在deadline之前总算把功能赶完了，这是接到QA报了一个BUG，说程序在Win8.1上Out of memory崩溃了。得到消息后立刻跑过去尝试重现，得到了这样的调用栈：</p>
<a id="more"></a>
<blockquote>
<p>System.OutOfMemoryException: Insufficient memory to continue the execution of the program.<br>   at System.Windows.Media.MediaContext.NotifyPartitionIsZombie(Int32 failureCode)<br>   at System.Windows.Media.MediaContext.NotifyChannelMessage()<br>   at System.Windows.Interop.HwndTarget.HandleMessage(Int32 msg, IntPtr wparam, IntPtr lparam)<br>   at System.Windows.Interop.HwndSource.HwndTargetFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)<br>   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)<br>   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)<br>   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Boolean isSingleParameter)<br>   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Boolean isSingleParameter, Delegate catchHandler)<br>   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, Object args, Boolean isSingleParameter, Delegate catchHandler)<br>   at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Boolean isSingleParameter)<br>   at System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority priority, Delegate method, Object arg)<br>   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)<br>   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG&amp; msg)<br>   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)<br>   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)<br>   at System.Windows.Threading.Dispatcher.Run()</p>
</blockquote>
<h2 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h2><p>看见Hwnd，初步怀疑是程序里自定义的消息循环的问题。心想以前的版本里消息循环也没搞出来过OOM，我把消息循环相关的代码注释掉。重新部署后问题依旧。经同事提醒，开始在内部发布的版本里寻找能正常的版本。二分很快就找到了能正常使用的版本A和A之后不能正常使用的版本B。我确实没记错。能稳定重现后打算从异常本身入手。一番搜索后找到了微软的一篇<a href="https://blogs.msdn.microsoft.com/dsui_team/2013/11/18/wpf-render-thread-failures/" target="_blank" rel="external">博客</a></p>
<blockquote>
<p>… WPF render thread encountered some fatal error … Most of the time, a failure occurs when calling into DirectX/D3D … When a failure is detected, The render thread will attempt to map the failure it receives to an appropriate managed exception. The render thread only synchronizes with the UI thread in a few locations …The most common locations when they synchronize are … or as a result of the UI thread handling a “channel” message from DirectX.</p>
<p>If a render thread failure manifests as a System.OutOfMemoryException, then the likelihood is that the render thread was a victim of the process exhausting some resource .The exhausted resource is most often available/contiguous virtual address space … It might be a situation where sometimes the WPF render thread is the victim of the resource exhaustion …</p>
</blockquote>
<p>Hmm, 错误发生在DirectX渲染层面，这个BUG越来越有意思了。WPF里基本不会接触到直接跟渲染相关的东西。不过既然找到了版本A和B，那就从代码层面入手好了。打开版本控制软件，打算对比下改动过的代码。这是发现一个十分尴尬的问题：B版本没有打tag。按照公司的开发流程，每次出版本之前都需要在对应的提交上打tag。带着不按流程办事的负罪感，我在宇宙第一集成开发环境Visual Studio中打开了控制项目版本的文件，顺利找到了对应B版本的那个commit。根据diff，两个版本之间改的代码不算很多，排除掉无关的文件就只剩下UI了。这时忽然想起来程序起来时首先进入的是登陆页，还不确定是不是只有登陆页面才有问题。改下逻辑直接进入主界面发现问题消失了。运气不错，一下子就找到了根源。尝试把A版本登陆界面的代码直接覆盖到B版本，程序挂了。两次的结果互相冲突了，嗯，还是从登陆页面入手吧。我开始按照二分的原则开始删除代码，很快找到了问题的根源:ImageButton。</p>
<p>ImageButton是个很简单的控件：在普通、鼠标悬停、按下三种不同状态时显示不同的图片的按钮。</p>
<script src="https://gist.github.com/Verrickt/fc57f1e74e0837d5862410cfe7443055.js"></script>

<p>登陆页面中是这样使用ImageButton的:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">....</div><div class="line"><span class="tag">&lt;<span class="name">ImageButton</span> <span class="attr">Source</span>=<span class="string">"&#123;StaticResource SomeImage&#125;"</span> <span class="attr">MouseOverImage</span>=<span class="string">"&#123;StaticResouce SomeOtherImage&#125;"</span> <span class="attr">PressedImage</span>=<span class="string">"&#123;StaticResources AnotherImage&#125;"</span> /&gt;</span></div><div class="line">....</div></pre></td></tr></table></figure></p>
<p>我发现把<code>Source=&quot;{StaticResource SomeImage}&quot;</code>这一句去掉后程序就正常了。看来它就是罪魁祸首。为了给甩锅找个充分的理由，我把代码和相关图片资源放到新项目后，想确认的确是ImageButton导致的问题。正如下面标题剧透地，命运这次给我开了个小小的玩笑：仅包含ImageButton的代码没有问题。从现象出发的我一无所获。</p>
<h2 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h2><p>到这里时间已经过去一个多小时了，</p>
]]></content>
      
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> Debugging </tag>
            
            <tag> WPF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[闭包，变量捕获与重入问题]]></title>
      <url>/2018/03/08/Closure-and-re-entrance/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>公司的APP，在断网后进行一个10秒的倒计时操作，每秒钟都会尝试重新联网。当秒数到0时又重新开始计时，倒计时在用户退出程序或者连上网络结束。</p>
<p>按理说是个很简单的Case。QA却报过来个BUG，说APP状态由</p>
<p>联网-&gt;断网-&gt;联网-&gt;断网</p>
<p>变化后，倒计时的秒数变为</p>
<blockquote>
<p>9 3 8 2 7 1</p>
</blockquote>
<p>变得不连续了。</p>
<a id="more"></a>
<p>思考了一下，觉得应该是第一次倒计时的没有退出，第二次倒计时开始后两者都开始更新UI。</p>
<p>看了代码，果然是这样的</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnIPChanged</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ShowOfflineUI();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowOfflineUI</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Task.Factory.Start(<span class="keyword">delegate</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">        &#123;</div><div class="line">            i = (i<span class="number">-1</span>)%<span class="number">10</span>;</div><div class="line">            Invoke(UpdateCountDown(i))<span class="comment">//update UI on UI thread</span></div><div class="line">            <span class="keyword">try</span></div><div class="line">            &#123;</div><div class="line">                Thread.Sleep(TimeSpan.FromSeconds(<span class="number">1</span>))</div><div class="line">                <span class="keyword">if</span>(Connect())</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在第二次触发倒计时的时候原来的倒计时还在继续，即，两个倒计时同时执行是不安全的。这是典型的<a href="https://en.wikipedia.org/wiki/Reentrancy_(computing" target="_blank" rel="external">重入问题</a>)</p>
<hr>
<p>说实话我不是很喜欢直接用Thread.Sleep来做操作，这样占用了一个线程忙等，浪费了资源。C#中一般采用基于Task的异步编程来做，这样不会浪费资源。Task提供的CancellationToken能够比较容易的实现取消。放到这个Case里，只要开始倒计时的时候取消上一次的倒计时就好了。</p>
<p>说干就干,我最喜欢用Task重写基于Thread的并发/异步了</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">TaskCancellationToken _cts;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnIPChanged</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ShowOfflineUI();</div><div class="line">    ShowOfflineUI();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">async</span> Task <span class="title">ShowOfflineUI</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    _cts?.Cancel();</div><div class="line">    _cts = <span class="keyword">new</span> CancellationToken();</div><div class="line">    <span class="keyword">await</span> Task.Run(</div><div class="line">        <span class="keyword">async</span> ()=&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">            &#123;</div><div class="line">                i = (i<span class="number">-1</span>)%<span class="number">10</span>;</div><div class="line">                Invoke(UpdateCountDown(i));</div><div class="line">                <span class="keyword">await</span> Task.Delay(TimeSpan.FromSeconds(<span class="number">1</span>),_cts.Token);</div><div class="line">                <span class="keyword">if</span>(Connect())</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了验证方法的正确性，我特地在OnIPChanged()调用了两次ShowOfflineUI()。但是第一个Task并没有被取消。</p>
<h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>写出了跟自己预期不一样的代码怎么办？<br>当然是上Debugger了。<br>在Debugger的火眼金睛下，我很快注意到了最明显的现象：在第二次调用ShowOfflineUI的时候，_cts.Cancel()并没有把第一个Task中的CancellationToken的IsCancellationRequest变为True。<br>计算机科学里有句老话，那就是永远不要怀疑近30年内编译器的正确性。经过数十分钟的排(谷)查(歌)定位了问题的原因:两个Task引用的_cts是<strong>同一个</strong>。</p>
<h2 id="原因剖析"><a href="#原因剖析" class="headerlink" title="原因剖析"></a>原因剖析</h2><p>如果一个匿名函数引用了不属于他自己的局部变量，那么这个现象就称为闭包。因为这实在是太自然了所以我才没往这上面想。在给Task.Run中，我传入了一个Action<task>类型的函数，它捕获了外部变量_cts。在函数中每次用到_cts的时候，被捕获的变量的值被重新计算，结果作为实际的值。而我的本意是让两个Task拥有不同的_cts，这样后边的Task就可以取消前边的Task了。<br>明白了这些后就很好改了，在ShowOfflineUI里放一个局部变量，存储_cts的值，让匿名函数捕获这个局部变量就好了<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">async</span> Task <span class="title">ShowOfflineUI</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> local = _cts;</div><div class="line">    local?.Cancel();</div><div class="line">    _cts = <span class="keyword">new</span> CancellationToken();</div><div class="line">    <span class="keyword">await</span> Task.Run(</div><div class="line">        <span class="keyword">async</span> ()=&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">            &#123;</div><div class="line">                i = (i<span class="number">-1</span>)%<span class="number">10</span>;</div><div class="line">                Invoke(UpdateCountDown(i));</div><div class="line">                <span class="keyword">await</span> Task.Delay(TimeSpan.FromSeconds(<span class="number">1</span>),local?.Token??CancellationToken.None);</div><div class="line">                <span class="keyword">if</span>(Connect())</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></task></p>
<hr>
<p>有兴趣的朋友可以猜一猜这两段代码的结果，再运行验证一下</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NonLocal</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    List&lt;Action&gt; actions = <span class="keyword">new</span> List&lt;Action&gt;();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">10</span>;i++)</div><div class="line">        actions.Add(()=&gt;Console.WriteLine(i));</div><div class="line">    actions.ForEach(a=&gt;a());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Local</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     List&lt;Action&gt; actions = <span class="keyword">new</span> List&lt;Action&gt;();</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">10</span>;i++)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">int</span> j = i;</div><div class="line">         actions.Add(()=&gt;Console.WriteLine (j));</div><div class="line">     &#125;</div><div class="line">     actions.ForEach(a=&gt;a());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相信名字就给大家足够多的提示了</p>
<p>最后祝你身体健康，再见</p>
]]></content>
      
        
        <tags>
            
            <tag> Reentrance </tag>
            
            <tag> async/await </tag>
            
            <tag> lambda </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTPClient 踩坑记]]></title>
      <url>/2017/10/24/httpclient-good-part-and-tipfalls/</url>
      <content type="html"><![CDATA[<p>HttpClient是随着.Net framework 4.5一起发布的现代Http库。比起WebClient，HttpClient最大的优点就是<br>加入了C#5中的async/await异步方法的支持。async/await的坑暂且不表，今天就来说一说这个HttpClient</p>
<h2 id="HttpClient的坑"><a href="#HttpClient的坑" class="headerlink" title="HttpClient的坑"></a>HttpClient的坑</h2><p>HttpClient实现了IDisposable接口，很多小伙伴一看到IDisposeable接口就纷纷把HttpClient套在了using里边</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bad httpclient usage</span></div><div class="line"><span class="keyword">using</span>(<span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient())</div><div class="line">&#123;</div><div class="line">    <span class="comment">//do stuffs</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种用法是<strong>错误</strong>的.HttpClient在设计之初被设计为一个可重用的对象，它的生命周期应该与应用程序相一致.上述错误的用法每发起一个请求就会创建一个新的HttpClient，并且在收到回复之后立即把HttpClient dispose掉。众所周知TCP连接在真正断开之前会有几分钟处于CLOSE_WAIT状态。这个状态下TCP链接并没有真正断开。短时间内大量发出Http请求会使系统可用的端口急剧消耗。</p>
<a id="more"></a>
<p>MS的人推荐重用HttpClient以使其生命周期与应用相同</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//good httpclient usage</span></div><div class="line"><span class="keyword">class</span> <span class="title">GoodHttpClientSample</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> HttpClient client = <span class="keyword">new</span> HttpClient();</div><div class="line">    <span class="function"><span class="keyword">public</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">GetStringAsync</span>(<span class="params"><span class="keyword">string</span> url</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> resposne = <span class="keyword">await</span> client.GetAsync(url).ConfigureAwait(<span class="literal">false</span>);</div><div class="line">        <span class="keyword">return</span> response.Content.ReadAsStringAsync();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="HttpClient的优点"><a href="#HttpClient的优点" class="headerlink" title="HttpClient的优点"></a>HttpClient的优点</h2><p>踩过了坑我们再来说说他的好处。去掉async/await支持这个最大的有点，HttpClient的一个构造函数的重载接受一个HttpMessageHandler。这个重载很有意思。HttpMessageHandler可以在发出Http请求和接受Http回复时做出一些回应。.net framework里有一个类叫做DelegatingHandler，它继承了HttpMessageHandler。叫做DelegatingHandler是因为它有个类型为HttpMessageHandler的InnerHandler属性，因而可以把请求delegate给InnerHandler。通过这个DelegatingHandler我们可以请以实现像Java web里的filter chain一样的逻辑。</p>
<p>今天重构了公司的代码。公司现有的HttpManager提供了GET和POST两种Http动词的异步方法。在这些方法中还进行了日志记录和失败重试。日志记录和失败重试相关的代码非常重复，但是又无法写成一个函数。因此我把这部分逻辑抽出来做成了两个DelegatingHandler</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">LogHandler</span>:<span class="title">DelegatingHandler</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILog _log;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogHandler</span>(<span class="params">ILog log,HttpMessageHandler handler</span>):<span class="title">base</span>(<span class="params">handler</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        _log = log;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">async</span> <span class="keyword">override</span> Task&lt;HttpResponseMessage&gt; <span class="title">SendAsync</span>(<span class="params">HttpRequestMessage request, CancellationToken cancellationToken</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> begin = DateTime.Now;</div><div class="line">            _log.I(<span class="string">$"<span class="subst">&#123;request.Method&#125;</span> -&gt;<span class="subst">&#123;request.RequestUri&#125;</span>"</span>);</div><div class="line">            <span class="keyword">var</span> response = <span class="keyword">await</span> <span class="keyword">base</span>.SendAsync(request,cancellationToken);</div><div class="line">            <span class="keyword">var</span> end = DateTime.Now;</div><div class="line">            <span class="keyword">var</span> diff = (end-begin).TotalMillseconds;</div><div class="line">            _log.I(<span class="string">$"<span class="subst">&#123;request.Method&#125;</span> &lt;- <span class="subst">&#123;response.Content.ReadAsStringAsync()&#125;</span> cost<span class="subst">&#123;diff&#125;</span>ms"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span>(Exception e)</div><div class="line">        &#123;</div><div class="line">            _log.E(<span class="string">$"<span class="subst">&#123;request.Method&#125;</span> -&gt;<span class="subst">&#123;request.RequestUri&#125;</span>,<span class="subst">&#123;e&#125;</span>"</span>);</div><div class="line">            <span class="keyword">throw</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">RetryHandler</span>:<span class="title">DelegatingHandler</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">async</span> <span class="keyword">override</span> Task&lt;HttpResponseMessage&gt; <span class="title">SendAsync</span>(<span class="params">HttpRequestMessage request,CancellationToken cancellationToken</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        HttpResponseMessage response = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=_retryTimes,i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">try</span></div><div class="line">            &#123;</div><div class="line">                response = <span class="keyword">await</span> <span class="keyword">base</span>.SendAsync(request,cancellationToken);</div><div class="line">                <span class="keyword">return</span> response;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span>(Exception)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i==_retryTimes)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">throw</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//make compiler happy. </span></div><div class="line">            <span class="keyword">return</span> response;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">int</span> _retryTimes = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RetryHandler</span>(<span class="params"><span class="keyword">int</span> retryTimes,HttpMessageHandler handler</span>):<span class="title">base</span>(<span class="params">handler</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(retryTimes&lt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="keyword">nameof</span>(retryTimes));</div><div class="line">        &#125;</div><div class="line">        _retryTimes = retryTimes;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HttpClientHandler是个真正实现HttpClient逻辑的HttpMessageHandler。因此，我们只要保证最内部的Handler时HttpClientHandler就OK了。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ILog _log;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> HttpClient _client = <span class="keyword">new</span> </div><div class="line">HttpClient(<span class="keyword">new</span> RetryHandler(<span class="number">3</span>,<span class="keyword">new</span> LogHandler(_log,<span class="keyword">new</span> HttpClientHandler())));</div></pre></td></tr></table></figure>
<p><strong>需要注意的是，如果HttpHandler没有返回HttpResponseMessage,对应的异步方法会在运行时抛出InvalidOperationException</strong></p>
<p>重构之后整个Http封装类的代码行数从400行减少到了120行左右，可读性和可维护性提升显著。</p>
<h2 id="Further-reading"><a href="#Further-reading" class="headerlink" title="Further reading"></a>Further reading</h2><p><a href="https://www.thomaslevesque.com/2016/12/08/fun-with-the-httpclient-pipeline/" target="_blank" rel="external">FUN WITH THE HTTPCLIENT PIPELINE</a></p>
<p><a href="https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/" target="_blank" rel="external">YOU’RE USING HTTPCLIENT WRONG AND IT IS DESTABILIZING YOUR SOFTWARE</a></p>
<p><a href="https://stackoverflow.com/questions/15705092/do-httpclient-and-httpclienthandler-have-to-be-disposed" target="_blank" rel="external">Do HttpClient and HttpClientHandler have to be disposed?</a></p>
]]></content>
      
        
        <tags>
            
            <tag> HttpClient </tag>
            
            <tag> C# </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
