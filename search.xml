<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[闭包，变量捕获与重入]]></title>
      <url>/2018/03/08/Closure-and-re-entrance/</url>
      <content type="html"><![CDATA[<p>公司的APP，在断网后进行一个10秒的倒计时操作，每秒钟都会尝试重新联网。当秒数到0时又重新开始计时，倒计时在用户退出程序或者连上网络结束。</p>
<p>按理说是个很简单的Case。QA却报过来个BUG，说APP状态由</p>
<p>联网-&gt;断网-&gt;联网-&gt;断网</p>
<p>变化后，倒计时的秒数变得不连续了</p>
<blockquote>
<p>9 3 8 2 7 1 </p>
</blockquote>
<p>思考了一下，觉得应该是第一次倒计时的没有退出，第二次倒计时开始后两者都开始更新UI。</p>
<p>看了代码，果然是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">void OnIPChanged()</div><div class="line">&#123;</div><div class="line">    ShowOfflineUI();</div><div class="line">&#125;</div><div class="line">void ShowOfflineUI()</div><div class="line">&#123;</div><div class="line">    Task.Factory.Start(delegate</div><div class="line">    &#123;</div><div class="line">        int i = 10;</div><div class="line">        while(true)</div><div class="line">        &#123;</div><div class="line">            i = (i-1)%10;</div><div class="line">            Invoke(UpdateCountDown(i))//update UI on UI thread</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                Thread.Sleep(TimeSpan.FromSeconds(1))</div><div class="line">                if(Connect())</div><div class="line">                &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>说实话我不是很喜欢直接用Thread.Sleep来做操作，这样占用了一个线程忙等，浪费了资源。C#中一般采用基于Task的异步编程来做，这样不会浪费资源。Task提供的CancellationToken能够比较容易的实现取消。放到这个Case里，只要开始倒计时的时候取消上一次的倒计时就好了。</p>
<p>说干就干,我最喜欢用Task重写基于Thread的并发/异步了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">TaskCancellationToken _cts;</div><div class="line">void OnIPChanged()</div><div class="line">&#123;</div><div class="line">    ShowOfflineUI();</div><div class="line">    ShowOfflineUI();</div><div class="line">&#125;</div><div class="line">async Task ShowOfflineUI()</div><div class="line">&#123;</div><div class="line">    _cts?.Cancel();</div><div class="line">    _cts = new CancellationToken();</div><div class="line">    await Task.Run(</div><div class="line">        async ()=&gt;</div><div class="line">        &#123;</div><div class="line">            int i = 0;</div><div class="line">            while(true)</div><div class="line">            &#123;</div><div class="line">                i = (i-1)%10;</div><div class="line">                Invoke(UpdateCountDown(i));</div><div class="line">                await Task.Delay(TimeSpan.FromSeconds(1),_cts.Token);</div><div class="line">                if(Connect())</div><div class="line">                &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了验证方法的正确性，我特地在OnIPChanged()调用了两次ShowOfflineUI()。但是第一个Task并没有被取消。</p>
<h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>写出了跟自己预期不一样的代码怎么办？<br>当然是上Debugger了。<br>在Debugger的火眼金睛下，我很快注意到了最明显的现象：在第二次调用ShowOfflineUI的时候，_cts.Cancel()并没有把第一个Task中的CancellationToken的IsCancellationRequest变为True。<br>计算机科学里有句老话，那就是永远不要怀疑近30年内编译器的正确性。经过数十分钟的排(谷)查(歌)定位了问题的原因:两个Task引用的_cts是<strong>同一个</strong>。</p>
<h2 id="原因剖析"><a href="#原因剖析" class="headerlink" title="原因剖析"></a>原因剖析</h2><p>如果一个匿名函数引用了不属于他自己的局部变量，那么这个现象就称为闭包。因为这实在是太自然了所以我才没往这上面想。在给Task.Run中，我传入了一个Action<task>类型的函数，它捕获了外部变量_cts。在函数中每次用到_cts的时候，被捕获的变量的值被重新计算，结果作为实际的值。而我的本意是让两个Task拥有不同的_cts，这样后边的Task就可以取消前边的Task了。<br>明白了这些后就很好改了，在ShowOfflineUI里放一个局部变量，存储_cts的值，让匿名函数捕获这个局部变量就好了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">async Task ShowOfflineUI()</div><div class="line">&#123;</div><div class="line">    var local = _cts;</div><div class="line">    local?.Cancel();</div><div class="line">    _cts = new CancellationToken();</div><div class="line">    await Task.Run(</div><div class="line">        async ()=&gt;</div><div class="line">        &#123;</div><div class="line">            int i = 0;</div><div class="line">            while(true)</div><div class="line">            &#123;</div><div class="line">                i = (i-1)%10;</div><div class="line">                Invoke(UpdateCountDown(i));</div><div class="line">                await Task.Delay(TimeSpan.FromSeconds(1),local?.Token??CancellationToken.None);</div><div class="line">                if(Connect())</div><div class="line">                &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></task></p>
<hr>
<p>有兴趣的朋友可以猜一猜这两段代码的结果，再运行验证一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public void NonLocal()</div><div class="line">&#123;</div><div class="line">    List&lt;Action&gt; actions = new List&lt;Action&gt;();</div><div class="line">    for(int i=0 ;i&lt;10;i++)</div><div class="line">        actions.Add(()=&gt;Console.WriteLine(i));</div><div class="line">    actions.ForEach(a=&gt;a());</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void Local()</div><div class="line">&#123;</div><div class="line">     List&lt;Action&gt; actions = new List&lt;Action&gt;();</div><div class="line">    for(int i=0 ;i&lt;10;i++)</div><div class="line">    &#123;</div><div class="line">        int j = i;</div><div class="line">        actions.Add(()=&gt;Console.WriteLine(j));</div><div class="line">    &#125;</div><div class="line">    actions.ForEach(a=&gt;a());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相信函数的名字已经告诉大家结果了。</p>
<p>最后祝你身体健康，再见</p>
]]></content>
      
        
        <tags>
            
            <tag> TAP,Async/await,lambda </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTPClient 踩坑记]]></title>
      <url>/2017/10/24/httpclient-good-part-and-tipfalls/</url>
      <content type="html"><![CDATA[<p>HttpClient是随着.Net framework 4.5一起发布的现代Http库。比起WebClient，HttpClient最大的优点就是<br>加入了C#5中的async/await异步方法的支持。async/await的坑暂且不表，今天就来说一说这个HttpClient</p>
<h2 id="HttpClient的坑"><a href="#HttpClient的坑" class="headerlink" title="HttpClient的坑"></a>HttpClient的坑</h2><p>HttpClient实现了IDisposable接口，很多小伙伴一看到IDisposeable接口就纷纷把HttpClient套在了using里边</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bad httpclient usage</span></div><div class="line"><span class="keyword">using</span>(<span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient())</div><div class="line">&#123;</div><div class="line">    <span class="comment">//do stuffs</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种用法是<strong>错误</strong>的.HttpClient在设计之初被设计为一个可重用的对象，它的生命周期应该与应用程序相一致.上述错误的用法每发起一个请求就会创建一个新的HttpClient，并且在收到回复之后立即把HttpClient dispose掉。众所周知TCP连接在真正断开之前会有几分钟处于CLOSE_WAIT状态。这个状态下TCP链接并没有真正断开。短时间内大量发出Http请求会使系统可用的端口急剧消耗。</p>
<a id="more"></a>
<p>MS的人推荐重用HttpClient以使其生命周期与应用相同</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//good httpclient usage</span></div><div class="line"><span class="keyword">class</span> <span class="title">GoodHttpClientSample</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> HttpClient client = <span class="keyword">new</span> HttpClient();</div><div class="line">    <span class="function"><span class="keyword">public</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">GetStringAsync</span>(<span class="params"><span class="keyword">string</span> url</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> resposne = <span class="keyword">await</span> client.GetAsync(url).ConfigureAwait(<span class="literal">false</span>);</div><div class="line">        <span class="keyword">return</span> response.Content.ReadAsStringAsync();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="HttpClient的优点"><a href="#HttpClient的优点" class="headerlink" title="HttpClient的优点"></a>HttpClient的优点</h2><p>踩过了坑我们再来说说他的好处。去掉async/await支持这个最大的有点，HttpClient的一个构造函数的重载接受一个HttpMessageHandler。这个重载很有意思。HttpMessageHandler可以在发出Http请求和接受Http回复时做出一些回应。.net framework里有一个类叫做DelegatingHandler，它继承了HttpMessageHandler。叫做DelegatingHandler是因为它有个类型为HttpMessageHandler的InnerHandler属性，因而可以把请求delegate给InnerHandler。通过这个DelegatingHandler我们可以请以实现像Java web里的filter chain一样的逻辑。</p>
<p>今天重构了公司的代码。公司现有的HttpManager提供了GET和POST两种Http动词的异步方法。在这些方法中还进行了日志记录和失败重试。日志记录和失败重试相关的代码非常重复，但是又无法写成一个函数。因此我把这部分逻辑抽出来做成了两个DelegatingHandler</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">LogHandler</span>:<span class="title">DelegatingHandler</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILog _log;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogHandler</span>(<span class="params">ILog log,HttpMessageHandler handler</span>):<span class="title">base</span>(<span class="params">handler</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        _log = log;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">async</span> <span class="keyword">override</span> Task&lt;HttpResponseMessage&gt; <span class="title">SendAsync</span>(<span class="params">HttpRequestMessage request, CancellationToken cancellationToken</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> begin = DateTime.Now;</div><div class="line">            _log.I(<span class="string">$"<span class="subst">&#123;request.Method&#125;</span> -&gt;<span class="subst">&#123;request.RequestUri&#125;</span>"</span>);</div><div class="line">            <span class="keyword">var</span> response = <span class="keyword">await</span> <span class="keyword">base</span>.SendAsync(request,cancellationToken);</div><div class="line">            <span class="keyword">var</span> end = DateTime.Now;</div><div class="line">            <span class="keyword">var</span> diff = (end-begin).TotalMillseconds;</div><div class="line">            _log.I(<span class="string">$"<span class="subst">&#123;request.Method&#125;</span> &lt;- <span class="subst">&#123;response.Content.ReadAsStringAsync()&#125;</span> cost<span class="subst">&#123;diff&#125;</span>ms"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span>(Exception e)</div><div class="line">        &#123;</div><div class="line">            _log.E(<span class="string">$"<span class="subst">&#123;request.Method&#125;</span> -&gt;<span class="subst">&#123;request.RequestUri&#125;</span>,<span class="subst">&#123;e&#125;</span>"</span>);</div><div class="line">            <span class="keyword">throw</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">RetryHandler</span>:<span class="title">DelegatingHandler</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">async</span> <span class="keyword">override</span> Task&lt;HttpResponseMessage&gt; <span class="title">SendAsync</span>(<span class="params">HttpRequestMessage request,CancellationToken cancellationToken</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        HttpResponseMessage response = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=_retryTimes,i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">try</span></div><div class="line">            &#123;</div><div class="line">                response = <span class="keyword">await</span> <span class="keyword">base</span>.SendAsync(request,cancellationToken);</div><div class="line">                <span class="keyword">return</span> response;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span>(Exception)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i==_retryTimes)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">throw</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//make compiler happy. </span></div><div class="line">            <span class="keyword">return</span> response;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">int</span> _retryTimes = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RetryHandler</span>(<span class="params"><span class="keyword">int</span> retryTimes,HttpMessageHandler handler</span>):<span class="title">base</span>(<span class="params">handler</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(retryTimes&lt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="keyword">nameof</span>(retryTimes));</div><div class="line">        &#125;</div><div class="line">        _retryTimes = retryTimes;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HttpClientHandler是个真正实现HttpClient逻辑的HttpMessageHandler。因此，我们只要保证最内部的Handler时HttpClientHandler就OK了。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ILog _log;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> HttpClient _client = <span class="keyword">new</span> </div><div class="line">HttpClient(<span class="keyword">new</span> RetryHandler(<span class="number">3</span>,<span class="keyword">new</span> LogHandler(_log,<span class="keyword">new</span> HttpClientHandler())));</div></pre></td></tr></table></figure>
<p><strong>需要注意的是，如果HttpHandler没有返回HttpResponseMessage,对应的异步方法会在运行时抛出InvalidOperationException</strong></p>
<p>重构之后整个Http封装类的代码行数从400行减少到了120行左右，可读性和可维护性提升显著。</p>
<h2 id="Further-reading"><a href="#Further-reading" class="headerlink" title="Further reading"></a>Further reading</h2><p><a href="https://www.thomaslevesque.com/2016/12/08/fun-with-the-httpclient-pipeline/" target="_blank" rel="external">FUN WITH THE HTTPCLIENT PIPELINE</a></p>
<p><a href="https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/" target="_blank" rel="external">YOU’RE USING HTTPCLIENT WRONG AND IT IS DESTABILIZING YOUR SOFTWARE</a></p>
<p><a href="https://stackoverflow.com/questions/15705092/do-httpclient-and-httpclienthandler-have-to-be-disposed" target="_blank" rel="external">Do HttpClient and HttpClientHandler have to be disposed?</a></p>
]]></content>
      
        
        <tags>
            
            <tag> HttpClient </tag>
            
            <tag> C# </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/09/18/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
